<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>radare2 on REhex</title>
    <link>/tags/radare2/</link>
    <description>Recent content in radare2 on REhex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 03 May 2021 14:40:06 +0100</lastBuildDate><atom:link href="/tags/radare2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>!e radare2 / rizin cheatsheet</title>
      <link>/posts/radare2-rizin-cheatsheet/</link>
      <pubDate>Mon, 03 May 2021 14:40:06 +0100</pubDate>
      
      <guid>/posts/radare2-rizin-cheatsheet/</guid>
      <description>&lt;p&gt;radare2 / rizin cheatsheet&lt;/p&gt;</description>
      <content>&lt;p&gt;radare2 / rizin cheatsheet&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: This cheatsheet was originally created for r2, but it should still be compatibile for rizin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rada.re&#34;&gt;radare2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rizin.re&#34;&gt;rizin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;h4 id=&#34;manage-file&#34;&gt;Manage file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# open in debug mode&lt;/span&gt;
r2 -d $FILE

doo &lt;span style=&#34;color:#75715e&#34;&gt;# re-open file in debug mode&lt;/span&gt;
ood &lt;span style=&#34;color:#75715e&#34;&gt;# /&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;flow-control&#34;&gt;Flow control&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# display / set breakpoint&lt;/span&gt;
db &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;flag/addr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# continue to breakpoint&lt;/span&gt;
dc

&lt;span style=&#34;color:#75715e&#34;&gt;# continue until addr / flag (without setting breakpoint)&lt;/span&gt;
dcu &amp;lt;flag/addr&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# break on syscall name / value&lt;/span&gt;
dcs &amp;lt;syscall&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# step into N instructions&lt;/span&gt;
ds &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# step over N instructions&lt;/span&gt;
dso &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reverse-debugging&#34;&gt;Reverse debugging&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dts?

&lt;span style=&#34;color:#75715e&#34;&gt;# select some point&lt;/span&gt;
db sym.foo

&lt;span style=&#34;color:#75715e&#34;&gt;# store point in time / start recording?&lt;/span&gt;
dts+
dc

&lt;span style=&#34;color:#75715e&#34;&gt;# go to the previous instruction&lt;/span&gt;
dsb

&lt;span style=&#34;color:#75715e&#34;&gt;# write / read ALL trace sessions to / from disk&lt;/span&gt;
dtst sessions.dbg
dtsf sessions.dbg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;read-values&#34;&gt;Read values&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# show registers&lt;/span&gt;
drr

&lt;span style=&#34;color:#75715e&#34;&gt;# show stack contents&lt;/span&gt;
pxr @ rsp!32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;scripting-hooks&#34;&gt;Scripting (hooks)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# auto-run command on breakpoint&lt;/span&gt;
db main  						&lt;span style=&#34;color:#75715e&#34;&gt;# set breakpoint&lt;/span&gt;
dbc main drr					&lt;span style=&#34;color:#75715e&#34;&gt;# set command on breakpoint &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;custom-environment&#34;&gt;Custom environment&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that when first starting radare2 in debug mode, you will actually be debugging rarun2! &lt;em&gt;You need to first continue execution (dc)&lt;/em&gt; which will leave you in the loader for the program itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run program with custom environment&lt;/span&gt;
r2 -d rarun2 program&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./&amp;lt;program_name&amp;gt; arg0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;foo stdin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./&amp;lt;some_file&amp;gt; setenv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ENV_VAR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;==OR==&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-rr2&#34; data-lang=&#34;rr2&#34;&gt;#!/usr/bin/rarun2
program=./&amp;lt;program_name&amp;gt;
arg0=foo
stdin=./&amp;lt;some_file&amp;gt;
setenv=ENV_VAR=&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;r2 -d rarun2 script.rr2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;visual-debugging&#34;&gt;Visual debugging&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;(Enter &lt;code&gt;V&lt;/code&gt; command to enter or &lt;code&gt;VV&lt;/code&gt; / &lt;code&gt;VV!&lt;/code&gt;), with [p] / [P] you can change views)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;With &lt;code&gt;dm&lt;/code&gt; you can check if you are still in loader code - search for &lt;em&gt;(&lt;/em&gt;)*.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[.] -&amp;gt; seek to program counter&lt;/li&gt;
&lt;li&gt;[c] -&amp;gt; toggle cursor&lt;/li&gt;
&lt;li&gt;[o] -&amp;gt; toggle asm / pseudo&lt;/li&gt;
&lt;li&gt;[g] -&amp;gt; seek to…&lt;/li&gt;
&lt;li&gt;[G] -&amp;gt; seek to highlighted&lt;/li&gt;
&lt;li&gt;[u], [U] -&amp;gt; undo / redo seek&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; , &lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; -&amp;gt; xrefs from/to&lt;/li&gt;
&lt;li&gt;[B], [F2] -&amp;gt; toggle breakpoint&lt;/li&gt;
&lt;li&gt;[s], [F7] -&amp;gt; step into&lt;/li&gt;
&lt;li&gt;[S], [F8] -&amp;gt; step over&lt;/li&gt;
&lt;li&gt;[F9] -&amp;gt; continue&lt;/li&gt;
&lt;li&gt;[t] -&amp;gt; tab managment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;esil&#34;&gt;ESIL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://monosource.gitbooks.io/radare2-explorations/content/tut3/tut3_-_esil.html&#34;&gt;ESIL · Radare2 Explorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/disassembling/esil.html&#34;&gt;ESIL · Radare2 Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-radare2rc&#34; data-lang=&#34;radare2rc&#34;&gt;e asm.emu = true # esil comments
e io.cache = true # write in memory cache
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;visual-mode&#34;&gt;Visual mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[O] - toggle pseudocode / ESIL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;commands&#34;&gt;Commands&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# check used registers by the function&lt;/span&gt;
aeaf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-session&#34;&gt;Example session&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aei 	&lt;span style=&#34;color:#75715e&#34;&gt;# init esil vm &lt;/span&gt;
aeim  &lt;span style=&#34;color:#75715e&#34;&gt;# init mem &lt;/span&gt;
aeip 	&lt;span style=&#34;color:#75715e&#34;&gt;# set esil vm pointer to current seek&lt;/span&gt;
aer	&lt;span style=&#34;color:#75715e&#34;&gt;# handle esil registers&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# example set value&lt;/span&gt;
aer eax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1234 &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# continue until eax is not greater than on start&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aecue eax,0x1234,&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/scripting/macros.html&#34;&gt;Macros · Radare2 Book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example session&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set up relative breakpoints. one per cmp instruction*&lt;/span&gt;
db sym.check_code_int+0x00001289-0x00001265
db sym.check_code_int+0x000012b7-0x00001265
db sym.check_code_int+0x000012e2-0x00001265
db sym.check_code_int+0x0000130d-0x00001265*#* *execute program*
dc* &lt;span style=&#34;color:#75715e&#34;&gt;# input four digits (doesn&amp;#39;t matter which ones)*&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
1*# define a macro that replaces the value *
*# of ebx with the content of eax and stores it into a file*
!rm ./crack_code
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eax_replace, dr ebx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;dr eax&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; | tee -a crack_code, dc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;*# use the macro*
.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eax_replace &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;@@&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 3*# show the results*
!cat ./crack_code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;malware-analysis&#34;&gt;Malware Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ob&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# show open files&lt;/span&gt;
afl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# list function ranges&lt;/span&gt;
aflt &lt;span style=&#34;color:#75715e&#34;&gt;# show function table&lt;/span&gt;

p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# show hist of entropy&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# show hist entropy horizontal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;operations&#34;&gt;Operations&lt;/h2&gt;
&lt;h4 id=&#34;writing&#34;&gt;Writing&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;r2 -w binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# write null-terminated string&lt;/span&gt;
wz &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello there&amp;#34;&lt;/span&gt;
psz &lt;span style=&#34;color:#75715e&#34;&gt;# print it&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# write number at offset&lt;/span&gt;
wx deadbeef @ 0x30
p8 @ 0x30!4 &lt;span style=&#34;color:#75715e&#34;&gt;# print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;write-in-block&#34;&gt;Write in block&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wo?

&lt;span style=&#34;color:#75715e&#34;&gt;# write bytes in sequence starting from 42, incrementing by 3&lt;/span&gt;
woe &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; @ edi!32

&lt;span style=&#34;color:#75715e&#34;&gt;# xor block of memory by 41&lt;/span&gt;
wx &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; @ esp!32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;visual-mode-1&#34;&gt;Visual mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[TAB] -&amp;gt; switch between columns&lt;/li&gt;
&lt;li&gt;[c] -&amp;gt; toggle cursor mode&lt;/li&gt;
&lt;li&gt;[i] -&amp;gt; enter &lt;em&gt;insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;[A] -&amp;gt; assemble binary:
&lt;ul&gt;
&lt;li&gt;enter your asm,&lt;/li&gt;
&lt;li&gt;instructions can be separated with &lt;code&gt;;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;press [Enter] and [y] to save changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;copypaste&#34;&gt;Copy/Paste&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Enter to &lt;em&gt;visual mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Enable cursor mode with [c].&lt;/li&gt;
&lt;li&gt;Press [Shift] to select area to copy, ten press [y].&lt;/li&gt;
&lt;li&gt;Go to desired place and press [Y] to paste copied data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;code-analysis&#34;&gt;Code analysis&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Enter to &lt;em&gt;Visual mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Seek to piece of code for analysis&lt;/li&gt;
&lt;li&gt;Enter [d], then [f] for define function.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references--furtker-reading&#34;&gt;References / Furtker Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://monosource.gitbooks.io/radare2-explorations/content/&#34;&gt;Introduction · Radare2 Explorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/&#34;&gt;Introduction · Radare2 Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
    <item>
      <title>Comparision of Reverse-Engineering Tools</title>
      <link>/posts/comparision-of-re-tools/</link>
      <pubDate>Sun, 19 Apr 2020 12:12:00 +0200</pubDate>
      
      <guid>/posts/comparision-of-re-tools/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s compare the most populare reverse-egineering with strong focus on &lt;strong&gt;personal&lt;/strong&gt; usage: &lt;em&gt;BinaryNinja&lt;/em&gt;, &lt;em&gt;Ghidra&lt;/em&gt;, &lt;em&gt;IDA&lt;/em&gt; and &lt;em&gt;radare2&lt;/em&gt;.&lt;/p&gt;</description>
      <content>&lt;p&gt;Let&amp;rsquo;s compare the most populare reverse-egineering with strong focus on &lt;strong&gt;personal&lt;/strong&gt; usage: &lt;em&gt;BinaryNinja&lt;/em&gt;, &lt;em&gt;Ghidra&lt;/em&gt;, &lt;em&gt;IDA&lt;/em&gt; and &lt;em&gt;radare2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully this post will help you to find tools worth choosing as primary reverse engineering tool.&lt;/p&gt;
&lt;h2 id=&#34;scoring-rules&#34;&gt;Scoring rules&lt;/h2&gt;
&lt;p&gt;To be fair during my analysis I developed simple score system. For each feature product can specific amount of points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;1.0&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt;) - given feature is available and fully operational.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0.5&lt;/strong&gt; (&lt;code&gt;~&lt;/code&gt;) - feature is partially available, you need to install plugin to achieve it or pay for extra license.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0.0&lt;/strong&gt; (&lt;code&gt;-&lt;/code&gt;)- feature is not available at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;comparision&#34;&gt;Comparision&lt;/h2&gt;
&lt;p&gt;For detailed description of features go to corresponding chapters below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Bracketed]&lt;/strong&gt; character means that in my opinion specified tool is the &amp;ldquo;best&amp;rdquo; in the specified category (feature), it is not extra scored, but it may be useful for somebody.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|                      | Price | Score | Cross-platform |   Multi-arch  |       Decompiler       | Debugger | Plugins (1)  | Signatures (2)  | Patching (3)  | Symbolic constants |
|:--------------------:|:-----:|:-----:|:--------------:|:-------------:|:----------------------:|:--------:|:------------:|:---------------:|:-------------:|:------------------:|
| BinaryNinja 2.0.2097 |  $150 |  7.0  |        +       |       +       |            +           |     +    |       +      |        +        |      [+]      |          -         |
|     Ghidra 9.1.2     |  Free |  6.5  |        +       |       +       |           [+]          |     -    |       ~      |        +        |       +       |          +         |
|      IDA Home(4)     |  $365 |  6.0  |  ~ (1/license) | ~ (1/license) | ~ (extra-paid feature) |    [+]   |       +      |       [+]       |       ~       |          +         |
|    radare2/Cutter    |  Free |  7.0  |       [+]      |      [+]      |            +           |     +    |       +      |        +        |       +       |          -         |
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; - support for modern, updated programming languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signatures&lt;/strong&gt; - built-in signatures with option to add own.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patching&lt;/strong&gt; - ability to assemble code without using the hex-editor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDA Home&lt;/strong&gt; - currently this version is not published yet, but this is just a limited IDA Pro version, so I will rate it based on my previous experiences with IDA Pro (for limitation list go to &lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;price&#34;&gt;Price&lt;/h3&gt;
&lt;p&gt;Actually here is no winner, I would like to only mention that I skipped some freeware versions of paid tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.binary.ninja/&#34;&gt;BinaryNinja Cloud&lt;/a&gt; - Binary Ninja Personal in browser, but without debugger and plugins support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hex-rays.com/products/ida/support/download_freeware/&#34;&gt;IDA Freeware 7.0&lt;/a&gt; - free version of IDA, with a lot of limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To be 100% honest, BinaryNinja also have &lt;a href=&#34;https://binary.ninja/demo/&#34;&gt;standalone demo&lt;/a&gt;, but it is more limited than cloud version, so I decided to ignore it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;score&#34;&gt;Score&lt;/h3&gt;
&lt;p&gt;Just remember to not blindly follow my scoring! This blog post is about my subjective point of view. If you want to know, which tool I like the most -&amp;gt; jump to the &lt;a href=&#34;#summary&#34;&gt;summary&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;cross-platform&#34;&gt;Cross platform&lt;/h3&gt;
&lt;p&gt;From my perspective disassembly tool should be cross-platform, it is very annoying when you can&amp;rsquo;t &lt;strong&gt;easily&lt;/strong&gt; install your tool on any operating system, specially when you are not staying with one favourite whole time (like me - I&amp;rsquo;m the user of OSX, Linux &amp;amp; Windows).&lt;/p&gt;
&lt;p&gt;Unfortunatelly &lt;em&gt;IDA&lt;/em&gt; is &amp;ldquo;not the best&amp;rdquo; here, because you need to specify on what kind of operating system you are going to use it :/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t understand me wrong: you can disassemble Linux binaries on Windows and veice versa. But  it means that if you decide to buy it in version for Windows, then you will receive IDA install files only for Windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The absolute winner is &lt;em&gt;radare2&lt;/em&gt;, this tool you can run on almost anything (probably you can even run it on your washing machine).&lt;/p&gt;
&lt;h3 id=&#34;multi-arch-support-multiple-cpu-families&#34;&gt;Multi-arch (support multiple CPU families)&lt;/h3&gt;
&lt;p&gt;You never know when you will have change architecture of analysed software, probably you will do the most of analysis for x86 or ARM, but it is good to be ready for any kind of analysis, especially when you are paying for some tools.&lt;/p&gt;
&lt;p&gt;Once again &lt;em&gt;IDA&lt;/em&gt; is not cheap and supports only 1 architecture for each home license.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;radare2&lt;/em&gt; supports probably the biggest amount of architectures by default.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the rest of tools probably requires only install of some plugin to support extra architecture - IDA Home is an exception.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;decompiler&#34;&gt;Decompiler&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ghidra.png&#34; alt=&#34;Ghidra Decompiler&#34;&gt;&lt;/p&gt;
&lt;p&gt;Probably the most desired feature in every disassembly product. Unfortunatelly &lt;em&gt;IDA Home&lt;/em&gt; won&amp;rsquo;t have it built-in in this price and you need to pay full-price to get it (and this is very expensive toy).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I really hate to hate IDA, because I like this tool, but IDA have also another disadvantage (without hex-rays): local variables doesn&amp;rsquo;t support types.&lt;/p&gt;
&lt;p&gt;This actually affects all plugins using i.e ghidra decompiler - if you have binary where some structure is created in the context of local variable, then you have to manually rename variables - even if definition of its structure is known for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But anyway &lt;em&gt;Ghidra&lt;/em&gt; seems to have the best decompiler at this moment (even better that &lt;em&gt;HexRays&lt;/em&gt;): with support for C++ classes, etc. Definately the strongest feature of &lt;em&gt;Ghidra&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;Binja&lt;/em&gt; it is relatively fresh stuff (it is available from version 2.0), so hopefully it will be similarly good as &lt;em&gt;Ghidra&lt;/em&gt; (binja-devs we are waiting for support of classes!).&lt;/p&gt;
&lt;p&gt;Finally &lt;del&gt;r2&lt;/del&gt; &lt;em&gt;Cutter&lt;/em&gt; have some decompiler, but seems to prefer to use ghidra&amp;rsquo;s decompiler with as pretty good integration.&lt;/p&gt;
&lt;h3 id=&#34;debugger&#34;&gt;Debugger&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ida-debugger.png&#34; alt=&#34;IDA Debugger&#34;&gt;&lt;/p&gt;
&lt;p&gt;IDA is the winner and the loser at the same time. Definately the ugliest and the less intuitive interface, but it also have win-feature in debugger (even if debugger is sometimes bugged): populate current code state to database. Very useful during unpacking or dynamic code modifications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; radare2 developed something called ESIL - very useful features for emulating code, analysis. Unfortunatelly it can&amp;rsquo;t run code handled by operating system (APIs).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; actually binja from some time also can populate analysis database based on debugging session! (it happens auto-magically)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;plugins&#34;&gt;Plugins&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/binja-plugins.png&#34; alt=&#34;BinaryNinja - plugins&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here I had very simple requirements: plugin API must be available &lt;strong&gt;AND&lt;/strong&gt; used language must be up to date.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ghidra&lt;/em&gt; failed here, because it is using &lt;em&gt;Java&lt;/em&gt; or &lt;em&gt;Python2&lt;/em&gt; (&lt;em&gt;Jython&lt;/em&gt; to be honest). Just no.&lt;/p&gt;
&lt;p&gt;I really like &lt;em&gt;radare2&lt;/em&gt; API, because it is just radare syntax :P Then binja API seems to be very intuitive, IDA contains the most complex API.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;BinaryNinja&lt;/em&gt; and &lt;em&gt;radare2&lt;/em&gt; have plugin managers which helps you to install plugins &amp;amp; keep them updated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;signatures&#34;&gt;Signatures&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ida-lumina.png&#34; alt=&#34;IDA Lumina&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every dissasembly tool should have some mechanism for detecing commonly known functions and actually all of mentioned tools have such ability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BinaryNinja - own &amp;ldquo;&lt;a href=&#34;https://binary.ninja/2020/03/11/signature-libraries.html&#34;&gt;Signatures&lt;/a&gt;&amp;rdquo; engine (I will work on support for FLIRT);&lt;/li&gt;
&lt;li&gt;Ghidra - own signatures engine + FLIRT support (plugin required);&lt;/li&gt;
&lt;li&gt;IDA Home - &lt;a href=&#34;https://www.hex-rays.com/products/ida/tech/flirt/in_depth/&#34;&gt;FLIRT&lt;/a&gt;, support for Lumina server is not known is not known yet;&lt;/li&gt;
&lt;li&gt;Radare2 - zignatures(&lt;code&gt;iz?&lt;/code&gt;) + FLIRT.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patching&#34;&gt;Patching&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/binja-transform.png&#34; alt=&#34;BinaryNinja - code transorm&#34;&gt;&lt;/p&gt;
&lt;p&gt;From my perspective &lt;em&gt;Binja&lt;/em&gt; contains the best user interface for this (you can invert jumps, xor pieces of code, etc just by few clicks), pretty good interface is in &lt;em&gt;Cutter&lt;/em&gt;, ofc if you are masochist you can everything in radare2 ;)&lt;/p&gt;
&lt;p&gt;In IDA patching is theorethically possible, but I won&amp;rsquo;t recommend it - much easier is to easier code in built-in hex editor than with very limited &lt;em&gt;Assemble code&lt;/em&gt; feature.&lt;/p&gt;
&lt;h3 id=&#34;symbolic-contants&#34;&gt;Symbolic contants&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ida-sym-const.png&#34; alt=&#34;IDA Symbolic onstants&#34;&gt;&lt;/p&gt;
&lt;p&gt;Useful when you are analysing Windows binaries, just replace ugly int with more meaningful name.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;From my perspective if you are just looking for your 1st tool to begin with in reverse engineering, then I would recommend you &lt;em&gt;Ghidra&lt;/em&gt; (I know, it&amp;rsquo;s ugly - but it&amp;rsquo;s free), then you can start thinking about buying i.e &lt;em&gt;BinaryNinja&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Personally I very like &lt;em&gt;BinaryNinja&lt;/em&gt; - for the interface and incoming features, it seems to become very good tool in the near feature. I can&amp;rsquo;t also don&amp;rsquo;t recommend &lt;em&gt;radare2&lt;/em&gt; which is very powerful, but this tool requires a little bit more attention.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r2-learning.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think that &lt;em&gt;IDA Home&lt;/em&gt; is worth of waiting (it will be available in May), because it seems to be very limited in comparision to other tools - I can change my mind onluif it will contain &lt;em&gt;HexRays Decompiler&lt;/em&gt; built-in in home version.&lt;/p&gt;
&lt;p&gt;I hope this article will help you find your new favourite tool - if you have different opinion: please, share it in the comments :)&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://binary.ninja/&#34;&gt;Binary Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hex-rays.com/products/ida-home-is-coming/&#34;&gt;IDA Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rada.re/&#34;&gt;radare2&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://cutter.re/&#34;&gt;Cutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Light Saber icon by &lt;a href=&#34;http://delapouite.com&#34;&gt;Delapouite&lt;/a&gt; under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;CC BY 3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
    </item>
    
  </channel>
</rss>
