<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>malware-analysis on REhex</title>
    <link>/tags/malware-analysis/</link>
    <description>Recent content in malware-analysis on REhex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 25 Jan 2020 09:00:00 +0100</lastBuildDate><atom:link href="/tags/malware-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unmap PE Manually</title>
      <link>/posts/unmap-pe-manually/</link>
      <pubDate>Sat, 25 Jan 2020 09:00:00 +0100</pubDate>
      
      <guid>/posts/unmap-pe-manually/</guid>
      <description>Prerequisities  Make sure that you have dumped binary from memory (optionally) Fix PE headers if necessary  Unmap With PE bear  Open PE-bear &amp;gt; Sections &amp;gt; Section Headers Make sure that VA and VS matches RA and RS, so:  RA[i] = VA[i] RS[i] = RA[i+1] - RA[i] RS.reloc = 0 VS[i] = RS[i]   If you see some red blocks it means that PE is probably misalligned, check: Fix misalligned sections  Fix misalligned sections  Open binary in hex editor Go to the 1st section (on example above to 0x1000) Section should start in this place, nulls should be before.</description>
      <content>&lt;h2 id=&#34;prerequisities&#34;&gt;Prerequisities&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make sure that you have dumped binary from memory&lt;/li&gt;
&lt;li&gt;(optionally) Fix PE headers if necessary&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;unmap&#34;&gt;Unmap&lt;/h2&gt;
&lt;h3 id=&#34;with-pe-bear&#34;&gt;With PE bear&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;em&gt;PE-bear&lt;/em&gt; &amp;gt; &lt;em&gt;Sections&lt;/em&gt; &amp;gt; &lt;em&gt;Section Headers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Make sure that VA and VS matches RA and RS, so:
&lt;ol&gt;
&lt;li&gt;RA[i] = VA[i]&lt;/li&gt;
&lt;li&gt;RS[i] = RA[i+1] - RA[i]&lt;/li&gt;
&lt;li&gt;RS.reloc = 0&lt;/li&gt;
&lt;li&gt;VS[i] = RS[i]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If you see some red blocks it means that PE is probably misalligned, check: &lt;em&gt;Fix misalligned sections&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/img/unmap-pe.png&#34; alt=&#34;UnmapPE&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;fix-misalligned-sections&#34;&gt;Fix misalligned sections&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/unmap-hex1.png&#34; alt=&#34;Dump1&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open binary in hex editor&lt;/li&gt;
&lt;li&gt;Go to the 1st section (on example above to &lt;code&gt;0x1000&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Section should start in this place, nulls should be before.&lt;/li&gt;
&lt;li&gt;Append nulls starting from last null seen before 1st section (&lt;code&gt;0xfdf&lt;/code&gt;) to section start address (inconclusive) (&lt;code&gt;0x1000&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Save.&lt;/li&gt;
&lt;li&gt;Review in &lt;em&gt;PE Bear&lt;/em&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Sections&lt;/code&gt; &amp;gt; &lt;code&gt;Section Headers&lt;/code&gt; should no longer be marked as read.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;Section Headers &lt;/code&gt; &amp;gt; &lt;code&gt;Image Base&lt;/code&gt; is the same as dumped section address (if not, set it to dumped section address).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/img/unmap-hex2.png&#34; alt=&#34;Dump2&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Disable Aslr</title>
      <link>/posts/disable-aslr/</link>
      <pubDate>Sat, 18 Jan 2020 14:00:15 +0100</pubDate>
      
      <guid>/posts/disable-aslr/</guid>
      <description>Linux echo 0 | sudo tee /proc/sys/kernel/randomize_va_space radare2 # disable ASLR &amp;amp; reanalyse dor aslr=no aaa Windows Windows 7  Open RegEdit Goto: HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\ Create new value (not a key): MoveImages with value 0. Reboot.  Windows 10 Disable ASLR per file Set-Processmitigation -Name name.exe -Disable ForceRelocateImages Disable ASLR by default  Search in Windows for: “windows defender Security Center” Click on the second icon from the bottom: “App &amp;amp; browser control” Scroll to the bottom and click on: “Exploit protection settings” Set “Force randomization for images “ to OFF.</description>
      <content>&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; | sudo tee /proc/sys/kernel/randomize_va_space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;radare2&#34;&gt;radare2&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r2&#34; data-lang=&#34;r2&#34;&gt;# disable ASLR &amp;amp; reanalyse
dor aslr=no
aaa
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;windows-7&#34;&gt;Windows 7&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;RegEdit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Goto: &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create new &lt;em&gt;value&lt;/em&gt; (not a key): &lt;code&gt;MoveImages&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Reboot.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;windows-10&#34;&gt;Windows 10&lt;/h3&gt;
&lt;h4 id=&#34;disable-aslr-per-file&#34;&gt;Disable ASLR per file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Set-Processmitigation -Name name.exe -Disable ForceRelocateImages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;disable-aslr-by-default&#34;&gt;Disable ASLR by default&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Search in Windows for: “windows defender Security Center”&lt;/li&gt;
&lt;li&gt;Click on the second icon from the bottom: “App &amp;amp; browser control”&lt;/li&gt;
&lt;li&gt;Scroll to the bottom and click on: “Exploit protection settings”&lt;/li&gt;
&lt;li&gt;Set “Force randomization for images “ to &lt;em&gt;OFF&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oalabs.openanalysis.net/2019/06/12/disable-aslr-for-easier-malware-debugging/&#34;&gt;Disable ASLR for Easier Malware Debugging With x64dbg and IDA Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/trietptm/b84ccad9db01f459ac7e&#34;&gt;Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/ReverseEngineering/comments/bzn06z/disable_aslr_for_easier_malware_debugging_with/&#34;&gt;Disable ASLR For Easier Malware Debugging With x64dbg and IDA Pro (OALabs Quick Tip) : ReverseEngineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>C&#43;&#43; assembly</title>
      <link>/posts/c&#43;&#43;-assembly/</link>
      <pubDate>Sat, 11 Jan 2020 14:50:06 +0100</pubDate>
      
      <guid>/posts/c&#43;&#43;-assembly/</guid>
      <description>Structures C struct vs C++ class C struct  functions are loosely correlated with paramaters, parameters are usually passed via pointer, it may look like array for struct with 2 identical parameters in struct, for structures created dynamically look for malloc with non-usual size.  C++ class  Find constructor, it have always 1 argument (this pointer -&amp;gt; thiscall), main() function have initialization function __main with ctor initlizers, after creation of class with new operator the class constructor is called (can be empty), Methods are called with thiscall convention.</description>
      <content>&lt;h2 id=&#34;structures&#34;&gt;Structures&lt;/h2&gt;
&lt;h3 id=&#34;c-struct-vs-c-class&#34;&gt;C struct vs C++ class&lt;/h3&gt;
&lt;h4 id=&#34;c-struct&#34;&gt;C struct&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;functions are loosely correlated with paramaters,&lt;/li&gt;
&lt;li&gt;parameters are usually passed via pointer,&lt;/li&gt;
&lt;li&gt;it may look like array for struct with 2 identical parameters in struct,&lt;/li&gt;
&lt;li&gt;for structures created dynamically look for &lt;code&gt;malloc&lt;/code&gt; with non-usual size.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;c-class&#34;&gt;C++ class&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Find constructor, it have always 1 argument (&lt;code&gt;this&lt;/code&gt; pointer -&amp;gt; &lt;code&gt;thiscall&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt; function have initialization function &lt;code&gt;__main&lt;/code&gt; with ctor initlizers,&lt;/li&gt;
&lt;li&gt;after creation of class with &lt;code&gt;new&lt;/code&gt; operator the class constructor is called (can be empty),&lt;/li&gt;
&lt;li&gt;Methods are called with &lt;code&gt;thiscall&lt;/code&gt; convention.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h3&gt;
&lt;p&gt;Constructors of base class are called 1st in child class, additionally assigment to variables in class definition is put inside constructor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __thiscall &lt;span style=&#34;color:#a6e22e&#34;&gt;Inherited&lt;/span&gt;(Inherited &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)
{
  Box((Box &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// this was assigned in class definition, not constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;b;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inherited destructors contains destructors of base class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __thiscall &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Inherited(Inherited &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)

{
  &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Box((Box &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;virtuals&#34;&gt;Virtuals&lt;/h3&gt;
&lt;p&gt;Generally we have the same behaviour like in inheritance, but additionally we have also vtables.&lt;/p&gt;
&lt;p&gt;The structures of classess contains 1 additional field (at offset 0): &lt;code&gt;vptr&lt;/code&gt; to &lt;code&gt;vtable&lt;/code&gt; structure containing pointers to all virtual methods in this class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vtable_class_A&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;virtual_func_1&lt;/span&gt;();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;virtual_func_2&lt;/span&gt;();
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://oalabs.openanalysis.net/2019/06/03/reverse-engineering-c-with-ida-pro-classes-constructors-and-structs/&#34;&gt;OA Labs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
  </channel>
</rss>
