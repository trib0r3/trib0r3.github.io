<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rizin on REhex</title>
    <link>/tags/rizin/</link>
    <description>Recent content in rizin on REhex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 03 May 2021 14:40:06 +0100</lastBuildDate><atom:link href="/tags/rizin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>!e radare2 / rizin cheatsheet</title>
      <link>/posts/radare2-rizin-cheatsheet/</link>
      <pubDate>Mon, 03 May 2021 14:40:06 +0100</pubDate>
      
      <guid>/posts/radare2-rizin-cheatsheet/</guid>
      <description>&lt;p&gt;radare2 / rizin cheatsheet&lt;/p&gt;</description>
      <content>&lt;p&gt;radare2 / rizin cheatsheet&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: This cheatsheet was originally created for r2, but it should still be compatibile for rizin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rada.re&#34;&gt;radare2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rizin.re&#34;&gt;rizin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;h4 id=&#34;manage-file&#34;&gt;Manage file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# open in debug mode&lt;/span&gt;
r2 -d $FILE

doo &lt;span style=&#34;color:#75715e&#34;&gt;# re-open file in debug mode&lt;/span&gt;
ood &lt;span style=&#34;color:#75715e&#34;&gt;# /&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;flow-control&#34;&gt;Flow control&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# display / set breakpoint&lt;/span&gt;
db &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;flag/addr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# continue to breakpoint&lt;/span&gt;
dc

&lt;span style=&#34;color:#75715e&#34;&gt;# continue until addr / flag (without setting breakpoint)&lt;/span&gt;
dcu &amp;lt;flag/addr&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# break on syscall name / value&lt;/span&gt;
dcs &amp;lt;syscall&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# step into N instructions&lt;/span&gt;
ds &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# step over N instructions&lt;/span&gt;
dso &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reverse-debugging&#34;&gt;Reverse debugging&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dts?

&lt;span style=&#34;color:#75715e&#34;&gt;# select some point&lt;/span&gt;
db sym.foo

&lt;span style=&#34;color:#75715e&#34;&gt;# store point in time / start recording?&lt;/span&gt;
dts+
dc

&lt;span style=&#34;color:#75715e&#34;&gt;# go to the previous instruction&lt;/span&gt;
dsb

&lt;span style=&#34;color:#75715e&#34;&gt;# write / read ALL trace sessions to / from disk&lt;/span&gt;
dtst sessions.dbg
dtsf sessions.dbg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;read-values&#34;&gt;Read values&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# show registers&lt;/span&gt;
drr

&lt;span style=&#34;color:#75715e&#34;&gt;# show stack contents&lt;/span&gt;
pxr @ rsp!32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;scripting-hooks&#34;&gt;Scripting (hooks)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# auto-run command on breakpoint&lt;/span&gt;
db main  						&lt;span style=&#34;color:#75715e&#34;&gt;# set breakpoint&lt;/span&gt;
dbc main drr					&lt;span style=&#34;color:#75715e&#34;&gt;# set command on breakpoint &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;custom-environment&#34;&gt;Custom environment&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that when first starting radare2 in debug mode, you will actually be debugging rarun2! &lt;em&gt;You need to first continue execution (dc)&lt;/em&gt; which will leave you in the loader for the program itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run program with custom environment&lt;/span&gt;
r2 -d rarun2 program&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./&amp;lt;program_name&amp;gt; arg0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;foo stdin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./&amp;lt;some_file&amp;gt; setenv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ENV_VAR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;==OR==&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-rr2&#34; data-lang=&#34;rr2&#34;&gt;#!/usr/bin/rarun2
program=./&amp;lt;program_name&amp;gt;
arg0=foo
stdin=./&amp;lt;some_file&amp;gt;
setenv=ENV_VAR=&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;r2 -d rarun2 script.rr2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;visual-debugging&#34;&gt;Visual debugging&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;(Enter &lt;code&gt;V&lt;/code&gt; command to enter or &lt;code&gt;VV&lt;/code&gt; / &lt;code&gt;VV!&lt;/code&gt;), with [p] / [P] you can change views)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;With &lt;code&gt;dm&lt;/code&gt; you can check if you are still in loader code - search for &lt;em&gt;(&lt;/em&gt;)*.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[.] -&amp;gt; seek to program counter&lt;/li&gt;
&lt;li&gt;[c] -&amp;gt; toggle cursor&lt;/li&gt;
&lt;li&gt;[o] -&amp;gt; toggle asm / pseudo&lt;/li&gt;
&lt;li&gt;[g] -&amp;gt; seek to…&lt;/li&gt;
&lt;li&gt;[G] -&amp;gt; seek to highlighted&lt;/li&gt;
&lt;li&gt;[u], [U] -&amp;gt; undo / redo seek&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; , &lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; -&amp;gt; xrefs from/to&lt;/li&gt;
&lt;li&gt;[B], [F2] -&amp;gt; toggle breakpoint&lt;/li&gt;
&lt;li&gt;[s], [F7] -&amp;gt; step into&lt;/li&gt;
&lt;li&gt;[S], [F8] -&amp;gt; step over&lt;/li&gt;
&lt;li&gt;[F9] -&amp;gt; continue&lt;/li&gt;
&lt;li&gt;[t] -&amp;gt; tab managment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;esil&#34;&gt;ESIL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://monosource.gitbooks.io/radare2-explorations/content/tut3/tut3_-_esil.html&#34;&gt;ESIL · Radare2 Explorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/disassembling/esil.html&#34;&gt;ESIL · Radare2 Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-radare2rc&#34; data-lang=&#34;radare2rc&#34;&gt;e asm.emu = true # esil comments
e io.cache = true # write in memory cache
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;visual-mode&#34;&gt;Visual mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[O] - toggle pseudocode / ESIL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;commands&#34;&gt;Commands&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# check used registers by the function&lt;/span&gt;
aeaf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-session&#34;&gt;Example session&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aei 	&lt;span style=&#34;color:#75715e&#34;&gt;# init esil vm &lt;/span&gt;
aeim  &lt;span style=&#34;color:#75715e&#34;&gt;# init mem &lt;/span&gt;
aeip 	&lt;span style=&#34;color:#75715e&#34;&gt;# set esil vm pointer to current seek&lt;/span&gt;
aer	&lt;span style=&#34;color:#75715e&#34;&gt;# handle esil registers&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# example set value&lt;/span&gt;
aer eax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1234 &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# continue until eax is not greater than on start&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aecue eax,0x1234,&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/scripting/macros.html&#34;&gt;Macros · Radare2 Book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example session&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set up relative breakpoints. one per cmp instruction*&lt;/span&gt;
db sym.check_code_int+0x00001289-0x00001265
db sym.check_code_int+0x000012b7-0x00001265
db sym.check_code_int+0x000012e2-0x00001265
db sym.check_code_int+0x0000130d-0x00001265*#* *execute program*
dc* &lt;span style=&#34;color:#75715e&#34;&gt;# input four digits (doesn&amp;#39;t matter which ones)*&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
1*# define a macro that replaces the value *
*# of ebx with the content of eax and stores it into a file*
!rm ./crack_code
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eax_replace, dr ebx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;dr eax&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; | tee -a crack_code, dc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;*# use the macro*
.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eax_replace &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;@@&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 3*# show the results*
!cat ./crack_code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;malware-analysis&#34;&gt;Malware Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ob&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# show open files&lt;/span&gt;
afl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# list function ranges&lt;/span&gt;
aflt &lt;span style=&#34;color:#75715e&#34;&gt;# show function table&lt;/span&gt;

p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# show hist of entropy&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# show hist entropy horizontal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;operations&#34;&gt;Operations&lt;/h2&gt;
&lt;h4 id=&#34;writing&#34;&gt;Writing&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;r2 -w binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# write null-terminated string&lt;/span&gt;
wz &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello there&amp;#34;&lt;/span&gt;
psz &lt;span style=&#34;color:#75715e&#34;&gt;# print it&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# write number at offset&lt;/span&gt;
wx deadbeef @ 0x30
p8 @ 0x30!4 &lt;span style=&#34;color:#75715e&#34;&gt;# print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;write-in-block&#34;&gt;Write in block&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wo?

&lt;span style=&#34;color:#75715e&#34;&gt;# write bytes in sequence starting from 42, incrementing by 3&lt;/span&gt;
woe &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; @ edi!32

&lt;span style=&#34;color:#75715e&#34;&gt;# xor block of memory by 41&lt;/span&gt;
wx &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; @ esp!32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;visual-mode-1&#34;&gt;Visual mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[TAB] -&amp;gt; switch between columns&lt;/li&gt;
&lt;li&gt;[c] -&amp;gt; toggle cursor mode&lt;/li&gt;
&lt;li&gt;[i] -&amp;gt; enter &lt;em&gt;insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;[A] -&amp;gt; assemble binary:
&lt;ul&gt;
&lt;li&gt;enter your asm,&lt;/li&gt;
&lt;li&gt;instructions can be separated with &lt;code&gt;;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;press [Enter] and [y] to save changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;copypaste&#34;&gt;Copy/Paste&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Enter to &lt;em&gt;visual mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Enable cursor mode with [c].&lt;/li&gt;
&lt;li&gt;Press [Shift] to select area to copy, ten press [y].&lt;/li&gt;
&lt;li&gt;Go to desired place and press [Y] to paste copied data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;code-analysis&#34;&gt;Code analysis&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Enter to &lt;em&gt;Visual mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Seek to piece of code for analysis&lt;/li&gt;
&lt;li&gt;Enter [d], then [f] for define function.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references--furtker-reading&#34;&gt;References / Furtker Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://monosource.gitbooks.io/radare2-explorations/content/&#34;&gt;Introduction · Radare2 Explorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/&#34;&gt;Introduction · Radare2 Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
  </channel>
</rss>
